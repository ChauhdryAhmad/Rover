
Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010120  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  080102c0  080102c0  000112c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010aa0  08010aa0  000122d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010aa0  08010aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010aa8  08010aa8  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010aa8  08010aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010aac  08010aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010ab0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e08  200002d8  08010d88  000122d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020e0  08010d88  000130e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c917  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b8  00000000  00000000  0002ec1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a1  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006226  00000000  00000000  000359b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc66  00000000  00000000  0003bbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2bb6  00000000  00000000  0005b83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008070  00000000  00000000  000fe438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001064a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080102a8 	.word	0x080102a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	080102a8 	.word	0x080102a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9a0 	b.w	8000f50 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d14e      	bne.n	8000d3e <__udivmoddi4+0xaa>
 8000ca0:	4694      	mov	ip, r2
 8000ca2:	458c      	cmp	ip, r1
 8000ca4:	4686      	mov	lr, r0
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	d962      	bls.n	8000d72 <__udivmoddi4+0xde>
 8000cac:	b14a      	cbz	r2, 8000cc2 <__udivmoddi4+0x2e>
 8000cae:	f1c2 0320 	rsb	r3, r2, #32
 8000cb2:	4091      	lsls	r1, r2
 8000cb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	4319      	orrs	r1, r3
 8000cbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f f68c 	uxth.w	r6, ip
 8000cca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cda:	fb04 f106 	mul.w	r1, r4, r6
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x64>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cea:	f080 8112 	bcs.w	8000f12 <__udivmoddi4+0x27e>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 810f 	bls.w	8000f12 <__udivmoddi4+0x27e>
 8000cf4:	3c02      	subs	r4, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a59      	subs	r1, r3, r1
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d02:	fb07 1110 	mls	r1, r7, r0, r1
 8000d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0a:	fb00 f606 	mul.w	r6, r0, r6
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x94>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1a:	f080 80fc 	bcs.w	8000f16 <__udivmoddi4+0x282>
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	f240 80f9 	bls.w	8000f16 <__udivmoddi4+0x282>
 8000d24:	4463      	add	r3, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	1b9b      	subs	r3, r3, r6
 8000d2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa6>
 8000d32:	40d3      	lsrs	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xba>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb4>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa6>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x150>
 8000d56:	42a3      	cmp	r3, r4
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xcc>
 8000d5a:	4290      	cmp	r0, r2
 8000d5c:	f0c0 80f0 	bcc.w	8000f40 <__udivmoddi4+0x2ac>
 8000d60:	1a86      	subs	r6, r0, r2
 8000d62:	eb64 0303 	sbc.w	r3, r4, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	2d00      	cmp	r5, #0
 8000d6a:	d0e6      	beq.n	8000d3a <__udivmoddi4+0xa6>
 8000d6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d70:	e7e3      	b.n	8000d3a <__udivmoddi4+0xa6>
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x204>
 8000d78:	eba1 040c 	sub.w	r4, r1, ip
 8000d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d80:	fa1f f78c 	uxth.w	r7, ip
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb07 f006 	mul.w	r0, r7, r6
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x11c>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x11a>
 8000da8:	4298      	cmp	r0, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2b4>
 8000dae:	4626      	mov	r6, r4
 8000db0:	1a1c      	subs	r4, r3, r0
 8000db2:	fa1f f38e 	uxth.w	r3, lr
 8000db6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dba:	fb08 4410 	mls	r4, r8, r0, r4
 8000dbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc2:	fb00 f707 	mul.w	r7, r0, r7
 8000dc6:	429f      	cmp	r7, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x148>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x146>
 8000dd4:	429f      	cmp	r7, r3
 8000dd6:	f200 80b0 	bhi.w	8000f3a <__udivmoddi4+0x2a6>
 8000dda:	4620      	mov	r0, r4
 8000ddc:	1bdb      	subs	r3, r3, r7
 8000dde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x9c>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df4:	fa04 f301 	lsl.w	r3, r4, r1
 8000df8:	ea43 030c 	orr.w	r3, r3, ip
 8000dfc:	40f4      	lsrs	r4, r6
 8000dfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000e02:	0c38      	lsrs	r0, r7, #16
 8000e04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e08:	fbb4 fef0 	udiv	lr, r4, r0
 8000e0c:	fa1f fc87 	uxth.w	ip, r7
 8000e10:	fb00 441e 	mls	r4, r0, lr, r4
 8000e14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e18:	fb0e f90c 	mul.w	r9, lr, ip
 8000e1c:	45a1      	cmp	r9, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d90a      	bls.n	8000e3a <__udivmoddi4+0x1a6>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2a:	f080 8084 	bcs.w	8000f36 <__udivmoddi4+0x2a2>
 8000e2e:	45a1      	cmp	r9, r4
 8000e30:	f240 8081 	bls.w	8000f36 <__udivmoddi4+0x2a2>
 8000e34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	eba4 0409 	sub.w	r4, r4, r9
 8000e3e:	fa1f f983 	uxth.w	r9, r3
 8000e42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e46:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x1d2>
 8000e56:	193c      	adds	r4, r7, r4
 8000e58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e5c:	d267      	bcs.n	8000f2e <__udivmoddi4+0x29a>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d965      	bls.n	8000f2e <__udivmoddi4+0x29a>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e6e:	eba4 040c 	sub.w	r4, r4, ip
 8000e72:	429c      	cmp	r4, r3
 8000e74:	46ce      	mov	lr, r9
 8000e76:	469c      	mov	ip, r3
 8000e78:	d351      	bcc.n	8000f1e <__udivmoddi4+0x28a>
 8000e7a:	d04e      	beq.n	8000f1a <__udivmoddi4+0x286>
 8000e7c:	b155      	cbz	r5, 8000e94 <__udivmoddi4+0x200>
 8000e7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e82:	eb64 040c 	sbc.w	r4, r4, ip
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	40cb      	lsrs	r3, r1
 8000e8c:	431e      	orrs	r6, r3
 8000e8e:	40cc      	lsrs	r4, r1
 8000e90:	e9c5 6400 	strd	r6, r4, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	e750      	b.n	8000d3a <__udivmoddi4+0xa6>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ea8:	4094      	lsls	r4, r2
 8000eaa:	430c      	orrs	r4, r1
 8000eac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb4:	fa1f f78c 	uxth.w	r7, ip
 8000eb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ebc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec0:	0c23      	lsrs	r3, r4, #16
 8000ec2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec6:	fb00 f107 	mul.w	r1, r0, r7
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x24c>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ed6:	d22c      	bcs.n	8000f32 <__udivmoddi4+0x29e>
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	d92a      	bls.n	8000f32 <__udivmoddi4+0x29e>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ee8:	fb08 3311 	mls	r3, r8, r1, r3
 8000eec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef0:	fb01 f307 	mul.w	r3, r1, r7
 8000ef4:	42a3      	cmp	r3, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x276>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f00:	d213      	bcs.n	8000f2a <__udivmoddi4+0x296>
 8000f02:	42a3      	cmp	r3, r4
 8000f04:	d911      	bls.n	8000f2a <__udivmoddi4+0x296>
 8000f06:	3902      	subs	r1, #2
 8000f08:	4464      	add	r4, ip
 8000f0a:	1ae4      	subs	r4, r4, r3
 8000f0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f10:	e739      	b.n	8000d86 <__udivmoddi4+0xf2>
 8000f12:	4604      	mov	r4, r0
 8000f14:	e6f0      	b.n	8000cf8 <__udivmoddi4+0x64>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e706      	b.n	8000d28 <__udivmoddi4+0x94>
 8000f1a:	45c8      	cmp	r8, r9
 8000f1c:	d2ae      	bcs.n	8000e7c <__udivmoddi4+0x1e8>
 8000f1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7a8      	b.n	8000e7c <__udivmoddi4+0x1e8>
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	e7ed      	b.n	8000f0a <__udivmoddi4+0x276>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	e799      	b.n	8000e66 <__udivmoddi4+0x1d2>
 8000f32:	4630      	mov	r0, r6
 8000f34:	e7d4      	b.n	8000ee0 <__udivmoddi4+0x24c>
 8000f36:	46d6      	mov	lr, sl
 8000f38:	e77f      	b.n	8000e3a <__udivmoddi4+0x1a6>
 8000f3a:	4463      	add	r3, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e74d      	b.n	8000ddc <__udivmoddi4+0x148>
 8000f40:	4606      	mov	r6, r0
 8000f42:	4623      	mov	r3, r4
 8000f44:	4608      	mov	r0, r1
 8000f46:	e70f      	b.n	8000d68 <__udivmoddi4+0xd4>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4463      	add	r3, ip
 8000f4c:	e730      	b.n	8000db0 <__udivmoddi4+0x11c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <setpwm>:

//void update_rpm() {
//	 M1.rpm = (avgl * 20) / 84e6;
//	 left_pid.cvalue = M1.rpm;
//}
void setpwm(uint16_t value, uint32_t chanel) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
	switch (chanel) {
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d003      	beq.n	8000f6e <setpwm+0x1a>
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d004      	beq.n	8000f76 <setpwm+0x22>
		break;
	case 2:
		TIM1->CCR2 = value;
		break;
	}
}
 8000f6c:	e007      	b.n	8000f7e <setpwm+0x2a>
		TIM1->CCR1 = value;
 8000f6e:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <setpwm+0x38>)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 8000f74:	e003      	b.n	8000f7e <setpwm+0x2a>
		TIM1->CCR2 = value;
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <setpwm+0x38>)
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	6393      	str	r3, [r2, #56]	@ 0x38
		break;
 8000f7c:	bf00      	nop
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000

08000f90 <getDifference>:

void getDifference(wheel *w) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	switch (w->state) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7b1b      	ldrb	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <getDifference+0x16>
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d016      	beq.n	8000fd2 <getDifference+0x42>
		}
		w->distance += slot_dist;
		w->sCount = w->eCount;
		break;
	}
}
 8000fa4:	e03c      	b.n	8001020 <getDifference+0x90>
		w->sCount = TIM2->CNT;
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
		w->state = 1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	731a      	strb	r2, [r3, #12]
		w->distance += slot_dist;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000fbc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001028 <getDifference+0x98>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff f96b 	bl	800029c <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		break;
 8000fd0:	e026      	b.n	8001020 <getDifference+0x90>
		w->eCount = TIM2->CNT;
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]
		t_count_rpm1 = 0;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <getDifference+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
		int diff = w->eCount - w->sCount;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	60fb      	str	r3, [r7, #12]
		if (diff > 320000) {
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <getDifference+0xa4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	dd02      	ble.n	8000ffc <getDifference+0x6c>
			w->diff = diff;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	609a      	str	r2, [r3, #8]
		w->distance += slot_dist;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001002:	a309      	add	r3, pc, #36	@ (adr r3, 8001028 <getDifference+0x98>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff f948 	bl	800029c <__adddf3>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	e9c1 2308 	strd	r2, r3, [r1, #32]
		w->sCount = w->eCount;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
		break;
 800101e:	bf00      	nop
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	d70a3d71 	.word	0xd70a3d71
 800102c:	3ff970a3 	.word	0x3ff970a3
 8001030:	200004a0 	.word	0x200004a0
 8001034:	0004e200 	.word	0x0004e200

08001038 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LEFT_Pin) {
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x1e>
		right_wheel.stop_counter = 0;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x38>)
 800104a:	2200      	movs	r2, #0
 800104c:	869a      	strh	r2, [r3, #52]	@ 0x34
		getDifference(&right_wheel);
 800104e:	4808      	ldr	r0, [pc, #32]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x38>)
 8001050:	f7ff ff9e 	bl	8000f90 <getDifference>
	} else if (GPIO_Pin == RIGHT_Pin) {
		left_wheel.stop_counter = 0;
		getDifference(&left_wheel);
	}
}
 8001054:	e008      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x30>
	} else if (GPIO_Pin == RIGHT_Pin) {
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_EXTI_Callback+0x30>
		left_wheel.stop_counter = 0;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x3c>)
 800105e:	2200      	movs	r2, #0
 8001060:	869a      	strh	r2, [r3, #52]	@ 0x34
		getDifference(&left_wheel);
 8001062:	4804      	ldr	r0, [pc, #16]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001064:	f7ff ff94 	bl	8000f90 <getDifference>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000430 	.word	0x20000430
 8001074:	20000468 	.word	0x20000468

08001078 <Transmit_SERIAL_USB>:
double calc_theta(int, int);
double getArcLength(int, int);
void Transmit_SERIAL_USB(char *buf, uint8_t chanel) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	switch (chanel) {
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <Transmit_SERIAL_USB+0x18>
 800108a:	2b01      	cmp	r3, #1
 800108c:	d00a      	beq.n	80010a4 <Transmit_SERIAL_USB+0x2c>
		for (int i = 0; i < strlen(buf); i++) {
			Transmit(&huart2, buf[i]);
		}
		break;
	}
}
 800108e:	e01f      	b.n	80010d0 <Transmit_SERIAL_USB+0x58>
		CDC_Transmit_FS(buf, strlen(buf));
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f8a5 	bl	80001e0 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29b      	uxth	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f00b f949 	bl	800c334 <CDC_Transmit_FS>
		break;
 80010a2:	e015      	b.n	80010d0 <Transmit_SERIAL_USB+0x58>
		for (int i = 0; i < strlen(buf); i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e00a      	b.n	80010c0 <Transmit_SERIAL_USB+0x48>
			Transmit(&huart2, buf[i]);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <Transmit_SERIAL_USB+0x60>)
 80010b6:	f007 fc4d 	bl	8008954 <Transmit>
		for (int i = 0; i < strlen(buf); i++) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f88d 	bl	80001e0 <strlen>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d8ed      	bhi.n	80010aa <Transmit_SERIAL_USB+0x32>
		break;
 80010ce:	bf00      	nop
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000734 	.word	0x20000734

080010dc <INIT>:
//void Transmit_SERIAL_USB(char *buf) {
//	Transmit_SERIAL_USB_1(buf);
//	HAL_UART_Transmit(&huart2, buf, sizeof(buf), 100);
//}
void INIT() {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	right_pid.coffp = 0.5;
 80010e0:	4933      	ldr	r1, [pc, #204]	@ (80011b0 <INIT+0xd4>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <INIT+0xd8>)
 80010e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	right_pid.coffi = 1; // change to 4
 80010ec:	4930      	ldr	r1, [pc, #192]	@ (80011b0 <INIT+0xd4>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <INIT+0xdc>)
 80010f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	right_pid.coffd = 0;
 80010f8:	492d      	ldr	r1, [pc, #180]	@ (80011b0 <INIT+0xd4>)
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9c1 2308 	strd	r2, r3, [r1, #32]
	right_pid.outmax = 8000;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <INIT+0xd4>)
 8001108:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800110c:	851a      	strh	r2, [r3, #40]	@ 0x28
	right_pid.outmin = 600;
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <INIT+0xd4>)
 8001110:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001114:	855a      	strh	r2, [r3, #42]	@ 0x2a
	right_pid.imin = -5000;
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <INIT+0xd4>)
 8001118:	f64e 4278 	movw	r2, #60536	@ 0xec78
 800111c:	819a      	strh	r2, [r3, #12]
	right_pid.imax = 5000;
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <INIT+0xd4>)
 8001120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001124:	815a      	strh	r2, [r3, #10]
	right_pid.integral = 0;
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <INIT+0xd4>)
 8001128:	2200      	movs	r2, #0
 800112a:	811a      	strh	r2, [r3, #8]
	right_pid.side = 1;
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <INIT+0xd4>)
 800112e:	2201      	movs	r2, #1
 8001130:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	right_wheel.base_start = 3000;
 8001134:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <INIT+0xe0>)
 8001136:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800113a:	859a      	strh	r2, [r3, #44]	@ 0x2c
	right_wheel.stop_counter = 0; //Max 2000
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <INIT+0xe0>)
 800113e:	2200      	movs	r2, #0
 8001140:	869a      	strh	r2, [r3, #52]	@ 0x34

	left_pid.coffp = 0.5; //3.056
 8001142:	491f      	ldr	r1, [pc, #124]	@ (80011c0 <INIT+0xe4>)
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <INIT+0xd8>)
 800114a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	left_pid.coffi = 1;  //
 800114e:	491c      	ldr	r1, [pc, #112]	@ (80011c0 <INIT+0xe4>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <INIT+0xdc>)
 8001156:	e9c1 2306 	strd	r2, r3, [r1, #24]
	left_pid.coffd = 0;
 800115a:	4919      	ldr	r1, [pc, #100]	@ (80011c0 <INIT+0xe4>)
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c1 2308 	strd	r2, r3, [r1, #32]
	left_pid.outmax = 8000;
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <INIT+0xe4>)
 800116a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800116e:	851a      	strh	r2, [r3, #40]	@ 0x28
	left_pid.outmin = 600;
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <INIT+0xe4>)
 8001172:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001176:	855a      	strh	r2, [r3, #42]	@ 0x2a
	left_pid.imin = -5000;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <INIT+0xe4>)
 800117a:	f64e 4278 	movw	r2, #60536	@ 0xec78
 800117e:	819a      	strh	r2, [r3, #12]
	left_pid.imax = 5000;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <INIT+0xe4>)
 8001182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001186:	815a      	strh	r2, [r3, #10]
	left_pid.integral = 0;
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <INIT+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	811a      	strh	r2, [r3, #8]
	left_pid.side = 2;
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <INIT+0xe4>)
 8001190:	2202      	movs	r2, #2
 8001192:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	left_wheel.base_start = 3000;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <INIT+0xe8>)
 8001198:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800119c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	left_wheel.stop_counter = 0; //Max 2000
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <INIT+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200004e0 	.word	0x200004e0
 80011b4:	3fe00000 	.word	0x3fe00000
 80011b8:	3ff00000 	.word	0x3ff00000
 80011bc:	20000430 	.word	0x20000430
 80011c0:	200004a8 	.word	0x200004a8
 80011c4:	20000468 	.word	0x20000468

080011c8 <calcPID>:

void calcPID(PID *in) {
 80011c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
	in->error = in->svalue - in->cvalue;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	809a      	strh	r2, [r3, #4]
	in->integral += (in->error / 5);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011fa:	494e      	ldr	r1, [pc, #312]	@ (8001334 <calcPID+0x16c>)
 80011fc:	fb81 0103 	smull	r0, r1, r1, r3
 8001200:	1049      	asrs	r1, r1, #1
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1acb      	subs	r3, r1, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	811a      	strh	r2, [r3, #8]
	if (in->integral > in->imax)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001220:	429a      	cmp	r2, r3
 8001222:	dd05      	ble.n	8001230 <calcPID+0x68>
		in->integral = in->imax;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	811a      	strh	r2, [r3, #8]
 800122e:	e00c      	b.n	800124a <calcPID+0x82>
	else if (in->integral < in->imin)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	da04      	bge.n	800124a <calcPID+0x82>
		in->integral = in->imin;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	811a      	strh	r2, [r3, #8]
	int derr = in->prev_error - in->error;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	613b      	str	r3, [r7, #16]
	in->prev_error = in->error;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	80da      	strh	r2, [r3, #6]
	double out = (in->coffp * in->error) + (in->coffi * in->integral)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f95e 	bl	8000534 <__aeabi_i2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9c2 	bl	8000608 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f9af 	bl	8000608 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4640      	mov	r0, r8
 80012b0:	4649      	mov	r1, r9
 80012b2:	f7fe fff3 	bl	800029c <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
			+ (in->coffd * derr);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80012c4:	6938      	ldr	r0, [r7, #16]
 80012c6:	f7ff f935 	bl	8000534 <__aeabi_i2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7ff f999 	bl	8000608 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
	double out = (in->coffp * in->error) + (in->coffi * in->integral)
 80012da:	4640      	mov	r0, r8
 80012dc:	4649      	mov	r1, r9
 80012de:	f7fe ffdd 	bl	800029c <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int tem_out = lrint(out);
 80012ea:	ed97 0b02 	vldr	d0, [r7, #8]
 80012ee:	f00e fe9f 	bl	8010030 <lrint>
 80012f2:	6178      	str	r0, [r7, #20]
	if (tem_out < in->outmin)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80012fa:	461a      	mov	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	4293      	cmp	r3, r2
 8001300:	da04      	bge.n	800130c <calcPID+0x144>
		tem_out = in->outmin;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e00a      	b.n	8001322 <calcPID+0x15a>
	else if (tem_out > in->outmax)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001312:	461a      	mov	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4293      	cmp	r3, r2
 8001318:	dd03      	ble.n	8001322 <calcPID+0x15a>
		tem_out = in->outmax;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001320:	617b      	str	r3, [r7, #20]
	in->output = tem_out;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	b21a      	sxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	66666667 	.word	0x66666667

08001338 <ischar>:
// chanel 0 is usb chanel 1 is serial port
char ischar(int chanel) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	switch (chanel) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <ischar+0x16>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d00a      	beq.n	8001362 <ischar+0x2a>
 800134c:	e00e      	b.n	800136c <ischar+0x34>
	case USB:
		if (usb.head == usb.tail)
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <ischar+0x3c>)
 8001350:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <ischar+0x3c>)
 8001354:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001356:	429a      	cmp	r2, r3
 8001358:	d101      	bne.n	800135e <ischar+0x26>
			return 0;
 800135a:	2300      	movs	r3, #0
 800135c:	e006      	b.n	800136c <ischar+0x34>
		else
			return 1;
 800135e:	2301      	movs	r3, #1
 8001360:	e004      	b.n	800136c <ischar+0x34>
		break;
	case SERIAL:
		return csts(&huart2);
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <ischar+0x40>)
 8001364:	f007 fb7d 	bl	8008a62 <csts>
 8001368:	4603      	mov	r3, r0
 800136a:	e7ff      	b.n	800136c <ischar+0x34>
		break;

	}
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200002f4 	.word	0x200002f4
 8001378:	20000734 	.word	0x20000734

0800137c <readchar>:

char readchar(int chanel) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	switch (chanel) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <readchar+0x16>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d022      	beq.n	80013d6 <readchar+0x5a>
 8001390:	e033      	b.n	80013fa <readchar+0x7e>
	case USB: {
		char t = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	73bb      	strb	r3, [r7, #14]
		if (ischar(chanel))
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffce 	bl	8001338 <ischar>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d017      	beq.n	80013d2 <readchar+0x56>
			t = usb.buf[usb.tail++];
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <readchar+0x88>)
 80013a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4916      	ldr	r1, [pc, #88]	@ (8001404 <readchar+0x88>)
 80013aa:	668a      	str	r2, [r1, #104]	@ 0x68
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <readchar+0x88>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	73bb      	strb	r3, [r7, #14]
		else
			return 0;
		usb.tail %= 100;
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <readchar+0x88>)
 80013b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <readchar+0x8c>)
 80013b8:	fb83 1302 	smull	r1, r3, r3, r2
 80013bc:	1159      	asrs	r1, r3, #5
 80013be:	17d3      	asrs	r3, r2, #31
 80013c0:	1acb      	subs	r3, r1, r3
 80013c2:	2164      	movs	r1, #100	@ 0x64
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <readchar+0x88>)
 80013cc:	6693      	str	r3, [r2, #104]	@ 0x68
		return t;
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	e013      	b.n	80013fa <readchar+0x7e>
			return 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e011      	b.n	80013fa <readchar+0x7e>
	}
		break;

	case SERIAL: {
		char t = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
		if (ischar(chanel)) {
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffac 	bl	8001338 <ischar>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <readchar+0x7a>
			t = Receive(&huart2, 10);
 80013e6:	210a      	movs	r1, #10
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <readchar+0x90>)
 80013ea:	f007 faf8 	bl	80089de <Receive>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
			return t;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e001      	b.n	80013fa <readchar+0x7e>
		} else
			return 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e7ff      	b.n	80013fa <readchar+0x7e>
	}
		break;
	}
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002f4 	.word	0x200002f4
 8001408:	51eb851f 	.word	0x51eb851f
 800140c:	20000734 	.word	0x20000734

08001410 <toggleDirection>:

void toggleDirection(uint8_t wheel_side) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	switch (wheel_side) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d002      	beq.n	8001426 <toggleDirection+0x16>
 8001420:	2b02      	cmp	r3, #2
 8001422:	d00d      	beq.n	8001440 <toggleDirection+0x30>
		TIM1->CCR1 = 0;
		HAL_Delay(2000);
		HAL_GPIO_TogglePin(Relay1_GPIO_Port, Relay1_Pin);
		break;
	}
}
 8001424:	e019      	b.n	800145a <toggleDirection+0x4a>
		TIM1->CCR2 = 0;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <toggleDirection+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(2000);
 800142c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001430:	f002 f930 	bl	8003694 <HAL_Delay>
		HAL_GPIO_TogglePin(Relay2_GPIO_Port, Relay2_Pin);
 8001434:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001438:	480b      	ldr	r0, [pc, #44]	@ (8001468 <toggleDirection+0x58>)
 800143a:	f003 fbe8 	bl	8004c0e <HAL_GPIO_TogglePin>
		break;
 800143e:	e00c      	b.n	800145a <toggleDirection+0x4a>
		TIM1->CCR1 = 0;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <toggleDirection+0x54>)
 8001442:	2200      	movs	r2, #0
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(2000);
 8001446:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800144a:	f002 f923 	bl	8003694 <HAL_Delay>
		HAL_GPIO_TogglePin(Relay1_GPIO_Port, Relay1_Pin);
 800144e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <toggleDirection+0x58>)
 8001454:	f003 fbdb 	bl	8004c0e <HAL_GPIO_TogglePin>
		break;
 8001458:	bf00      	nop
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000
 8001468:	40020400 	.word	0x40020400

0800146c <get_distance>:

double get_distance() {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	return left_wheel.distance;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <get_distance+0x20>)
 8001472:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001476:	ec43 2b17 	vmov	d7, r2, r3
//	return(left_wheel.distance + right_wheel.distance)/2;
}
 800147a:	eeb0 0a47 	vmov.f32	s0, s14
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000468 	.word	0x20000468

08001490 <calc_distance>:

double calc_distance(int x, int y) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	return sqrt(x * x + y * y);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	fb03 f203 	mul.w	r2, r3, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	fb03 f303 	mul.w	r3, r3, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f843 	bl	8000534 <__aeabi_i2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	ec43 2b10 	vmov	d0, r2, r3
 80014b6:	f00e fbef 	bl	800fc98 <sqrt>
 80014ba:	eeb0 7a40 	vmov.f32	s14, s0
 80014be:	eef0 7a60 	vmov.f32	s15, s1
}
 80014c2:	eeb0 0a47 	vmov.f32	s0, s14
 80014c6:	eef0 0a67 	vmov.f32	s1, s15
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <startRotation>:
void startRotation(double theta) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0b00 	vstr	d0, [r7]
	TIM1->CCR2 = 0;
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <startRotation+0x88>)
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR1 = 0;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <startRotation+0x88>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(500);
 80014e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014ea:	f002 f8d3 	bl	8003694 <HAL_Delay>
	if (theta < 0) {
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014fa:	f7ff faf7 	bl	8000aec <__aeabi_dcmplt>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <startRotation+0x4e>
		HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800150a:	4814      	ldr	r0, [pc, #80]	@ (800155c <startRotation+0x8c>)
 800150c:	f003 fb66 	bl	8004bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001516:	4811      	ldr	r0, [pc, #68]	@ (800155c <startRotation+0x8c>)
 8001518:	f003 fb60 	bl	8004bdc <HAL_GPIO_WritePin>
 800151c:	e00b      	b.n	8001536 <startRotation+0x66>

	} else {
		HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001524:	480d      	ldr	r0, [pc, #52]	@ (800155c <startRotation+0x8c>)
 8001526:	f003 fb59 	bl	8004bdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001530:	480a      	ldr	r0, [pc, #40]	@ (800155c <startRotation+0x8c>)
 8001532:	f003 fb53 	bl	8004bdc <HAL_GPIO_WritePin>
	}
	HAL_Delay(500);
 8001536:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800153a:	f002 f8ab 	bl	8003694 <HAL_Delay>
	TIM1->CCR2 = 3000;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <startRotation+0x88>)
 8001540:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM1->CCR1 = 3000;
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <startRotation+0x88>)
 8001548:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800154c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40010000 	.word	0x40010000
 800155c:	40020400 	.word	0x40020400

08001560 <TURN_RIGHT_LEFT>:
	}

	return (radius - (base / 2) * theta);

}
double TURN_RIGHT_LEFT(double radius, double theta, uint8_t direction) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	@ 0x70
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0b04 	vstr	d0, [r7, #16]
 800156a:	ed87 1b02 	vstr	d1, [r7, #8]
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]

	theta *= (3.14 / 180);
 8001572:	a397      	add	r3, pc, #604	@ (adr r3, 80017d0 <TURN_RIGHT_LEFT+0x270>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157c:	f7ff f844 	bl	8000608 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// Calculate angular velocity
	double distance = radius * theta;
 8001588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800158c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001590:	f7ff f83a 	bl	8000608 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double omega = theta / (distance / radius);
 800159c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015a0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80015a4:	f7ff f95a 	bl	800085c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	// Calculate relative radii for the left and right tires
	double radius_left = radius + (base / 2);
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b7f      	ldr	r3, [pc, #508]	@ (80017c0 <TURN_RIGHT_LEFT+0x260>)
 80015c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c6:	f7fe fe69 	bl	800029c <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double radius_right = radius - (base / 2);
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b7a      	ldr	r3, [pc, #488]	@ (80017c0 <TURN_RIGHT_LEFT+0x260>)
 80015d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015dc:	f7fe fe5c 	bl	8000298 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	// Calculate linear velocities based on angular velocity and relative radii
	double velocity_left = omega * radius_left;
 80015e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80015f0:	f7ff f80a 	bl	8000608 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	double velocity_right = omega * radius_right;
 80015fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001600:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001604:	f7ff f800 	bl	8000608 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	// Convert linear velocities to RPM
	double rpm_factor = 60 / (2 * 3.14 * TYRE_DIA);
 8001610:	a367      	add	r3, pc, #412	@ (adr r3, 80017b0 <TURN_RIGHT_LEFT+0x250>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	velocity_left /= rpm_factor;
 800161a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800161e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001622:	f7ff f91b 	bl	800085c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	velocity_right /= rpm_factor;
 800162e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001632:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001636:	f7ff f911 	bl	800085c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	// Scale up velocities
	velocity_left *= CCR_SCALE_FACTOR;
 8001642:	a35d      	add	r3, pc, #372	@ (adr r3, 80017b8 <TURN_RIGHT_LEFT+0x258>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	velocity_right *= CCR_SCALE_FACTOR;
 8001658:	a357      	add	r3, pc, #348	@ (adr r3, 80017b8 <TURN_RIGHT_LEFT+0x258>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001662:	f7fe ffd1 	bl	8000608 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	// Determine the maximum velocity
	double max_velocity =
			(velocity_right > velocity_left) ? velocity_right : velocity_left;
 800166e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001672:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001676:	f7ff fa57 	bl	8000b28 <__aeabi_dcmpgt>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <TURN_RIGHT_LEFT+0x126>
 8001680:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001684:	e001      	b.n	800168a <TURN_RIGHT_LEFT+0x12a>
 8001686:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
	double max_velocity =
 800168a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double min_velocity =
			(velocity_right < velocity_left) ? velocity_right : velocity_left;
 800168e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001692:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001696:	f7ff fa29 	bl	8000aec <__aeabi_dcmplt>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <TURN_RIGHT_LEFT+0x146>
 80016a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016a4:	e001      	b.n	80016aa <TURN_RIGHT_LEFT+0x14a>
 80016a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
	double min_velocity =
 80016aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Scaling down if necessary
	if (max_velocity > MAX_CCR) {
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b44      	ldr	r3, [pc, #272]	@ (80017c4 <TURN_RIGHT_LEFT+0x264>)
 80016b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016b8:	f7ff fa36 	bl	8000b28 <__aeabi_dcmpgt>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01e      	beq.n	8001700 <TURN_RIGHT_LEFT+0x1a0>
		double scaling_ratio = MAX_CCR / max_velocity;
 80016c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	493e      	ldr	r1, [pc, #248]	@ (80017c4 <TURN_RIGHT_LEFT+0x264>)
 80016cc:	f7ff f8c6 	bl	800085c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		velocity_left *= scaling_ratio;
 80016d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80016e0:	f7fe ff92 	bl	8000608 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		velocity_right *= scaling_ratio;
 80016ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80016f4:	f7fe ff88 	bl	8000608 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	}
	if (min_velocity < MIN_CCR) {
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <TURN_RIGHT_LEFT+0x268>)
 8001706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800170a:	f7ff f9ef 	bl	8000aec <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01e      	beq.n	8001752 <TURN_RIGHT_LEFT+0x1f2>
		double scaling_ratio = MIN_CCR / min_velocity;
 8001714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001718:	f04f 0000 	mov.w	r0, #0
 800171c:	492a      	ldr	r1, [pc, #168]	@ (80017c8 <TURN_RIGHT_LEFT+0x268>)
 800171e:	f7ff f89d 	bl	800085c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9c7 2306 	strd	r2, r3, [r7, #24]
		velocity_left *= scaling_ratio;
 800172a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800172e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001732:	f7fe ff69 	bl	8000608 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
		velocity_right *= scaling_ratio;
 800173e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001742:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001746:	f7fe ff5f 	bl	8000608 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	}

	// Set PWM CCR values based on direction
	if (direction == LEFT) {
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d110      	bne.n	800177a <TURN_RIGHT_LEFT+0x21a>
		TIM1->CCR1 = (uint16_t) velocity_left;
 8001758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800175c:	f7ff fa2c 	bl	8000bb8 <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <TURN_RIGHT_LEFT+0x26c>)
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint16_t) velocity_right;
 8001768:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800176c:	f7ff fa24 	bl	8000bb8 <__aeabi_d2uiz>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <TURN_RIGHT_LEFT+0x26c>)
 8001776:	639a      	str	r2, [r3, #56]	@ 0x38
 8001778:	e00f      	b.n	800179a <TURN_RIGHT_LEFT+0x23a>
	} else {
		TIM1->CCR1 = (uint16_t) velocity_right;
 800177a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800177e:	f7ff fa1b 	bl	8000bb8 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <TURN_RIGHT_LEFT+0x26c>)
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint16_t) velocity_left;
 800178a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800178e:	f7ff fa13 	bl	8000bb8 <__aeabi_d2uiz>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <TURN_RIGHT_LEFT+0x26c>)
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	// Return the new radius or any other calculated value as needed
	return radius_right;
 800179a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800179e:	ec43 2b17 	vmov	d7, r2, r3
}
 80017a2:	eeb0 0a47 	vmov.f32	s0, s14
 80017a6:	eef0 0a67 	vmov.f32	s1, s15
 80017aa:	3770      	adds	r7, #112	@ 0x70
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	e3b08d21 	.word	0xe3b08d21
 80017b4:	3fee177e 	.word	0x3fee177e
 80017b8:	70a3d70a 	.word	0x70a3d70a
 80017bc:	4050aa3d 	.word	0x4050aa3d
 80017c0:	402e0000 	.word	0x402e0000
 80017c4:	40bf4000 	.word	0x40bf4000
 80017c8:	40990000 	.word	0x40990000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	d98b0955 	.word	0xd98b0955
 80017d4:	3f91dcf4 	.word	0x3f91dcf4

080017d8 <process>:
void process(char *buf, uint8_t chanel) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0bc      	sub	sp, #240	@ 0xf0
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
	char *ln = NULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	char msg[100];
	if ((ln = strstr(buf, "GOTOX:")) != NULL) {
 80017ea:	49b9      	ldr	r1, [pc, #740]	@ (8001ad0 <process+0x2f8>)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f00c f9ce 	bl	800db8e <strstr>
 80017f2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 80017f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d057      	beq.n	80018ae <process+0xd6>
		int tmp = atoi(&ln[6]);
 80017fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001802:	3306      	adds	r3, #6
 8001804:	4618      	mov	r0, r3
 8001806:	f00b f9ea 	bl	800cbde <atoi>
 800180a:	6778      	str	r0, [r7, #116]	@ 0x74
		if ((ln = strstr(buf, ",Y:")) != NULL) {
 800180c:	49b1      	ldr	r1, [pc, #708]	@ (8001ad4 <process+0x2fc>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f00c f9bd 	bl	800db8e <strstr>
 8001814:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d036      	beq.n	800188e <process+0xb6>
			int tmp2 = atoi(&ln[3]);
 8001820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001824:	3303      	adds	r3, #3
 8001826:	4618      	mov	r0, r3
 8001828:	f00b f9d9 	bl	800cbde <atoi>
 800182c:	6738      	str	r0, [r7, #112]	@ 0x70
			current_dist = get_distance();
 800182e:	f7ff fe1d 	bl	800146c <get_distance>
 8001832:	eeb0 7a40 	vmov.f32	s14, s0
 8001836:	eef0 7a60 	vmov.f32	s15, s1
 800183a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ad8 <process+0x300>)
 800183c:	ed83 7b00 	vstr	d7, [r3]
			arc_length = getArcLength(tmp, tmp2);
 8001840:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001842:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001844:	f000 fe28 	bl	8002498 <getArcLength>
 8001848:	eeb0 7a40 	vmov.f32	s14, s0
 800184c:	eef0 7a60 	vmov.f32	s15, s1
 8001850:	4ba2      	ldr	r3, [pc, #648]	@ (8001adc <process+0x304>)
 8001852:	ed83 7b00 	vstr	d7, [r3]
			startRotation(calc_theta(tmp, tmp2));
 8001856:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001858:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800185a:	f000 fdff 	bl	800245c <calc_theta>
 800185e:	eeb0 7a40 	vmov.f32	s14, s0
 8001862:	eef0 7a60 	vmov.f32	s15, s1
 8001866:	eeb0 0a47 	vmov.f32	s0, s14
 800186a:	eef0 0a67 	vmov.f32	s1, s15
 800186e:	f7ff fe2f 	bl	80014d0 <startRotation>
			user_dist = calc_distance(tmp, tmp2);
 8001872:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001874:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001876:	f7ff fe0b 	bl	8001490 <calc_distance>
 800187a:	eeb0 7a40 	vmov.f32	s14, s0
 800187e:	eef0 7a60 	vmov.f32	s15, s1
 8001882:	4b97      	ldr	r3, [pc, #604]	@ (8001ae0 <process+0x308>)
 8001884:	ed83 7b00 	vstr	d7, [r3]
			mainmode = 4;
 8001888:	4b96      	ldr	r3, [pc, #600]	@ (8001ae4 <process+0x30c>)
 800188a:	2204      	movs	r2, #4
 800188c:	601a      	str	r2, [r3, #0]
		}
		sprintf(msg, "arch length is %d", arc_length);
 800188e:	4b93      	ldr	r3, [pc, #588]	@ (8001adc <process+0x304>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f107 000c 	add.w	r0, r7, #12
 8001898:	4993      	ldr	r1, [pc, #588]	@ (8001ae8 <process+0x310>)
 800189a:	f00c f8fb 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fbe6 	bl	8001078 <Transmit_SERIAL_USB>
//			set_rpm2 = 1;
//			mainmode = 2;
		}

	}
}
 80018ac:	e3b6      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETWR:")) != NULL) {
 80018ae:	498f      	ldr	r1, [pc, #572]	@ (8001aec <process+0x314>)
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f00c f96c 	bl	800db8e <strstr>
 80018b6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 80018ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d018      	beq.n	80018f4 <process+0x11c>
		uint16_t tmp = atoi(&ln[6]);
 80018c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018c6:	3306      	adds	r3, #6
 80018c8:	4618      	mov	r0, r3
 80018ca:	f00b f988 	bl	800cbde <atoi>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		sprintf(msg, "Motor 1 CCR Set to %d\r\n", tmp);
 80018d4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4984      	ldr	r1, [pc, #528]	@ (8001af0 <process+0x318>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f00c f8d8 	bl	800da94 <siprintf>
		isDirect = 1;
 80018e4:	4b83      	ldr	r3, [pc, #524]	@ (8001af4 <process+0x31c>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
		TIM1->CCR1 = tmp;
 80018ea:	4a83      	ldr	r2, [pc, #524]	@ (8001af8 <process+0x320>)
 80018ec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80018f0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80018f2:	e393      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETWL:")) != NULL) {
 80018f4:	4981      	ldr	r1, [pc, #516]	@ (8001afc <process+0x324>)
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f00c f949 	bl	800db8e <strstr>
 80018fc:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d018      	beq.n	800193a <process+0x162>
		uint16_t tmp = atoi(&ln[6]);
 8001908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800190c:	3306      	adds	r3, #6
 800190e:	4618      	mov	r0, r3
 8001910:	f00b f965 	bl	800cbde <atoi>
 8001914:	4603      	mov	r3, r0
 8001916:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
		sprintf(msg, "Motor 2 CCR set to %d\r\n", tmp);
 800191a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4977      	ldr	r1, [pc, #476]	@ (8001b00 <process+0x328>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00c f8b5 	bl	800da94 <siprintf>
		isDirect = 1;
 800192a:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <process+0x31c>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
		TIM1->CCR2 = tmp;
 8001930:	4a71      	ldr	r2, [pc, #452]	@ (8001af8 <process+0x320>)
 8001932:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001936:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001938:	e370      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPIDL:")) != NULL) {
 800193a:	4972      	ldr	r1, [pc, #456]	@ (8001b04 <process+0x32c>)
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f00c f926 	bl	800db8e <strstr>
 8001942:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d030      	beq.n	80019b0 <process+0x1d8>
		uint16_t tmp = atoi(&ln[8]);
 800194e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001952:	3308      	adds	r3, #8
 8001954:	4618      	mov	r0, r3
 8001956:	f00b f942 	bl	800cbde <atoi>
 800195a:	4603      	mov	r3, r0
 800195c:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		sprintf(msg, "Left Wheel PID set to %d\r\n", tmp);
 8001960:	f8b7 207c 	ldrh.w	r2, [r7, #124]	@ 0x7c
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4967      	ldr	r1, [pc, #412]	@ (8001b08 <process+0x330>)
 800196a:	4618      	mov	r0, r3
 800196c:	f00c f892 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fb7d 	bl	8001078 <Transmit_SERIAL_USB>
		left_pid.svalue = tmp * 100;
 800197e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001982:	461a      	mov	r2, r3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	0091      	lsls	r1, r2, #2
 800198c:	461a      	mov	r2, r3
 800198e:	460b      	mov	r3, r1
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	b29b      	uxth	r3, r3
 8001996:	b21a      	sxth	r2, r3
 8001998:	4b5c      	ldr	r3, [pc, #368]	@ (8001b0c <process+0x334>)
 800199a:	805a      	strh	r2, [r3, #2]
		isDirect = 0;
 800199c:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <process+0x31c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
		set_rpm1 = 1;
 80019a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b10 <process+0x338>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		mainmode = 1;
 80019a8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae4 <process+0x30c>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	e335      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPIDR:")) != NULL) {
 80019b0:	4958      	ldr	r1, [pc, #352]	@ (8001b14 <process+0x33c>)
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f00c f8eb 	bl	800db8e <strstr>
 80019b8:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 80019bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d030      	beq.n	8001a26 <process+0x24e>
		uint16_t tmp = atoi(&ln[8]);
 80019c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019c8:	3308      	adds	r3, #8
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00b f907 	bl	800cbde <atoi>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		sprintf(msg, "Right Wheel PID set to %d\r\n", tmp);
 80019d6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	494e      	ldr	r1, [pc, #312]	@ (8001b18 <process+0x340>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f857 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb42 	bl	8001078 <Transmit_SERIAL_USB>
		isDirect = 0;
 80019f4:	4b3f      	ldr	r3, [pc, #252]	@ (8001af4 <process+0x31c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
		right_pid.svalue = tmp * 100;
 80019fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80019fe:	461a      	mov	r2, r3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	0091      	lsls	r1, r2, #2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	4b41      	ldr	r3, [pc, #260]	@ (8001b1c <process+0x344>)
 8001a16:	805a      	strh	r2, [r3, #2]
		set_rpm2 = 1;
 8001a18:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <process+0x348>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
		mainmode = 1;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <process+0x30c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	e2fa      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPPR:")) != NULL) {
 8001a26:	493f      	ldr	r1, [pc, #252]	@ (8001b24 <process+0x34c>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f00c f8b0 	bl	800db8e <strstr>
 8001a2e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01f      	beq.n	8001a7a <process+0x2a2>
		double tmp = atof(&ln[7]);
 8001a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a3e:	3307      	adds	r3, #7
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00b f8c9 	bl	800cbd8 <atof>
 8001a46:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
		sprintf(msg, "Motor 2 coffP set to %d\r\n", (int) tmp);
 8001a4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a4e:	f7ff f88b 	bl	8000b68 <__aeabi_d2iz>
 8001a52:	4602      	mov	r2, r0
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4933      	ldr	r1, [pc, #204]	@ (8001b28 <process+0x350>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00c f81a 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb05 	bl	8001078 <Transmit_SERIAL_USB>
		right_pid.coffp = tmp;
 8001a6e:	492b      	ldr	r1, [pc, #172]	@ (8001b1c <process+0x344>)
 8001a70:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001a74:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001a78:	e2d0      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPIR:")) != NULL) {
 8001a7a:	492c      	ldr	r1, [pc, #176]	@ (8001b2c <process+0x354>)
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f00c f886 	bl	800db8e <strstr>
 8001a82:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d052      	beq.n	8001b34 <process+0x35c>
		double tmp = atof(&ln[7]);
 8001a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a92:	3307      	adds	r3, #7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00b f89f 	bl	800cbd8 <atof>
 8001a9a:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
		sprintf(msg, "Motor 2 coffI set to %d\r\n", (int) tmp);
 8001a9e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001aa2:	f7ff f861 	bl	8000b68 <__aeabi_d2iz>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4920      	ldr	r1, [pc, #128]	@ (8001b30 <process+0x358>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f00b fff0 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fadb 	bl	8001078 <Transmit_SERIAL_USB>
		right_pid.coffi = tmp;
 8001ac2:	4916      	ldr	r1, [pc, #88]	@ (8001b1c <process+0x344>)
 8001ac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ac8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001acc:	e2a6      	b.n	800201c <process+0x844>
 8001ace:	bf00      	nop
 8001ad0:	080102c0 	.word	0x080102c0
 8001ad4:	080102c8 	.word	0x080102c8
 8001ad8:	20000578 	.word	0x20000578
 8001adc:	20000588 	.word	0x20000588
 8001ae0:	20000580 	.word	0x20000580
 8001ae4:	2000051c 	.word	0x2000051c
 8001ae8:	080102cc 	.word	0x080102cc
 8001aec:	080102e0 	.word	0x080102e0
 8001af0:	080102e8 	.word	0x080102e8
 8001af4:	2000051b 	.word	0x2000051b
 8001af8:	40010000 	.word	0x40010000
 8001afc:	08010300 	.word	0x08010300
 8001b00:	08010308 	.word	0x08010308
 8001b04:	08010320 	.word	0x08010320
 8001b08:	0801032c 	.word	0x0801032c
 8001b0c:	200004a8 	.word	0x200004a8
 8001b10:	20000519 	.word	0x20000519
 8001b14:	08010348 	.word	0x08010348
 8001b18:	08010354 	.word	0x08010354
 8001b1c:	200004e0 	.word	0x200004e0
 8001b20:	2000051a 	.word	0x2000051a
 8001b24:	08010370 	.word	0x08010370
 8001b28:	08010378 	.word	0x08010378
 8001b2c:	08010394 	.word	0x08010394
 8001b30:	0801039c 	.word	0x0801039c
	} else if ((ln = strstr(buf, "SETPDR:")) != NULL) {
 8001b34:	49ab      	ldr	r1, [pc, #684]	@ (8001de4 <process+0x60c>)
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f00c f829 	bl	800db8e <strstr>
 8001b3c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01f      	beq.n	8001b88 <process+0x3b0>
		double tmp = atof(&ln[7]);
 8001b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00b f842 	bl	800cbd8 <atof>
 8001b54:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		sprintf(msg, "Motor 2 coffD set to %d\r\n", (int) tmp);
 8001b58:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001b5c:	f7ff f804 	bl	8000b68 <__aeabi_d2iz>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	49a0      	ldr	r1, [pc, #640]	@ (8001de8 <process+0x610>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00b ff93 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fa7e 	bl	8001078 <Transmit_SERIAL_USB>
		right_pid.coffd = tmp;
 8001b7c:	499b      	ldr	r1, [pc, #620]	@ (8001dec <process+0x614>)
 8001b7e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001b82:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001b86:	e249      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPPL:")) != NULL) {
 8001b88:	4999      	ldr	r1, [pc, #612]	@ (8001df0 <process+0x618>)
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f00b ffff 	bl	800db8e <strstr>
 8001b90:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <process+0x404>
		double tmp = atof(&ln[7]);
 8001b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ba0:	3307      	adds	r3, #7
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00b f818 	bl	800cbd8 <atof>
 8001ba8:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
		sprintf(msg, "Motor 2 coffP set to %d\r\n", (int) tmp);
 8001bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001bb0:	f7fe ffda 	bl	8000b68 <__aeabi_d2iz>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	498e      	ldr	r1, [pc, #568]	@ (8001df4 <process+0x61c>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00b ff69 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fa54 	bl	8001078 <Transmit_SERIAL_USB>
		left_pid.coffp = tmp;
 8001bd0:	4989      	ldr	r1, [pc, #548]	@ (8001df8 <process+0x620>)
 8001bd2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001bd6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001bda:	e21f      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPIL:")) != NULL) {
 8001bdc:	4987      	ldr	r1, [pc, #540]	@ (8001dfc <process+0x624>)
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f00b ffd5 	bl	800db8e <strstr>
 8001be4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01f      	beq.n	8001c30 <process+0x458>
		double tmp = atof(&ln[7]);
 8001bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00a ffee 	bl	800cbd8 <atof>
 8001bfc:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0
		sprintf(msg, "Motor 2 coffI set to %d\r\n", (int) tmp);
 8001c00:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001c04:	f7fe ffb0 	bl	8000b68 <__aeabi_d2iz>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	497c      	ldr	r1, [pc, #496]	@ (8001e00 <process+0x628>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00b ff3f 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fa2a 	bl	8001078 <Transmit_SERIAL_USB>
		left_pid.coffi = tmp;
 8001c24:	4974      	ldr	r1, [pc, #464]	@ (8001df8 <process+0x620>)
 8001c26:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001c2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001c2e:	e1f5      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETPDL:")) != NULL) {
 8001c30:	4974      	ldr	r1, [pc, #464]	@ (8001e04 <process+0x62c>)
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f00b ffab 	bl	800db8e <strstr>
 8001c38:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01f      	beq.n	8001c84 <process+0x4ac>
		double tmp = atof(&ln[7]);
 8001c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c48:	3307      	adds	r3, #7
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00a ffc4 	bl	800cbd8 <atof>
 8001c50:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
		sprintf(msg, "Motor 2 coffD set to %d\r\n", (int) tmp);
 8001c54:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001c58:	f7fe ff86 	bl	8000b68 <__aeabi_d2iz>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4961      	ldr	r1, [pc, #388]	@ (8001de8 <process+0x610>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00b ff15 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa00 	bl	8001078 <Transmit_SERIAL_USB>
		left_pid.coffd = tmp;
 8001c78:	495f      	ldr	r1, [pc, #380]	@ (8001df8 <process+0x620>)
 8001c7a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001c7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001c82:	e1cb      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETST:")) != NULL) {
 8001c84:	4960      	ldr	r1, [pc, #384]	@ (8001e08 <process+0x630>)
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f00b ff81 	bl	800db8e <strstr>
 8001c8c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d021      	beq.n	8001cdc <process+0x504>
		double tmp = atof(&ln[7]);
 8001c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00a ff9a 	bl	800cbd8 <atof>
 8001ca4:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
		sprintf(msg, "Sampling Time SET to %d\r\n", (int) tmp);
 8001ca8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001cac:	f7fe ff5c 	bl	8000b68 <__aeabi_d2iz>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4955      	ldr	r1, [pc, #340]	@ (8001e0c <process+0x634>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b feeb 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f9d6 	bl	8001078 <Transmit_SERIAL_USB>
		sampling_time = tmp;
 8001ccc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001cd0:	f7fe ff4a 	bl	8000b68 <__aeabi_d2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001e10 <process+0x638>)
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	e19f      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "SETWD:")) != NULL) {
 8001cdc:	494d      	ldr	r1, [pc, #308]	@ (8001e14 <process+0x63c>)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f00b ff55 	bl	800db8e <strstr>
 8001ce4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01f      	beq.n	8001d30 <process+0x558>
		double tmp = atof(&ln[7]);
 8001cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00a ff6e 	bl	800cbd8 <atof>
 8001cfc:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
		sprintf(msg, "Motor 2 coffD set to %d\r\n", (int) tmp);
 8001d00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001d04:	f7fe ff30 	bl	8000b68 <__aeabi_d2iz>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4936      	ldr	r1, [pc, #216]	@ (8001de8 <process+0x610>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00b febf 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f9aa 	bl	8001078 <Transmit_SERIAL_USB>
		left_pid.coffd = tmp;
 8001d24:	4934      	ldr	r1, [pc, #208]	@ (8001df8 <process+0x620>)
 8001d26:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8001d2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001d2e:	e175      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "STOP")) != NULL) {
 8001d30:	4939      	ldr	r1, [pc, #228]	@ (8001e18 <process+0x640>)
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f00b ff2b 	bl	800db8e <strstr>
 8001d38:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d019      	beq.n	8001d78 <process+0x5a0>
		Transmit_SERIAL_USB(msg, chanel);
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f993 	bl	8001078 <Transmit_SERIAL_USB>
		TIM1->CCR1 = 0;
 8001d52:	4b32      	ldr	r3, [pc, #200]	@ (8001e1c <process+0x644>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = 0;
 8001d58:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <process+0x644>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38
		left_pid.svalue = 0;
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <process+0x620>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	805a      	strh	r2, [r3, #2]
		right_pid.svalue = 0;
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <process+0x614>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	805a      	strh	r2, [r3, #2]
		isDirect = 1;
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <process+0x648>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
		mainmode = 0;
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <process+0x64c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	e151      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "RWL")) != NULL) {
 8001d78:	492b      	ldr	r1, [pc, #172]	@ (8001e28 <process+0x650>)
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f00b ff07 	bl	800db8e <strstr>
 8001d80:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d010      	beq.n	8001dae <process+0x5d6>
		sprintf(msg, "Reversed Wheel LEFT");
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4926      	ldr	r1, [pc, #152]	@ (8001e2c <process+0x654>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00b fe7e 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f969 	bl	8001078 <Transmit_SERIAL_USB>
		toggleDirection(LEFT);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff fb32 	bl	8001410 <toggleDirection>
}
 8001dac:	e136      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "RWR")) != NULL) {
 8001dae:	4920      	ldr	r1, [pc, #128]	@ (8001e30 <process+0x658>)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f00b feec 	bl	800db8e <strstr>
 8001db6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <process+0x660>
		sprintf(msg, "Reversed Wheel RIGHT");
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	491b      	ldr	r1, [pc, #108]	@ (8001e34 <process+0x65c>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00b fe63 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f94e 	bl	8001078 <Transmit_SERIAL_USB>
		toggleDirection(RIGHT);
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f7ff fb17 	bl	8001410 <toggleDirection>
}
 8001de2:	e11b      	b.n	800201c <process+0x844>
 8001de4:	080103b8 	.word	0x080103b8
 8001de8:	080103c0 	.word	0x080103c0
 8001dec:	200004e0 	.word	0x200004e0
 8001df0:	080103dc 	.word	0x080103dc
 8001df4:	08010378 	.word	0x08010378
 8001df8:	200004a8 	.word	0x200004a8
 8001dfc:	080103e4 	.word	0x080103e4
 8001e00:	0801039c 	.word	0x0801039c
 8001e04:	080103ec 	.word	0x080103ec
 8001e08:	080103f4 	.word	0x080103f4
 8001e0c:	080103fc 	.word	0x080103fc
 8001e10:	20000000 	.word	0x20000000
 8001e14:	08010418 	.word	0x08010418
 8001e18:	08010420 	.word	0x08010420
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	2000051b 	.word	0x2000051b
 8001e24:	2000051c 	.word	0x2000051c
 8001e28:	08010428 	.word	0x08010428
 8001e2c:	0801042c 	.word	0x0801042c
 8001e30:	08010440 	.word	0x08010440
 8001e34:	08010444 	.word	0x08010444
	} else if ((ln = strstr(buf, "GOSTR:")) != NULL) {
 8001e38:	497a      	ldr	r1, [pc, #488]	@ (8002024 <process+0x84c>)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f00b fea7 	bl	800db8e <strstr>
 8001e40:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <process+0x6bc>
		double tmp = atof(&ln[6]);
 8001e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e50:	3306      	adds	r3, #6
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00a fec0 	bl	800cbd8 <atof>
 8001e58:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
		sprintf(msg, "Rover go to distance %d with speed %d\r\n", (int) tmp,
 8001e5c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001e60:	f7fe fe82 	bl	8000b68 <__aeabi_d2iz>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f107 000c 	add.w	r0, r7, #12
 8001e6a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001e6e:	496e      	ldr	r1, [pc, #440]	@ (8002028 <process+0x850>)
 8001e70:	f00b fe10 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f8fb 	bl	8001078 <Transmit_SERIAL_USB>
		user_dist = tmp;
 8001e82:	496a      	ldr	r1, [pc, #424]	@ (800202c <process+0x854>)
 8001e84:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001e88:	e9c1 2300 	strd	r2, r3, [r1]
		mainmode = 2;
 8001e8c:	4b68      	ldr	r3, [pc, #416]	@ (8002030 <process+0x858>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	e0c3      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "CS")) != NULL) {
 8001e94:	4967      	ldr	r1, [pc, #412]	@ (8002034 <process+0x85c>)
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f00b fe79 	bl	800db8e <strstr>
 8001e9c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <process+0x6e0>
		printVariables(msg, chanel);
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fb0f 	bl	80024d4 <printVariables>
}
 8001eb6:	e0b1      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "GOSTRP:")) != NULL) {
 8001eb8:	495f      	ldr	r1, [pc, #380]	@ (8002038 <process+0x860>)
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f00b fe67 	bl	800db8e <strstr>
 8001ec0:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d027      	beq.n	8001f1c <process+0x744>
		double tmp = atof(&ln[7]);
 8001ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed0:	3307      	adds	r3, #7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00a fe80 	bl	800cbd8 <atof>
 8001ed8:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
		sprintf(msg, "Rover go to distance %d with speed %d\r\n", (int) tmp,
 8001edc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ee0:	f7fe fe42 	bl	8000b68 <__aeabi_d2iz>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f107 000c 	add.w	r0, r7, #12
 8001eea:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001eee:	494e      	ldr	r1, [pc, #312]	@ (8002028 <process+0x850>)
 8001ef0:	f00b fdd0 	bl	800da94 <siprintf>
		Transmit_SERIAL_USB(msg, chanel);
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f8bb 	bl	8001078 <Transmit_SERIAL_USB>
		isDirect = 0;
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <process+0x864>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
		set_rpm1 = 1;
 8001f08:	4b4d      	ldr	r3, [pc, #308]	@ (8002040 <process+0x868>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
		set_rpm2 = 1;
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002044 <process+0x86c>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
		mainmode = 2;
 8001f14:	4b46      	ldr	r3, [pc, #280]	@ (8002030 <process+0x858>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	e07f      	b.n	800201c <process+0x844>
	} else if ((ln = strstr(buf, "RAD:")) != NULL) {
 8001f1c:	494a      	ldr	r1, [pc, #296]	@ (8002048 <process+0x870>)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f00b fe35 	bl	800db8e <strstr>
 8001f24:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d075      	beq.n	800201c <process+0x844>
		double radius = atof(&ln[4]);
 8001f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f34:	3304      	adds	r3, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00a fe4e 	bl	800cbd8 <atof>
 8001f3c:	ed87 0b36 	vstr	d0, [r7, #216]	@ 0xd8
		if ((ln = strstr(buf, ",THETA:")) != NULL) {
 8001f40:	4942      	ldr	r1, [pc, #264]	@ (800204c <process+0x874>)
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f00b fe23 	bl	800db8e <strstr>
 8001f48:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 8001f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d063      	beq.n	800201c <process+0x844>
			double theta = atof(&ln[7]);
 8001f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f58:	3307      	adds	r3, #7
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f00a fe3c 	bl	800cbd8 <atof>
 8001f60:	ed87 0b34 	vstr	d0, [r7, #208]	@ 0xd0
			sprintf(msg, "Rover RADIUS IS: %d, THETA IS: %d\r\n", (int) radius,
 8001f64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001f68:	f7fe fdfe 	bl	8000b68 <__aeabi_d2iz>
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	f107 000c 	add.w	r0, r7, #12
 8001f72:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8001f76:	e9cd 2300 	strd	r2, r3, [sp]
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	4934      	ldr	r1, [pc, #208]	@ (8002050 <process+0x878>)
 8001f7e:	f00b fd89 	bl	800da94 <siprintf>
			Transmit_SERIAL_USB(msg, chanel);
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f874 	bl	8001078 <Transmit_SERIAL_USB>
			if (theta >= 0)
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001f9c:	f7fe fdba 	bl	8000b14 <__aeabi_dcmpge>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <process+0x7ea>
				user_dist = TURN_RIGHT_LEFT(radius, theta, RIGHT);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8001fac:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8001fb0:	f7ff fad6 	bl	8001560 <TURN_RIGHT_LEFT>
 8001fb4:	eeb0 7a40 	vmov.f32	s14, s0
 8001fb8:	eef0 7a60 	vmov.f32	s15, s1
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <process+0x854>)
 8001fbe:	ed83 7b00 	vstr	d7, [r3]
			if (theta < 0)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001fce:	f7fe fd8d 	bl	8000aec <__aeabi_dcmplt>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <process+0x81c>
				user_dist = TURN_RIGHT_LEFT(radius, theta, LEFT);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8001fde:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8001fe2:	f7ff fabd 	bl	8001560 <TURN_RIGHT_LEFT>
 8001fe6:	eeb0 7a40 	vmov.f32	s14, s0
 8001fea:	eef0 7a60 	vmov.f32	s15, s1
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <process+0x854>)
 8001ff0:	ed83 7b00 	vstr	d7, [r3]
			turning = 1;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <process+0x87c>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
			right_wheel.distance = 0;
 8001ffa:	4917      	ldr	r1, [pc, #92]	@ (8002058 <process+0x880>)
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9c1 2308 	strd	r2, r3, [r1, #32]
			left_wheel.distance = 0;
 8002008:	4914      	ldr	r1, [pc, #80]	@ (800205c <process+0x884>)
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9c1 2308 	strd	r2, r3, [r1, #32]
			mainmode = 3;
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <process+0x858>)
 8002018:	2203      	movs	r2, #3
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	37e8      	adds	r7, #232	@ 0xe8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	0801045c 	.word	0x0801045c
 8002028:	08010464 	.word	0x08010464
 800202c:	20000580 	.word	0x20000580
 8002030:	2000051c 	.word	0x2000051c
 8002034:	0801048c 	.word	0x0801048c
 8002038:	08010490 	.word	0x08010490
 800203c:	2000051b 	.word	0x2000051b
 8002040:	20000519 	.word	0x20000519
 8002044:	2000051a 	.word	0x2000051a
 8002048:	08010498 	.word	0x08010498
 800204c:	080104a0 	.word	0x080104a0
 8002050:	080104a8 	.word	0x080104a8
 8002054:	20000590 	.word	0x20000590
 8002058:	20000430 	.word	0x20000430
 800205c:	20000468 	.word	0x20000468

08002060 <comProcess>:
char* comProcess(int chanel) {
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	if (ischar(chanel)) {
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff f965 	bl	8001338 <ischar>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80af 	beq.w	80021d4 <comProcess+0x174>
		char t = readchar(chanel);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff f980 	bl	800137c <readchar>
 800207c:	4603      	mov	r3, r0
 800207e:	73fb      	strb	r3, [r7, #15]
		switch (com[chanel].state) {
 8002080:	4a57      	ldr	r2, [pc, #348]	@ (80021e0 <comProcess+0x180>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2168      	movs	r1, #104	@ 0x68
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3366      	adds	r3, #102	@ 0x66
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	f000 809c 	beq.w	80021ce <comProcess+0x16e>
 8002096:	2b02      	cmp	r3, #2
 8002098:	f300 809c 	bgt.w	80021d4 <comProcess+0x174>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <comProcess+0x46>
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d034      	beq.n	800210e <comProcess+0xae>
 80020a4:	e096      	b.n	80021d4 <comProcess+0x174>
		case 0:
			if ('$' == t) {
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b24      	cmp	r3, #36	@ 0x24
 80020aa:	f040 8092 	bne.w	80021d2 <comProcess+0x172>
				com[chanel].state = 1;
 80020ae:	4a4c      	ldr	r2, [pc, #304]	@ (80021e0 <comProcess+0x180>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2168      	movs	r1, #104	@ 0x68
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3366      	adds	r3, #102	@ 0x66
 80020bc:	2201      	movs	r2, #1
 80020be:	801a      	strh	r2, [r3, #0]
				com[chanel].cp = 0;
 80020c0:	4a47      	ldr	r2, [pc, #284]	@ (80021e0 <comProcess+0x180>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2168      	movs	r1, #104	@ 0x68
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3364      	adds	r3, #100	@ 0x64
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
				com[chanel].buf[com[chanel].cp++] = t;
 80020d2:	4a43      	ldr	r2, [pc, #268]	@ (80021e0 <comProcess+0x180>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2168      	movs	r1, #104	@ 0x68
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	3364      	adds	r3, #100	@ 0x64
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	b294      	uxth	r4, r2
 80020e6:	493e      	ldr	r1, [pc, #248]	@ (80021e0 <comProcess+0x180>)
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	2068      	movs	r0, #104	@ 0x68
 80020ec:	fb00 f202 	mul.w	r2, r0, r2
 80020f0:	440a      	add	r2, r1
 80020f2:	3264      	adds	r2, #100	@ 0x64
 80020f4:	4621      	mov	r1, r4
 80020f6:	8011      	strh	r1, [r2, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	4a39      	ldr	r2, [pc, #228]	@ (80021e0 <comProcess+0x180>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2168      	movs	r1, #104	@ 0x68
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	4403      	add	r3, r0
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800210c:	e061      	b.n	80021d2 <comProcess+0x172>
		case 1:
			if (t >= ' ') {
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b1f      	cmp	r3, #31
 8002112:	d937      	bls.n	8002184 <comProcess+0x124>
				com[chanel].buf[com[chanel].cp++] = t;
 8002114:	4a32      	ldr	r2, [pc, #200]	@ (80021e0 <comProcess+0x180>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2168      	movs	r1, #104	@ 0x68
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3364      	adds	r3, #100	@ 0x64
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	b294      	uxth	r4, r2
 8002128:	492d      	ldr	r1, [pc, #180]	@ (80021e0 <comProcess+0x180>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	2068      	movs	r0, #104	@ 0x68
 800212e:	fb00 f202 	mul.w	r2, r0, r2
 8002132:	440a      	add	r2, r1
 8002134:	3264      	adds	r2, #100	@ 0x64
 8002136:	4621      	mov	r1, r4
 8002138:	8011      	strh	r1, [r2, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <comProcess+0x180>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2168      	movs	r1, #104	@ 0x68
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	4403      	add	r3, r0
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	701a      	strb	r2, [r3, #0]
				com[chanel].cp %= 100;
 800214e:	4a24      	ldr	r2, [pc, #144]	@ (80021e0 <comProcess+0x180>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2168      	movs	r1, #104	@ 0x68
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3364      	adds	r3, #100	@ 0x64
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <comProcess+0x184>)
 8002160:	fba2 1203 	umull	r1, r2, r2, r3
 8002164:	0952      	lsrs	r2, r2, #5
 8002166:	2164      	movs	r1, #100	@ 0x64
 8002168:	fb01 f202 	mul.w	r2, r1, r2
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	b298      	uxth	r0, r3
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <comProcess+0x180>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2168      	movs	r1, #104	@ 0x68
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3364      	adds	r3, #100	@ 0x64
 800217e:	4602      	mov	r2, r0
 8002180:	801a      	strh	r2, [r3, #0]
				com[chanel].buf[com[chanel].cp] = 0;
				com[chanel].state = 2;
				return com[chanel].buf;
			}
		case 2:
			break;
 8002182:	e024      	b.n	80021ce <comProcess+0x16e>
			} else if (t == 0x0A) {
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d121      	bne.n	80021ce <comProcess+0x16e>
				com[chanel].buf[com[chanel].cp] = 0;
 800218a:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <comProcess+0x180>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2168      	movs	r1, #104	@ 0x68
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3364      	adds	r3, #100	@ 0x64
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	4a10      	ldr	r2, [pc, #64]	@ (80021e0 <comProcess+0x180>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2168      	movs	r1, #104	@ 0x68
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	4403      	add	r3, r0
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
				com[chanel].state = 2;
 80021ae:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <comProcess+0x180>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2168      	movs	r1, #104	@ 0x68
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3366      	adds	r3, #102	@ 0x66
 80021bc:	2202      	movs	r2, #2
 80021be:	801a      	strh	r2, [r3, #0]
				return com[chanel].buf;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2268      	movs	r2, #104	@ 0x68
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <comProcess+0x180>)
 80021ca:	4413      	add	r3, r2
 80021cc:	e003      	b.n	80021d6 <comProcess+0x176>
			break;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <comProcess+0x174>
			break;
 80021d2:	bf00      	nop
		}
	}
	return NULL;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000360 	.word	0x20000360
 80021e4:	51eb851f 	.word	0x51eb851f

080021e8 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_buffer_copy[ADC_BUFFER_SIZE] = {};
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a05      	ldr	r2, [pc, #20]	@ (800220c <HAL_ADC_ConvCpltCallback+0x24>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d104      	bne.n	8002204 <HAL_ADC_ConvCpltCallback+0x1c>
		memcpy(adc_buffer_copy, adc_buffer, ADC_BUFFER_SIZE);
 80021fa:	2205      	movs	r2, #5
 80021fc:	4904      	ldr	r1, [pc, #16]	@ (8002210 <HAL_ADC_ConvCpltCallback+0x28>)
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002200:	f00b fd4f 	bl	800dca2 <memcpy>
	}
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40012000 	.word	0x40012000
 8002210:	20000594 	.word	0x20000594
 8002214:	20000b94 	.word	0x20000b94

08002218 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a38      	ldr	r2, [pc, #224]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d169      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0xe6>
		// Sampling for the ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc_buffer, ADC_BUFFER_SIZE);
 800222a:	2205      	movs	r2, #5
 800222c:	4937      	ldr	r1, [pc, #220]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800222e:	4838      	ldr	r0, [pc, #224]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002230:	f001 fa98 	bl	8003764 <HAL_ADC_Start_DMA>
//	    MPU_calcAttitude(&hi2c1, &roll, &pitch); // mpu6050
		left_wheel.stop_counter++;
 8002234:	4b37      	ldr	r3, [pc, #220]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002236:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	b29b      	uxth	r3, r3
 8002240:	b21a      	sxth	r2, r3
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002244:	869a      	strh	r2, [r3, #52]	@ 0x34
		right_wheel.stop_counter++;
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002248:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800224a:	b21b      	sxth	r3, r3
 800224c:	b29b      	uxth	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002256:	869a      	strh	r2, [r3, #52]	@ 0x34
		pid_counter++;
 8002258:	4b30      	ldr	r3, [pc, #192]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	4a2f      	ldr	r2, [pc, #188]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002260:	6013      	str	r3, [r2, #0]
		if (left_wheel.stop_counter == 5000) {
 8002262:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002264:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002266:	b21b      	sxth	r3, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d119      	bne.n	80022a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			left_wheel.stop_counter = 0;
 8002270:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002272:	2200      	movs	r2, #0
 8002274:	869a      	strh	r2, [r3, #52]	@ 0x34
			left_wheel.rpm = 0;
 8002276:	4927      	ldr	r1, [pc, #156]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9c1 2304 	strd	r2, r3, [r1, #16]
			left_pid.cvalue = 0;
 8002284:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002286:	2200      	movs	r2, #0
 8002288:	801a      	strh	r2, [r3, #0]
			left_wheel.diff = 0;
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
			left_wheel.distance = 0;
 8002290:	4920      	ldr	r1, [pc, #128]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			left_wheel.state = 0;
 800229e:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	731a      	strb	r2, [r3, #12]
		}
		if (right_wheel.stop_counter == 5000) {
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022a6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d119      	bne.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0xce>
			right_wheel.stop_counter = 0;
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	869a      	strh	r2, [r3, #52]	@ 0x34
			right_wheel.rpm = 0;
 80022b8:	4917      	ldr	r1, [pc, #92]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			right_pid.cvalue = 0;
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
			right_wheel.diff = 0;
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
			right_wheel.distance = 0;
 80022d2:	4911      	ldr	r1, [pc, #68]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
			right_wheel.state = 0;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	731a      	strb	r2, [r3, #12]
		}
		if (pid_counter == sampling_time) {
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d105      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0xe6>
			pid_counter = 0;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
			check_pid = 1;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	20000594 	.word	0x20000594
 8002310:	200005a8 	.word	0x200005a8
 8002314:	20000468 	.word	0x20000468
 8002318:	20000430 	.word	0x20000430
 800231c:	200004a4 	.word	0x200004a4
 8002320:	200004a8 	.word	0x200004a8
 8002324:	200004e0 	.word	0x200004e0
 8002328:	20000000 	.word	0x20000000
 800232c:	20000518 	.word	0x20000518

08002330 <calcRPM>:

	right_pid.prev_cvalue = right_pid.cvalue;
	right_wheel.prev_diff = right_wheel.diff;
}

short calcRPM(int difference) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	if (difference == 0)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <calcRPM+0x12>
		return 0;
 800233e:	2300      	movs	r3, #0
 8002340:	e075      	b.n	800242e <calcRPM+0xfe>
	double last_rpm_2 = (double) difference;
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe f8f6 	bl	8000534 <__aeabi_i2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	last_rpm_2 = ((last_rpm_2 / 84e6) * 20) / 60;
 8002350:	a340      	add	r3, pc, #256	@ (adr r3, 8002454 <calcRPM+0x124>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800235a:	f7fe fa7f 	bl	800085c <__aeabi_ddiv>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <calcRPM+0x108>)
 800236c:	f7fe f94c 	bl	8000608 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <calcRPM+0x10c>)
 800237e:	f7fe fa6d 	bl	800085c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c7 2302 	strd	r2, r3, [r7, #8]
	last_rpm_2 = 1 / last_rpm_2;
 800238a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238e:	f04f 0000 	mov.w	r0, #0
 8002392:	492b      	ldr	r1, [pc, #172]	@ (8002440 <calcRPM+0x110>)
 8002394:	f7fe fa62 	bl	800085c <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if ((last_rpm_2 = lrint(last_rpm_2 * 100)) < 0) {
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <calcRPM+0x114>)
 80023a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023aa:	f7fe f92d 	bl	8000608 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ec43 2b17 	vmov	d7, r2, r3
 80023b6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ba:	eef0 0a67 	vmov.f32	s1, s15
 80023be:	f00d fe37 	bl	8010030 <lrint>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8b5 	bl	8000534 <__aeabi_i2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023de:	f7fe fb85 	bl	8000aec <__aeabi_dcmplt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01c      	beq.n	8002422 <calcRPM+0xf2>
		arrDiff[arr_i++] = difference;
 80023e8:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <calcRPM+0x118>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	b2d1      	uxtb	r1, r2
 80023f0:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <calcRPM+0x118>)
 80023f2:	7011      	strb	r1, [r2, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <calcRPM+0x11c>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		arr_i %= 19;
 80023fe:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <calcRPM+0x118>)
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <calcRPM+0x120>)
 8002404:	fba3 1302 	umull	r1, r3, r3, r2
 8002408:	1ad1      	subs	r1, r2, r3
 800240a:	0849      	lsrs	r1, r1, #1
 800240c:	440b      	add	r3, r1
 800240e:	0919      	lsrs	r1, r3, #4
 8002410:	460b      	mov	r3, r1
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	440b      	add	r3, r1
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <calcRPM+0x118>)
 8002420:	701a      	strb	r2, [r3, #0]
	}
	return last_rpm_2;
 8002422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002426:	f7fe fb9f 	bl	8000b68 <__aeabi_d2iz>
 800242a:	4603      	mov	r3, r0
 800242c:	b21b      	sxth	r3, r3
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40340000 	.word	0x40340000
 800243c:	404e0000 	.word	0x404e0000
 8002440:	3ff00000 	.word	0x3ff00000
 8002444:	40590000 	.word	0x40590000
 8002448:	20000570 	.word	0x20000570
 800244c:	20000520 	.word	0x20000520
 8002450:	af286bcb 	.word	0xaf286bcb
 8002454:	00000000 	.word	0x00000000
 8002458:	419406f4 	.word	0x419406f4

0800245c <calc_theta>:
				(int) left_pid->coffp);
	Transmit_SERIAL_USB(msg, chanel);
//	HAL_Delay(100);
}

double calc_theta(int x, int y) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
	return (atan(x / y));
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	fb92 f3f3 	sdiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f860 	bl	8000534 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ec43 2b10 	vmov	d0, r2, r3
 800247c:	f00d fc38 	bl	800fcf0 <atan>
 8002480:	eeb0 7a40 	vmov.f32	s14, s0
 8002484:	eef0 7a60 	vmov.f32	s15, s1
}
 8002488:	eeb0 0a47 	vmov.f32	s0, s14
 800248c:	eef0 0a67 	vmov.f32	s1, s15
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <getArcLength>:

double getArcLength(int x, int y) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	return (calc_theta(x, y) * (base / 2));
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffd9 	bl	800245c <calc_theta>
 80024aa:	ec51 0b10 	vmov	r0, r1, d0
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <getArcLength+0x38>)
 80024b4:	f7fe f8a8 	bl	8000608 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80024c0:	eeb0 0a47 	vmov.f32	s0, s14
 80024c4:	eef0 0a67 	vmov.f32	s1, s15
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	402e0000 	.word	0x402e0000

080024d4 <printVariables>:

void printVariables(char *msg, uint8_t chanel) {
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
	sprintf(msg, "Covered Distance: (left)%d, (right)%d, User Distance: %d\r\n",
			(int) (left_wheel.distance), (int) right_wheel.distance,
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <printVariables+0x5c>)
 80024e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	sprintf(msg, "Covered Distance: (left)%d, (right)%d, User Distance: %d\r\n",
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	f7fe fb3d 	bl	8000b68 <__aeabi_d2iz>
 80024ee:	4604      	mov	r4, r0
			(int) (left_wheel.distance), (int) right_wheel.distance,
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <printVariables+0x60>)
 80024f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	sprintf(msg, "Covered Distance: (left)%d, (right)%d, User Distance: %d\r\n",
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fb35 	bl	8000b68 <__aeabi_d2iz>
 80024fe:	4605      	mov	r5, r0
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <printVariables+0x64>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f7fe fb2d 	bl	8000b68 <__aeabi_d2iz>
 800250e:	4603      	mov	r3, r0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	462b      	mov	r3, r5
 8002514:	4622      	mov	r2, r4
 8002516:	4909      	ldr	r1, [pc, #36]	@ (800253c <printVariables+0x68>)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f00b fabb 	bl	800da94 <siprintf>
			(int) user_dist);
	Transmit_SERIAL_USB(msg, chanel);
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fda8 	bl	8001078 <Transmit_SERIAL_USB>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bdb0      	pop	{r4, r5, r7, pc}
 8002530:	20000468 	.word	0x20000468
 8002534:	20000430 	.word	0x20000430
 8002538:	20000580 	.word	0x20000580
 800253c:	08010550 	.word	0x08010550

08002540 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b09d      	sub	sp, #116	@ 0x74
 8002544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */

	char msg[100] = { 0 };
 8002546:	2300      	movs	r3, #0
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2260      	movs	r2, #96	@ 0x60
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f00b fb02 	bl	800db5a <memset>
	char *buf = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	66fb      	str	r3, [r7, #108]	@ 0x6c
	short temp_cvalue = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002560:	f001 f826 	bl	80035b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002564:	f000 fa22 	bl	80029ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002568:	f000 fc86 	bl	8002e78 <MX_GPIO_Init>
	MX_DMA_Init();
 800256c:	f000 fc64 	bl	8002e38 <MX_DMA_Init>
	MX_I2C1_Init();
 8002570:	f000 fb12 	bl	8002b98 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002574:	f000 fb3e 	bl	8002bf4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002578:	f000 fbe8 	bl	8002d4c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800257c:	f000 fc32 	bl	8002de4 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 8002580:	f009 fe1a 	bl	800c1b8 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8002584:	f000 fa7e 	bl	8002a84 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 8002588:	48b1      	ldr	r0, [pc, #708]	@ (8002850 <main+0x310>)
 800258a:	f004 fc09 	bl	8006da0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 800258e:	48b1      	ldr	r0, [pc, #708]	@ (8002854 <main+0x314>)
 8002590:	f004 fbac 	bl	8006cec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002594:	2100      	movs	r1, #0
 8002596:	48ae      	ldr	r0, [pc, #696]	@ (8002850 <main+0x310>)
 8002598:	f004 fcbe 	bl	8006f18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800259c:	2104      	movs	r1, #4
 800259e:	48ac      	ldr	r0, [pc, #688]	@ (8002850 <main+0x310>)
 80025a0:	f004 fcba 	bl	8006f18 <HAL_TIM_PWM_Start>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80025a4:	4bac      	ldr	r3, [pc, #688]	@ (8002858 <main+0x318>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4bab      	ldr	r3, [pc, #684]	@ (8002858 <main+0x318>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 80025b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002858 <main+0x318>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4ba7      	ldr	r3, [pc, #668]	@ (8002858 <main+0x318>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025c2:	60da      	str	r2, [r3, #12]
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	2026      	movs	r0, #38	@ 0x26
 80025ca:	f001 fd4a 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ce:	2026      	movs	r0, #38	@ 0x26
 80025d0:	f001 fd63 	bl	800409a <HAL_NVIC_EnableIRQ>
	INIT();
 80025d4:	f7fe fd82 	bl	80010dc <INIT>
	// Check if IMU configured properly and block if it didn't
//	if (MPU_begin(&hi2c1, AD0_LOW, AFSR_4G, GFSR_500DPS, 0.98, 0.004) == TRUE) {
//		sprintf(msg, "Working MPU");
//		Transmit_SERIAL_USB(msg, SERIAL);
//	}
	mDelay = HAL_GetTick();
 80025d8:	f001 f850 	bl	800367c <HAL_GetTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b9e      	ldr	r3, [pc, #632]	@ (800285c <main+0x31c>)
 80025e2:	601a      	str	r2, [r3, #0]
//	HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
//	HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
//	HAL_I2C_Mem_Write(&hi2c1, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
//		ADXL345_Init();
//		MAGNETO_Init();
	uint16_t x = 0, y = 0, z = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if ((buf = comProcess(SERIAL)) != NULL) {
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7ff fd32 	bl	8002060 <comProcess>
 80025fc:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80025fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <main+0xd4>
			process(buf, SERIAL);
 8002604:	2101      	movs	r1, #1
 8002606:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002608:	f7ff f8e6 	bl	80017d8 <process>
			com[SERIAL].state = 0;
 800260c:	4b94      	ldr	r3, [pc, #592]	@ (8002860 <main+0x320>)
 800260e:	2200      	movs	r2, #0
 8002610:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
		}
		if ((buf = comProcess(USB)) != NULL) {
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff fd23 	bl	8002060 <comProcess>
 800261a:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800261c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <main+0xf2>
			process(buf, USB);
 8002622:	2100      	movs	r1, #0
 8002624:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002626:	f7ff f8d7 	bl	80017d8 <process>
			com[USB].state = 0;
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <main+0x320>)
 800262c:	2200      	movs	r2, #0
 800262e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
		}
		switch (mainmode) {
 8002632:	4b8c      	ldr	r3, [pc, #560]	@ (8002864 <main+0x324>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b04      	cmp	r3, #4
 8002638:	f200 8192 	bhi.w	8002960 <main+0x420>
 800263c:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <main+0x104>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002961 	.word	0x08002961
 8002648:	08002659 	.word	0x08002659
 800264c:	080026fb 	.word	0x080026fb
 8002650:	080027db 	.word	0x080027db
 8002654:	080028bf 	.word	0x080028bf
//				sprintf(msg, "The Roll:%d, Pitch:%d", roll, pitch);
//				Transmit_SERIAL_USB(msg, SERIAL);

			break;
		case 1:
			if (check_pid) {
 8002658:	4b83      	ldr	r3, [pc, #524]	@ (8002868 <main+0x328>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8179 	beq.w	8002956 <main+0x416>
				check_pid = 0;
 8002664:	4b80      	ldr	r3, [pc, #512]	@ (8002868 <main+0x328>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
				if ((temp_cvalue = calcRPM(left_wheel.diff)) != -1)
 800266a:	4b80      	ldr	r3, [pc, #512]	@ (800286c <main+0x32c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fe5e 	bl	8002330 <calcRPM>
 8002674:	4603      	mov	r3, r0
 8002676:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800267a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002682:	d003      	beq.n	800268c <main+0x14c>
					left_pid.cvalue = temp_cvalue;
 8002684:	4a7a      	ldr	r2, [pc, #488]	@ (8002870 <main+0x330>)
 8002686:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800268a:	8013      	strh	r3, [r2, #0]
				if (left_pid.cvalue < 12000) {
 800268c:	4b78      	ldr	r3, [pc, #480]	@ (8002870 <main+0x330>)
 800268e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002692:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8002696:	4293      	cmp	r3, r2
 8002698:	dc0a      	bgt.n	80026b0 <main+0x170>
					calcPID(&left_pid);
 800269a:	4875      	ldr	r0, [pc, #468]	@ (8002870 <main+0x330>)
 800269c:	f7fe fd94 	bl	80011c8 <calcPID>
					setpwm(left_pid.output, 2);
 80026a0:	4b73      	ldr	r3, [pc, #460]	@ (8002870 <main+0x330>)
 80026a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fc52 	bl	8000f54 <setpwm>
				}
				if ((temp_cvalue = calcRPM(right_wheel.diff)) != -1)
 80026b0:	4b70      	ldr	r3, [pc, #448]	@ (8002874 <main+0x334>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe3b 	bl	8002330 <calcRPM>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80026c0:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d003      	beq.n	80026d2 <main+0x192>
					right_pid.cvalue = temp_cvalue;
 80026ca:	4a6b      	ldr	r2, [pc, #428]	@ (8002878 <main+0x338>)
 80026cc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80026d0:	8013      	strh	r3, [r2, #0]
				if (right_pid.cvalue < 12000) {
 80026d2:	4b69      	ldr	r3, [pc, #420]	@ (8002878 <main+0x338>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80026dc:	4293      	cmp	r3, r2
 80026de:	f300 813a 	bgt.w	8002956 <main+0x416>
					calcPID(&right_pid);
 80026e2:	4865      	ldr	r0, [pc, #404]	@ (8002878 <main+0x338>)
 80026e4:	f7fe fd70 	bl	80011c8 <calcPID>
					setpwm(right_pid.output, 1);
 80026e8:	4b63      	ldr	r3, [pc, #396]	@ (8002878 <main+0x338>)
 80026ea:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fc2e 	bl	8000f54 <setpwm>
//						TIM1->CCR2 = 0;
//						user_dist = 0;
//						mainmode=0;
//					}
			}
			break;
 80026f8:	e12d      	b.n	8002956 <main+0x416>
		case 2:
			// Initializing
			if (user_dist && isDirect) {
 80026fa:	4b60      	ldr	r3, [pc, #384]	@ (800287c <main+0x33c>)
 80026fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	f7fe f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d137      	bne.n	8002782 <main+0x242>
 8002712:	4b5b      	ldr	r3, [pc, #364]	@ (8002880 <main+0x340>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d033      	beq.n	8002782 <main+0x242>
				left_wheel.distance = 0;
 800271a:	4954      	ldr	r1, [pc, #336]	@ (800286c <main+0x32c>)
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9c1 2308 	strd	r2, r3, [r1, #32]
				right_wheel.distance = 0;
 8002728:	4952      	ldr	r1, [pc, #328]	@ (8002874 <main+0x334>)
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9c1 2308 	strd	r2, r3, [r1, #32]
				TIM1->CCR1 = 3500;
 8002736:	4b53      	ldr	r3, [pc, #332]	@ (8002884 <main+0x344>)
 8002738:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM1->CCR2 = 3500;
 800273e:	4b51      	ldr	r3, [pc, #324]	@ (8002884 <main+0x344>)
 8002740:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002744:	639a      	str	r2, [r3, #56]	@ 0x38
				sprintf(msg,
						"Rover go to current distance %d given distance %d\r\n",
						(int) get_distance(), (int) current_dist);
 8002746:	f7fe fe91 	bl	800146c <get_distance>
 800274a:	ec53 2b10 	vmov	r2, r3, d0
				sprintf(msg,
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa09 	bl	8000b68 <__aeabi_d2iz>
 8002756:	4604      	mov	r4, r0
 8002758:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <main+0x348>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa01 	bl	8000b68 <__aeabi_d2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	4638      	mov	r0, r7
 800276a:	4622      	mov	r2, r4
 800276c:	4947      	ldr	r1, [pc, #284]	@ (800288c <main+0x34c>)
 800276e:	f00b f991 	bl	800da94 <siprintf>
				Transmit_SERIAL_USB(msg, SERIAL);
 8002772:	463b      	mov	r3, r7
 8002774:	2101      	movs	r1, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc7e 	bl	8001078 <Transmit_SERIAL_USB>
				mainmode = 3;
 800277c:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <main+0x324>)
 800277e:	2203      	movs	r2, #3
 8002780:	601a      	str	r2, [r3, #0]
			}
			if (user_dist && isDirect == 0) {
 8002782:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <main+0x33c>)
 8002784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f7fe f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d000      	beq.n	800279c <main+0x25c>
				right_wheel.distance = 0;
				left_pid.svalue = 3500;
				right_pid.svalue = 3500;
				mainmode = 1;
			}
			break;
 800279a:	e0de      	b.n	800295a <main+0x41a>
			if (user_dist && isDirect == 0) {
 800279c:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <main+0x340>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 80da 	bne.w	800295a <main+0x41a>
				left_wheel.distance = 0;
 80027a6:	4931      	ldr	r1, [pc, #196]	@ (800286c <main+0x32c>)
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
				right_wheel.distance = 0;
 80027b4:	492f      	ldr	r1, [pc, #188]	@ (8002874 <main+0x334>)
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c1 2308 	strd	r2, r3, [r1, #32]
				left_pid.svalue = 3500;
 80027c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <main+0x330>)
 80027c4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80027c8:	805a      	strh	r2, [r3, #2]
				right_pid.svalue = 3500;
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <main+0x338>)
 80027cc:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80027d0:	805a      	strh	r2, [r3, #2]
				mainmode = 1;
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <main+0x324>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
			break;
 80027d8:	e0bf      	b.n	800295a <main+0x41a>
		case 3:
			if (right_wheel.distance >= user_dist && turning) {
 80027da:	4b26      	ldr	r3, [pc, #152]	@ (8002874 <main+0x334>)
 80027dc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80027e0:	4b26      	ldr	r3, [pc, #152]	@ (800287c <main+0x33c>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fe f995 	bl	8000b14 <__aeabi_dcmpge>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d017      	beq.n	8002820 <main+0x2e0>
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <main+0x350>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <main+0x2e0>
				TIM1->CCR1 = 0;
 80027f8:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <main+0x344>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM1->CCR2 = 0;
 80027fe:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <main+0x344>)
 8002800:	2200      	movs	r2, #0
 8002802:	639a      	str	r2, [r3, #56]	@ 0x38
				user_dist = 0;
 8002804:	491d      	ldr	r1, [pc, #116]	@ (800287c <main+0x33c>)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9c1 2300 	strd	r2, r3, [r1]
				mainmode = 0;
 8002812:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <main+0x324>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
				turning = 0;
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <main+0x350>)
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
				break;
 800281e:	e09f      	b.n	8002960 <main+0x420>
			}
			// handling covered distance
			if (((left_wheel.distance >= user_dist)
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <main+0x32c>)
 8002822:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <main+0x33c>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fe f972 	bl	8000b14 <__aeabi_dcmpge>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d12e      	bne.n	8002894 <main+0x354>
					|| (right_wheel.distance >= user_dist)) && turning == 0) {
 8002836:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <main+0x334>)
 8002838:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <main+0x33c>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fe f967 	bl	8000b14 <__aeabi_dcmpge>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d123      	bne.n	8002894 <main+0x354>
				TIM1->CCR2 = 0;
				user_dist = 0;
				mainmode = 0;
				//magnetometer(msg);
			}
			break;
 800284c:	e087      	b.n	800295e <main+0x41e>
 800284e:	bf00      	nop
 8002850:	200006a4 	.word	0x200006a4
 8002854:	200006ec 	.word	0x200006ec
 8002858:	20000734 	.word	0x20000734
 800285c:	20000574 	.word	0x20000574
 8002860:	20000360 	.word	0x20000360
 8002864:	2000051c 	.word	0x2000051c
 8002868:	20000518 	.word	0x20000518
 800286c:	20000468 	.word	0x20000468
 8002870:	200004a8 	.word	0x200004a8
 8002874:	20000430 	.word	0x20000430
 8002878:	200004e0 	.word	0x200004e0
 800287c:	20000580 	.word	0x20000580
 8002880:	2000051b 	.word	0x2000051b
 8002884:	40010000 	.word	0x40010000
 8002888:	20000578 	.word	0x20000578
 800288c:	080105c8 	.word	0x080105c8
 8002890:	20000590 	.word	0x20000590
					|| (right_wheel.distance >= user_dist)) && turning == 0) {
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <main+0x444>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d160      	bne.n	800295e <main+0x41e>
				TIM1->CCR1 = 0;
 800289c:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <main+0x448>)
 800289e:	2200      	movs	r2, #0
 80028a0:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM1->CCR2 = 0;
 80028a2:	4b39      	ldr	r3, [pc, #228]	@ (8002988 <main+0x448>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	@ 0x38
				user_dist = 0;
 80028a8:	4938      	ldr	r1, [pc, #224]	@ (800298c <main+0x44c>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9c1 2300 	strd	r2, r3, [r1]
				mainmode = 0;
 80028b6:	4b36      	ldr	r3, [pc, #216]	@ (8002990 <main+0x450>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
			break;
 80028bc:	e04f      	b.n	800295e <main+0x41e>
		case 4:
			// Handling rotation
			//startRotation(theta);
			if (get_distance() - current_dist >= arc_length) {
 80028be:	f7fe fdd5 	bl	800146c <get_distance>
 80028c2:	ec51 0b10 	vmov	r0, r1, d0
 80028c6:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <main+0x454>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fce4 	bl	8000298 <__aeabi_dsub>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002998 <main+0x458>)
 80028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028de:	f7fe f919 	bl	8000b14 <__aeabi_dcmpge>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03b      	beq.n	8002960 <main+0x420>
				TIM1->CCR1 = 0;
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <main+0x448>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM1->CCR2 = 0;
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <main+0x448>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
				HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028fa:	4828      	ldr	r0, [pc, #160]	@ (800299c <main+0x45c>)
 80028fc:	f002 f96e 	bl	8004bdc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002906:	4825      	ldr	r0, [pc, #148]	@ (800299c <main+0x45c>)
 8002908:	f002 f968 	bl	8004bdc <HAL_GPIO_WritePin>
				sprintf(msg, "The wheel has turned for arclength of %d.\r\n ",
 800290c:	4b22      	ldr	r3, [pc, #136]	@ (8002998 <main+0x458>)
 800290e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <main+0x460>)
 8002918:	f7fd fe76 	bl	8000608 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4638      	mov	r0, r7
 8002922:	4920      	ldr	r1, [pc, #128]	@ (80029a4 <main+0x464>)
 8002924:	f00b f8b6 	bl	800da94 <siprintf>
						arc_length * 100);
				Transmit_SERIAL_USB(msg, SERIAL);
 8002928:	463b      	mov	r3, r7
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fba3 	bl	8001078 <Transmit_SERIAL_USB>
				current_dist = 0;
 8002932:	4918      	ldr	r1, [pc, #96]	@ (8002994 <main+0x454>)
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9c1 2300 	strd	r2, r3, [r1]
				arc_length = 0;
 8002940:	4915      	ldr	r1, [pc, #84]	@ (8002998 <main+0x458>)
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9c1 2300 	strd	r2, r3, [r1]
				mainmode = 2;
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <main+0x450>)
 8002950:	2202      	movs	r2, #2
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e004      	b.n	8002960 <main+0x420>
			break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <main+0x420>
			break;
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <main+0x420>
			break;
 800295e:	bf00      	nop
			}

		}
		if ((HAL_GetTick() - mDelay) >= 1000) {
 8002960:	f000 fe8c 	bl	800367c <HAL_GetTick>
 8002964:	4603      	mov	r3, r0
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <main+0x468>)
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002970:	f4ff ae41 	bcc.w	80025f6 <main+0xb6>
//			printVariables(msg, SERIAL);
//			printPID(&right_pid, msg, SERIAL);
//			printPID(&left_pid, msg, SERIAL);
			mDelay = HAL_GetTick();
 8002974:	f000 fe82 	bl	800367c <HAL_GetTick>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <main+0x468>)
 800297e:	601a      	str	r2, [r3, #0]
		if ((buf = comProcess(SERIAL)) != NULL) {
 8002980:	e639      	b.n	80025f6 <main+0xb6>
 8002982:	bf00      	nop
 8002984:	20000590 	.word	0x20000590
 8002988:	40010000 	.word	0x40010000
 800298c:	20000580 	.word	0x20000580
 8002990:	2000051c 	.word	0x2000051c
 8002994:	20000578 	.word	0x20000578
 8002998:	20000588 	.word	0x20000588
 800299c:	40020400 	.word	0x40020400
 80029a0:	40590000 	.word	0x40590000
 80029a4:	080105fc 	.word	0x080105fc
 80029a8:	20000574 	.word	0x20000574

080029ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b094      	sub	sp, #80	@ 0x50
 80029b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029b2:	f107 0320 	add.w	r3, r7, #32
 80029b6:	2230      	movs	r2, #48	@ 0x30
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00b f8cd 	bl	800db5a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <SystemClock_Config+0xd0>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	4a28      	ldr	r2, [pc, #160]	@ (8002a7c <SystemClock_Config+0xd0>)
 80029da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e0:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <SystemClock_Config+0xd0>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ec:	2300      	movs	r3, #0
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <SystemClock_Config+0xd4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80029f8:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <SystemClock_Config+0xd4>)
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <SystemClock_Config+0xd4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8002a20:	2319      	movs	r3, #25
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002a24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a2e:	2307      	movs	r3, #7
 8002a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a32:	f107 0320 	add.w	r3, r7, #32
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fcb0 	bl	800639c <HAL_RCC_OscConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x9a>
		Error_Handler();
 8002a42:	f000 fa89 	bl	8002f58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a46:	230f      	movs	r3, #15
 8002a48:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a56:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 ff12 	bl	800688c <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0xc6>
		Error_Handler();
 8002a6e:	f000 fa73 	bl	8002f58 <Error_Handler>
	}
}
 8002a72:	bf00      	nop
 8002a74:	3750      	adds	r7, #80	@ 0x50
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002a96:	4b3d      	ldr	r3, [pc, #244]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002a98:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <MX_ADC1_Init+0x10c>)
 8002a9a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002aa2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002aa4:	4b39      	ldr	r3, [pc, #228]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8002aaa:	4b38      	ldr	r3, [pc, #224]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002ab0:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ab6:	4b35      	ldr	r3, [pc, #212]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002abe:	4b33      	ldr	r3, [pc, #204]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ac4:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ac6:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <MX_ADC1_Init+0x110>)
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aca:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 5;
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ade:	4b2b      	ldr	r3, [pc, #172]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002ae4:	4829      	ldr	r0, [pc, #164]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002ae6:	f000 fdf9 	bl	80036dc <HAL_ADC_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_ADC1_Init+0x70>
		Error_Handler();
 8002af0:	f000 fa32 	bl	8002f58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002af8:	2301      	movs	r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002afc:	2301      	movs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b00:	463b      	mov	r3, r7
 8002b02:	4619      	mov	r1, r3
 8002b04:	4821      	ldr	r0, [pc, #132]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002b06:	f000 ff31 	bl	800396c <HAL_ADC_ConfigChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_ADC1_Init+0x90>
		Error_Handler();
 8002b10:	f000 fa22 	bl	8002f58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b1c:	463b      	mov	r3, r7
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481a      	ldr	r0, [pc, #104]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002b22:	f000 ff23 	bl	800396c <HAL_ADC_ConfigChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_ADC1_Init+0xac>
		Error_Handler();
 8002b2c:	f000 fa14 	bl	8002f58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8002b30:	2304      	movs	r3, #4
 8002b32:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8002b34:	2303      	movs	r3, #3
 8002b36:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4813      	ldr	r0, [pc, #76]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002b3e:	f000 ff15 	bl	800396c <HAL_ADC_ConfigChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_ADC1_Init+0xc8>
		Error_Handler();
 8002b48:	f000 fa06 	bl	8002f58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8002b50:	2304      	movs	r3, #4
 8002b52:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b54:	463b      	mov	r3, r7
 8002b56:	4619      	mov	r1, r3
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002b5a:	f000 ff07 	bl	800396c <HAL_ADC_ConfigChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8002b64:	f000 f9f8 	bl	8002f58 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002b68:	2311      	movs	r3, #17
 8002b6a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b70:	463b      	mov	r3, r7
 8002b72:	4619      	mov	r1, r3
 8002b74:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <MX_ADC1_Init+0x108>)
 8002b76:	f000 fef9 	bl	800396c <HAL_ADC_ConfigChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_ADC1_Init+0x100>
		Error_Handler();
 8002b80:	f000 f9ea 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200005a8 	.word	0x200005a8
 8002b90:	40012000 	.word	0x40012000
 8002b94:	0f000001 	.word	0x0f000001

08002b98 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <MX_I2C1_Init+0x54>)
 8002ba0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002ba4:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <MX_I2C1_Init+0x58>)
 8002ba6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bd4:	4804      	ldr	r0, [pc, #16]	@ (8002be8 <MX_I2C1_Init+0x50>)
 8002bd6:	f002 f84d 	bl	8004c74 <HAL_I2C_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002be0:	f000 f9ba 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000650 	.word	0x20000650
 8002bec:	40005400 	.word	0x40005400
 8002bf0:	000186a0 	.word	0x000186a0

08002bf4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b096      	sub	sp, #88	@ 0x58
 8002bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002bfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	615a      	str	r2, [r3, #20]
 8002c24:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2220      	movs	r2, #32
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00a ff94 	bl	800db5a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002c32:	4b44      	ldr	r3, [pc, #272]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c34:	4a44      	ldr	r2, [pc, #272]	@ (8002d48 <MX_TIM1_Init+0x154>)
 8002c36:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b41      	ldr	r3, [pc, #260]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 8400;
 8002c44:	4b3f      	ldr	r3, [pc, #252]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c46:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002c4a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002c52:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002c5e:	4839      	ldr	r0, [pc, #228]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c60:	f003 fff4 	bl	8006c4c <HAL_TIM_Base_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002c6a:	f000 f975 	bl	8002f58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c72:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002c74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4832      	ldr	r0, [pc, #200]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c7c:	f004 fbae 	bl	80073dc <HAL_TIM_ConfigClockSource>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM1_Init+0x96>
		Error_Handler();
 8002c86:	f000 f967 	bl	8002f58 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002c8a:	482e      	ldr	r0, [pc, #184]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002c8c:	f004 f8ea 	bl	8006e64 <HAL_TIM_PWM_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8002c96:	f000 f95f 	bl	8002f58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002ca2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4826      	ldr	r0, [pc, #152]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002caa:	f004 ff5f 	bl	8007b6c <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8002cb4:	f000 f950 	bl	8002f58 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb8:	2360      	movs	r3, #96	@ 0x60
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4819      	ldr	r0, [pc, #100]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002cde:	f004 fabb 	bl	8007258 <HAL_TIM_PWM_ConfigChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8002ce8:	f000 f936 	bl	8002f58 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4813      	ldr	r0, [pc, #76]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002cf6:	f004 faaf 	bl	8007258 <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8002d00:	f000 f92a 	bl	8002f58 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4807      	ldr	r0, [pc, #28]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002d28:	f004 ff8e 	bl	8007c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM1_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8002d32:	f000 f911 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002d36:	4803      	ldr	r0, [pc, #12]	@ (8002d44 <MX_TIM1_Init+0x150>)
 8002d38:	f000 fa3e 	bl	80031b8 <HAL_TIM_MspPostInit>

}
 8002d3c:	bf00      	nop
 8002d3e:	3758      	adds	r7, #88	@ 0x58
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200006a4 	.word	0x200006a4
 8002d48:	40010000 	.word	0x40010000

08002d4c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002d60:	463b      	mov	r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d6e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002d90:	4813      	ldr	r0, [pc, #76]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d92:	f003 ff5b 	bl	8006c4c <HAL_TIM_Base_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM2_Init+0x54>
		Error_Handler();
 8002d9c:	f000 f8dc 	bl	8002f58 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4619      	mov	r1, r3
 8002dac:	480c      	ldr	r0, [pc, #48]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002dae:	f004 fb15 	bl	80073dc <HAL_TIM_ConfigClockSource>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM2_Init+0x70>
		Error_Handler();
 8002db8:	f000 f8ce 	bl	8002f58 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002dca:	f004 fecf 	bl	8007b6c <HAL_TIMEx_MasterConfigSynchronization>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002dd4:	f000 f8c0 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200006ec 	.word	0x200006ec

08002de4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <MX_USART2_UART_Init+0x50>)
 8002dec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002df0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002df4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e0a:	220c      	movs	r2, #12
 8002e0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002e1a:	4805      	ldr	r0, [pc, #20]	@ (8002e30 <MX_USART2_UART_Init+0x4c>)
 8002e1c:	f004 ff7a 	bl	8007d14 <HAL_UART_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002e26:	f000 f897 	bl	8002f58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000734 	.word	0x20000734
 8002e34:	40004400 	.word	0x40004400

08002e38 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a0b      	ldr	r2, [pc, #44]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <MX_DMA_Init+0x3c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2038      	movs	r0, #56	@ 0x38
 8002e60:	f001 f8ff 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002e64:	2038      	movs	r0, #56	@ 0x38
 8002e66:	f001 f918 	bl	800409a <HAL_NVIC_EnableIRQ>

}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a2e      	ldr	r2, [pc, #184]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	4b28      	ldr	r3, [pc, #160]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4a27      	ldr	r2, [pc, #156]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	4a20      	ldr	r2, [pc, #128]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <MX_GPIO_Init+0xd8>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Relay1_Pin | Relay2_Pin, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002ee8:	481a      	ldr	r0, [pc, #104]	@ (8002f54 <MX_GPIO_Init+0xdc>)
 8002eea:	f001 fe77 	bl	8004bdc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = LEFT_Pin | RIGHT_Pin;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ef6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	4619      	mov	r1, r3
 8002f02:	4814      	ldr	r0, [pc, #80]	@ (8002f54 <MX_GPIO_Init+0xdc>)
 8002f04:	f001 fce6 	bl	80048d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Relay1_Pin Relay2_Pin */
	GPIO_InitStruct.Pin = Relay1_Pin | Relay2_Pin;
 8002f08:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f0c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480c      	ldr	r0, [pc, #48]	@ (8002f54 <MX_GPIO_Init+0xdc>)
 8002f22:	f001 fcd7 	bl	80048d4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	2006      	movs	r0, #6
 8002f2c:	f001 f899 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f30:	2006      	movs	r0, #6
 8002f32:	f001 f8b2 	bl	800409a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2007      	movs	r0, #7
 8002f3c:	f001 f891 	bl	8004062 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f40:	2007      	movs	r0, #7
 8002f42:	f001 f8aa 	bl	800409a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002f46:	bf00      	nop
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020400 	.word	0x40020400

08002f58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5c:	b672      	cpsid	i
}
 8002f5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <Error_Handler+0x8>

08002f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_MspInit+0x4c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <HAL_ADC_MspInit+0xd8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d156      	bne.n	8003084 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a25      	ldr	r2, [pc, #148]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <HAL_ADC_MspInit+0xdc>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800300e:	2313      	movs	r3, #19
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003012:	2303      	movs	r3, #3
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	4619      	mov	r1, r3
 8003020:	481c      	ldr	r0, [pc, #112]	@ (8003094 <HAL_ADC_MspInit+0xe0>)
 8003022:	f001 fc57 	bl	80048d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003028:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <HAL_ADC_MspInit+0xe8>)
 800302a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003040:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003044:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003046:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800304c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003054:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 800305e:	2200      	movs	r2, #0
 8003060:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003064:	2200      	movs	r2, #0
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003068:	480b      	ldr	r0, [pc, #44]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 800306a:	f001 f831 	bl	80040d0 <HAL_DMA_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003074:	f7ff ff70 	bl	8002f58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a07      	ldr	r2, [pc, #28]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38
 800307e:	4a06      	ldr	r2, [pc, #24]	@ (8003098 <HAL_ADC_MspInit+0xe4>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003084:	bf00      	nop
 8003086:	3728      	adds	r7, #40	@ 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40012000 	.word	0x40012000
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000
 8003098:	200005f0 	.word	0x200005f0
 800309c:	40026410 	.word	0x40026410

080030a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_I2C_MspInit+0x84>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12b      	bne.n	800311a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030de:	23c0      	movs	r3, #192	@ 0xc0
 80030e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e2:	2312      	movs	r3, #18
 80030e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030ee:	2304      	movs	r3, #4
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	480c      	ldr	r0, [pc, #48]	@ (800312c <HAL_I2C_MspInit+0x8c>)
 80030fa:	f001 fbeb 	bl	80048d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	4a08      	ldr	r2, [pc, #32]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 8003108:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800310c:	6413      	str	r3, [r2, #64]	@ 0x40
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	@ 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40005400 	.word	0x40005400
 8003128:	40023800 	.word	0x40023800
 800312c:	40020400 	.word	0x40020400

08003130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_TIM_Base_MspInit+0x80>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d116      	bne.n	8003170 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	4a1a      	ldr	r2, [pc, #104]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6453      	str	r3, [r2, #68]	@ 0x44
 8003152:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2019      	movs	r0, #25
 8003164:	f000 ff7d 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003168:	2019      	movs	r0, #25
 800316a:	f000 ff96 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800316e:	e01a      	b.n	80031a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003178:	d115      	bne.n	80031a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	4a0c      	ldr	r2, [pc, #48]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6413      	str	r3, [r2, #64]	@ 0x40
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <HAL_TIM_Base_MspInit+0x84>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	201c      	movs	r0, #28
 800319c:	f000 ff61 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031a0:	201c      	movs	r0, #28
 80031a2:	f000 ff7a 	bl	800409a <HAL_NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 030c 	add.w	r3, r7, #12
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <HAL_TIM_MspPostInit+0x68>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d11e      	bne.n	8003218 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_TIM_MspPostInit+0x6c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_TIM_MspPostInit+0x6c>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_TIM_MspPostInit+0x6c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003208:	2301      	movs	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	4619      	mov	r1, r3
 8003212:	4805      	ldr	r0, [pc, #20]	@ (8003228 <HAL_TIM_MspPostInit+0x70>)
 8003214:	f001 fb5e 	bl	80048d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003218:	bf00      	nop
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40010000 	.word	0x40010000
 8003224:	40023800 	.word	0x40023800
 8003228:	40020000 	.word	0x40020000

0800322c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <HAL_UART_MspInit+0x94>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d133      	bne.n	80032b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	6413      	str	r3, [r2, #64]	@ 0x40
 800325e:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a14      	ldr	r2, [pc, #80]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_UART_MspInit+0x98>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003286:	230c      	movs	r3, #12
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003292:	2303      	movs	r3, #3
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003296:	2307      	movs	r3, #7
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	4809      	ldr	r0, [pc, #36]	@ (80032c8 <HAL_UART_MspInit+0x9c>)
 80032a2:	f001 fb17 	bl	80048d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	2026      	movs	r0, #38	@ 0x26
 80032ac:	f000 fed9 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032b0:	2026      	movs	r0, #38	@ 0x26
 80032b2:	f000 fef2 	bl	800409a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <NMI_Handler+0x4>

080032d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <MemManage_Handler+0x4>

080032e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <BusFault_Handler+0x4>

080032ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <UsageFault_Handler+0x4>

080032f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003322:	f000 f997 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}

0800332a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 800332e:	2001      	movs	r0, #1
 8003330:	f001 fc88 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 800333c:	2002      	movs	r0, #2
 800333e:	f001 fc81 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800334e:	f003 fe93 	bl	8007078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200006a4 	.word	0x200006a4

0800335c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <TIM2_IRQHandler+0x10>)
 8003362:	f003 fe89 	bl	8007078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200006ec 	.word	0x200006ec

08003370 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003374:	4802      	ldr	r0, [pc, #8]	@ (8003380 <USART2_IRQHandler+0x10>)
 8003376:	f004 fd1d 	bl	8007db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000734 	.word	0x20000734

08003384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003388:	4802      	ldr	r0, [pc, #8]	@ (8003394 <DMA2_Stream0_IRQHandler+0x10>)
 800338a:	f001 f839 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200005f0 	.word	0x200005f0

08003398 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <OTG_FS_IRQHandler+0x10>)
 800339e:	f001 fef1 	bl	8005184 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20001890 	.word	0x20001890

080033ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return 1;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_kill>:

int _kill(int pid, int sig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033c6:	f00a fc3f 	bl	800dc48 <__errno>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2216      	movs	r2, #22
 80033ce:	601a      	str	r2, [r3, #0]
  return -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_exit>:

void _exit (int status)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ffe7 	bl	80033bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ee:	bf00      	nop
 80033f0:	e7fd      	b.n	80033ee <_exit+0x12>

080033f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e00a      	b.n	800341a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003404:	f3af 8000 	nop.w
 8003408:	4601      	mov	r1, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	60ba      	str	r2, [r7, #8]
 8003410:	b2ca      	uxtb	r2, r1
 8003412:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	3301      	adds	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	dbf0      	blt.n	8003404 <_read+0x12>
  }

  return len;
 8003422:	687b      	ldr	r3, [r7, #4]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e009      	b.n	8003452 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	60ba      	str	r2, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3301      	adds	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	429a      	cmp	r2, r3
 8003458:	dbf1      	blt.n	800343e <_write+0x12>
  }
  return len;
 800345a:	687b      	ldr	r3, [r7, #4]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_close>:

int _close(int file)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800348c:	605a      	str	r2, [r3, #4]
  return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_isatty>:

int _isatty(int file)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034a4:	2301      	movs	r3, #1
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b085      	sub	sp, #20
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034d4:	4a14      	ldr	r2, [pc, #80]	@ (8003528 <_sbrk+0x5c>)
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <_sbrk+0x60>)
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <_sbrk+0x64>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e8:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <_sbrk+0x64>)
 80034ea:	4a12      	ldr	r2, [pc, #72]	@ (8003534 <_sbrk+0x68>)
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ee:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <_sbrk+0x64>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d207      	bcs.n	800350c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034fc:	f00a fba4 	bl	800dc48 <__errno>
 8003500:	4603      	mov	r3, r0
 8003502:	220c      	movs	r2, #12
 8003504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	e009      	b.n	8003520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800350c:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003512:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <_sbrk+0x64>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <_sbrk+0x64>)
 800351c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20010000 	.word	0x20010000
 800352c:	00000400 	.word	0x00000400
 8003530:	20000ba8 	.word	0x20000ba8
 8003534:	200020e0 	.word	0x200020e0

08003538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <SystemInit+0x20>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003542:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <SystemInit+0x20>)
 8003544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800355c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003594 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003560:	f7ff ffea 	bl	8003538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003564:	480c      	ldr	r0, [pc, #48]	@ (8003598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003566:	490d      	ldr	r1, [pc, #52]	@ (800359c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003568:	4a0d      	ldr	r2, [pc, #52]	@ (80035a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800356a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800356c:	e002      	b.n	8003574 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003572:	3304      	adds	r3, #4

08003574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003578:	d3f9      	bcc.n	800356e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800357a:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800357c:	4c0a      	ldr	r4, [pc, #40]	@ (80035a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003580:	e001      	b.n	8003586 <LoopFillZerobss>

08003582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003584:	3204      	adds	r2, #4

08003586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800358a:	f00a fb63 	bl	800dc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358e:	f7fe ffd7 	bl	8002540 <main>
  bx  lr    
 8003592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800359c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80035a0:	08010ab0 	.word	0x08010ab0
  ldr r2, =_sbss
 80035a4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80035a8:	200020e0 	.word	0x200020e0

080035ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035ac:	e7fe      	b.n	80035ac <ADC_IRQHandler>
	...

080035b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_Init+0x40>)
 80035ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <HAL_Init+0x40>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_Init+0x40>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
 80035da:	f000 fd37 	bl	800404c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035de:	200f      	movs	r0, #15
 80035e0:	f000 f808 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e4:	f7ff fcbe 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_InitTick+0x54>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_InitTick+0x58>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd4f 	bl	80040b6 <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f000 fd17 	bl	8004062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	@ (8003650 <HAL_InitTick+0x5c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000004 	.word	0x20000004
 800364c:	2000000c 	.word	0x2000000c
 8003650:	20000008 	.word	0x20000008

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000000c 	.word	0x2000000c
 8003678:	20000bac 	.word	0x20000bac

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000bac 	.word	0x20000bac

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000000c 	.word	0x2000000c

080036dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e033      	b.n	800375a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fc5a 	bl	8002fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003722:	f023 0302 	bic.w	r3, r3, #2
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa3e 	bl	8003bb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
 800374a:	e001      	b.n	8003750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_ADC_Start_DMA+0x1e>
 800377e:	2302      	movs	r3, #2
 8003780:	e0ce      	b.n	8003920 <HAL_ADC_Start_DMA+0x1bc>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d018      	beq.n	80037ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_ADC_Start_DMA+0x1c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a5f      	ldr	r2, [pc, #380]	@ (800392c <HAL_ADC_Start_DMA+0x1c8>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9a      	lsrs	r2, r3, #18
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80037bc:	e002      	b.n	80037c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f9      	bne.n	80037be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d8:	d107      	bne.n	80037ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 8086 	bne.w	8003906 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003824:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003838:	d106      	bne.n	8003848 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f023 0206 	bic.w	r2, r3, #6
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
 8003846:	e002      	b.n	800384e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003856:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <HAL_ADC_Start_DMA+0x1cc>)
 8003858:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385e:	4a35      	ldr	r2, [pc, #212]	@ (8003934 <HAL_ADC_Start_DMA+0x1d0>)
 8003860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003866:	4a34      	ldr	r2, [pc, #208]	@ (8003938 <HAL_ADC_Start_DMA+0x1d4>)
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	4a33      	ldr	r2, [pc, #204]	@ (800393c <HAL_ADC_Start_DMA+0x1d8>)
 8003870:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800387a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800388a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	334c      	adds	r3, #76	@ 0x4c
 80038a6:	4619      	mov	r1, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f000 fcbe 	bl	800422c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d129      	bne.n	800391e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	e020      	b.n	800391e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a17      	ldr	r2, [pc, #92]	@ (8003940 <HAL_ADC_Start_DMA+0x1dc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d11b      	bne.n	800391e <HAL_ADC_Start_DMA+0x1ba>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d114      	bne.n	800391e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e00b      	b.n	800391e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f043 0210 	orr.w	r2, r3, #16
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000004 	.word	0x20000004
 800392c:	431bde83 	.word	0x431bde83
 8003930:	40012300 	.word	0x40012300
 8003934:	08003da9 	.word	0x08003da9
 8003938:	08003e63 	.word	0x08003e63
 800393c:	08003e7f 	.word	0x08003e7f
 8003940:	40012000 	.word	0x40012000

08003944 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1c>
 8003984:	2302      	movs	r3, #2
 8003986:	e105      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x228>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b09      	cmp	r3, #9
 8003996:	d925      	bls.n	80039e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	3b1e      	subs	r3, #30
 80039ae:	2207      	movs	r2, #7
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	400a      	ands	r2, r1
 80039bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68d9      	ldr	r1, [r3, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	4603      	mov	r3, r0
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4403      	add	r3, r0
 80039d6:	3b1e      	subs	r3, #30
 80039d8:	409a      	lsls	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	e022      	b.n	8003a2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	2207      	movs	r2, #7
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	400a      	ands	r2, r1
 8003a06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6919      	ldr	r1, [r3, #16]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4403      	add	r3, r0
 8003a20:	409a      	lsls	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d824      	bhi.n	8003a7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b05      	subs	r3, #5
 8003a44:	221f      	movs	r2, #31
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b05      	subs	r3, #5
 8003a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a7a:	e04c      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d824      	bhi.n	8003ace <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	3b23      	subs	r3, #35	@ 0x23
 8003a96:	221f      	movs	r2, #31
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	3b23      	subs	r3, #35	@ 0x23
 8003ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003acc:	e023      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	3b41      	subs	r3, #65	@ 0x41
 8003ae0:	221f      	movs	r2, #31
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	400a      	ands	r2, r1
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	3b41      	subs	r3, #65	@ 0x41
 8003b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b16:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x234>)
 8003b18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x238>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d109      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1cc>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b12      	cmp	r3, #18
 8003b2a:	d105      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x238>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d123      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x1e6>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b11      	cmp	r3, #17
 8003b50:	d11b      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d111      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b66:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a10      	ldr	r2, [pc, #64]	@ (8003bac <HAL_ADC_ConfigChannel+0x240>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9a      	lsrs	r2, r3, #18
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b7c:	e002      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f9      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40012300 	.word	0x40012300
 8003ba4:	40012000 	.word	0x40012000
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	431bde83 	.word	0x431bde83

08003bb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bb8:	4b79      	ldr	r3, [pc, #484]	@ (8003da0 <ADC_Init+0x1f0>)
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	4a58      	ldr	r2, [pc, #352]	@ (8003da4 <ADC_Init+0x1f4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e00f      	b.n	8003cae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0202 	bic.w	r2, r2, #2
 8003cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7e1b      	ldrb	r3, [r3, #24]
 8003cc8:	005a      	lsls	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	3b01      	subs	r3, #1
 8003d08:	035a      	lsls	r2, r3, #13
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	e007      	b.n	8003d24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	051a      	lsls	r2, r3, #20
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d66:	025a      	lsls	r2, r3, #9
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6899      	ldr	r1, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	029a      	lsls	r2, r3, #10
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40012300 	.word	0x40012300
 8003da4:	0f000001 	.word	0x0f000001

08003da8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d13c      	bne.n	8003e3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d12b      	bne.n	8003e34 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d127      	bne.n	8003e34 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d006      	beq.n	8003e00 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d119      	bne.n	8003e34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0220 	bic.w	r2, r2, #32
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7fe f9d7 	bl	80021e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e3a:	e00e      	b.n	8003e5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fd85 	bl	8003958 <HAL_ADC_ErrorCallback>
}
 8003e4e:	e004      	b.n	8003e5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff fd67 	bl	8003944 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fd5a 	bl	8003958 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ede:	4a04      	ldr	r2, [pc, #16]	@ (8003ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	60d3      	str	r3, [r2, #12]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ef8:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <__NVIC_GetPriorityGrouping+0x18>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0307 	and.w	r3, r3, #7
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db0b      	blt.n	8003f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	f003 021f 	and.w	r2, r3, #31
 8003f28:	4907      	ldr	r1, [pc, #28]	@ (8003f48 <__NVIC_EnableIRQ+0x38>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2001      	movs	r0, #1
 8003f32:	fa00 f202 	lsl.w	r2, r0, r2
 8003f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	db0a      	blt.n	8003f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	490c      	ldr	r1, [pc, #48]	@ (8003f98 <__NVIC_SetPriority+0x4c>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	440b      	add	r3, r1
 8003f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f74:	e00a      	b.n	8003f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4908      	ldr	r1, [pc, #32]	@ (8003f9c <__NVIC_SetPriority+0x50>)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	3b04      	subs	r3, #4
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	440b      	add	r3, r1
 8003f8a:	761a      	strb	r2, [r3, #24]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000e100 	.word	0xe000e100
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	@ 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf28      	it	cs
 8003fbe:	2304      	movcs	r3, #4
 8003fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2b06      	cmp	r3, #6
 8003fc8:	d902      	bls.n	8003fd0 <NVIC_EncodePriority+0x30>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3b03      	subs	r3, #3
 8003fce:	e000      	b.n	8003fd2 <NVIC_EncodePriority+0x32>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43da      	mvns	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	43d9      	mvns	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	4313      	orrs	r3, r2
         );
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	@ 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3b01      	subs	r3, #1
 8004014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004018:	d301      	bcc.n	800401e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800401a:	2301      	movs	r3, #1
 800401c:	e00f      	b.n	800403e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <SysTick_Config+0x40>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004026:	210f      	movs	r1, #15
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	f7ff ff8e 	bl	8003f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <SysTick_Config+0x40>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004036:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <SysTick_Config+0x40>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000e010 	.word	0xe000e010

0800404c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff ff29 	bl	8003eac <__NVIC_SetPriorityGrouping>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004074:	f7ff ff3e 	bl	8003ef4 <__NVIC_GetPriorityGrouping>
 8004078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff8e 	bl	8003fa0 <NVIC_EncodePriority>
 8004084:	4602      	mov	r2, r0
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff5d 	bl	8003f4c <__NVIC_SetPriority>
}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	4603      	mov	r3, r0
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff31 	bl	8003f10 <__NVIC_EnableIRQ>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ffa2 	bl	8004008 <SysTick_Config>
 80040c4:	4603      	mov	r3, r0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7ff face 	bl	800367c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e099      	b.n	8004220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410c:	e00f      	b.n	800412e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800410e:	f7ff fab5 	bl	800367c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b05      	cmp	r3, #5
 800411a:	d908      	bls.n	800412e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2203      	movs	r2, #3
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e078      	b.n	8004220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e8      	bne.n	800410e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_DMA_Init+0x158>)
 8004148:	4013      	ands	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	2b04      	cmp	r3, #4
 8004186:	d107      	bne.n	8004198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	4313      	orrs	r3, r2
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0307 	bic.w	r3, r3, #7
 80041ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d117      	bne.n	80041f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb01 	bl	80047dc <DMA_CheckFifoParam>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2240      	movs	r2, #64	@ 0x40
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041ee:	2301      	movs	r3, #1
 80041f0:	e016      	b.n	8004220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fab8 	bl	8004770 <DMA_CalcBaseAndBitshift>
 8004200:	4603      	mov	r3, r0
 8004202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	223f      	movs	r2, #63	@ 0x3f
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	f010803f 	.word	0xf010803f

0800422c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_DMA_Start_IT+0x26>
 800424e:	2302      	movs	r3, #2
 8004250:	e040      	b.n	80042d4 <HAL_DMA_Start_IT+0xa8>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d12f      	bne.n	80042c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fa4a 	bl	8004714 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004284:	223f      	movs	r2, #63	@ 0x3f
 8004286:	409a      	lsls	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0216 	orr.w	r2, r2, #22
 800429a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0208 	orr.w	r2, r2, #8
 80042b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e005      	b.n	80042d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042ea:	f7ff f9c7 	bl	800367c <HAL_GetTick>
 80042ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d008      	beq.n	800430e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2280      	movs	r2, #128	@ 0x80
 8004300:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e052      	b.n	80043b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0216 	bic.w	r2, r2, #22
 800431c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800432c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_DMA_Abort+0x62>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0208 	bic.w	r2, r2, #8
 800434c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800435e:	e013      	b.n	8004388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004360:	f7ff f98c 	bl	800367c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b05      	cmp	r3, #5
 800436c:	d90c      	bls.n	8004388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2203      	movs	r2, #3
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e015      	b.n	80043b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e4      	bne.n	8004360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439a:	223f      	movs	r2, #63	@ 0x3f
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d004      	beq.n	80043da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00c      	b.n	80043f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2205      	movs	r2, #5
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800440c:	4b8e      	ldr	r3, [pc, #568]	@ (8004648 <HAL_DMA_IRQHandler+0x248>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a8e      	ldr	r2, [pc, #568]	@ (800464c <HAL_DMA_IRQHandler+0x24c>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	2208      	movs	r2, #8
 800442c:	409a      	lsls	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01a      	beq.n	800446c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0204 	bic.w	r2, r2, #4
 8004452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004458:	2208      	movs	r2, #8
 800445a:	409a      	lsls	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004470:	2201      	movs	r2, #1
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d012      	beq.n	80044a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	2201      	movs	r2, #1
 8004490:	409a      	lsls	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f043 0202 	orr.w	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2204      	movs	r2, #4
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d012      	beq.n	80044d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	2204      	movs	r2, #4
 80044c6:	409a      	lsls	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d0:	f043 0204 	orr.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044dc:	2210      	movs	r2, #16
 80044de:	409a      	lsls	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d043      	beq.n	8004570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03c      	beq.n	8004570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	2210      	movs	r2, #16
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d024      	beq.n	8004570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
 800452e:	e01f      	b.n	8004570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e016      	b.n	8004570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0208 	bic.w	r2, r2, #8
 800455e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	2220      	movs	r2, #32
 8004576:	409a      	lsls	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 808f 	beq.w	80046a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8087 	beq.w	80046a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004596:	2220      	movs	r2, #32
 8004598:	409a      	lsls	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d136      	bne.n	8004618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0216 	bic.w	r2, r2, #22
 80045b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <HAL_DMA_IRQHandler+0x1da>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0208 	bic.w	r2, r2, #8
 80045e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	223f      	movs	r2, #63	@ 0x3f
 80045f0:	409a      	lsls	r2, r3
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	2b00      	cmp	r3, #0
 800460c:	d07e      	beq.n	800470c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4798      	blx	r3
        }
        return;
 8004616:	e079      	b.n	800470c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01d      	beq.n	8004662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	2b00      	cmp	r3, #0
 800463a:	d031      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
 8004644:	e02c      	b.n	80046a0 <HAL_DMA_IRQHandler+0x2a0>
 8004646:	bf00      	nop
 8004648:	20000004 	.word	0x20000004
 800464c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d023      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e01e      	b.n	80046a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0210 	bic.w	r2, r2, #16
 800467e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d032      	beq.n	800470e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d022      	beq.n	80046fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2205      	movs	r2, #5
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d307      	bcc.n	80046e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f2      	bne.n	80046cc <HAL_DMA_IRQHandler+0x2cc>
 80046e6:	e000      	b.n	80046ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
 800470a:	e000      	b.n	800470e <HAL_DMA_IRQHandler+0x30e>
        return;
 800470c:	bf00      	nop
    }
  }
}
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004730:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d108      	bne.n	8004754 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004752:	e007      	b.n	8004764 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	3b10      	subs	r3, #16
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <DMA_CalcBaseAndBitshift+0x64>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800478a:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <DMA_CalcBaseAndBitshift+0x68>)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d909      	bls.n	80047b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80047b0:	e007      	b.n	80047c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	aaaaaaab 	.word	0xaaaaaaab
 80047d8:	0801068c 	.word	0x0801068c

080047dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11f      	bne.n	8004836 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d856      	bhi.n	80048aa <DMA_CheckFifoParam+0xce>
 80047fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <DMA_CheckFifoParam+0x28>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004815 	.word	0x08004815
 8004808:	08004827 	.word	0x08004827
 800480c:	08004815 	.word	0x08004815
 8004810:	080048ab 	.word	0x080048ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d046      	beq.n	80048ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004824:	e043      	b.n	80048ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800482e:	d140      	bne.n	80048b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004834:	e03d      	b.n	80048b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800483e:	d121      	bne.n	8004884 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d837      	bhi.n	80048b6 <DMA_CheckFifoParam+0xda>
 8004846:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <DMA_CheckFifoParam+0x70>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	0800485d 	.word	0x0800485d
 8004850:	08004863 	.word	0x08004863
 8004854:	0800485d 	.word	0x0800485d
 8004858:	08004875 	.word	0x08004875
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      break;
 8004860:	e030      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d025      	beq.n	80048ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004872:	e022      	b.n	80048ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800487c:	d11f      	bne.n	80048be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004882:	e01c      	b.n	80048be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d903      	bls.n	8004892 <DMA_CheckFifoParam+0xb6>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d003      	beq.n	8004898 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004890:	e018      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      break;
 8004896:	e015      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e00b      	b.n	80048c2 <DMA_CheckFifoParam+0xe6>
      break;
 80048aa:	bf00      	nop
 80048ac:	e00a      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;
 80048ae:	bf00      	nop
 80048b0:	e008      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;
 80048b2:	bf00      	nop
 80048b4:	e006      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;
 80048b6:	bf00      	nop
 80048b8:	e004      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <DMA_CheckFifoParam+0xe8>
      break;
 80048c2:	bf00      	nop
    }
  } 
  
  return status; 
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	e159      	b.n	8004ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048f0:	2201      	movs	r2, #1
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	f040 8148 	bne.w	8004b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b01      	cmp	r3, #1
 8004918:	d005      	beq.n	8004926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004922:	2b02      	cmp	r3, #2
 8004924:	d130      	bne.n	8004988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800495c:	2201      	movs	r2, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 0201 	and.w	r2, r3, #1
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d017      	beq.n	80049c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d123      	bne.n	8004a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4013      	ands	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	08da      	lsrs	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3208      	adds	r2, #8
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0203 	and.w	r2, r3, #3
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a2 	beq.w	8004b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b57      	ldr	r3, [pc, #348]	@ (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	4a56      	ldr	r2, [pc, #344]	@ (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a6a:	4b54      	ldr	r3, [pc, #336]	@ (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a76:	4a52      	ldr	r2, [pc, #328]	@ (8004bc0 <HAL_GPIO_Init+0x2ec>)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	220f      	movs	r2, #15
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a49      	ldr	r2, [pc, #292]	@ (8004bc4 <HAL_GPIO_Init+0x2f0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x202>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a48      	ldr	r2, [pc, #288]	@ (8004bc8 <HAL_GPIO_Init+0x2f4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x1fe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a47      	ldr	r2, [pc, #284]	@ (8004bcc <HAL_GPIO_Init+0x2f8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a46      	ldr	r2, [pc, #280]	@ (8004bd0 <HAL_GPIO_Init+0x2fc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x1f6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a45      	ldr	r2, [pc, #276]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x1f2>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e008      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	e006      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e004      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e002      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_GPIO_Init+0x204>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	f002 0203 	and.w	r2, r2, #3
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae8:	4935      	ldr	r1, [pc, #212]	@ (8004bc0 <HAL_GPIO_Init+0x2ec>)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	3302      	adds	r3, #2
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004af6:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b20:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b44:	4a24      	ldr	r2, [pc, #144]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b4a:	4b23      	ldr	r3, [pc, #140]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b74:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b98:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd8 <HAL_GPIO_Init+0x304>)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	f67f aea2 	bls.w	80048f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	@ 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	40020400 	.word	0x40020400
 8004bcc:	40020800 	.word	0x40020800
 8004bd0:	40020c00 	.word	0x40020c00
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40013c00 	.word	0x40013c00

08004bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
 8004be8:	4613      	mov	r3, r2
 8004bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf8:	e003      	b.n	8004c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	619a      	str	r2, [r3, #24]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c20:	887a      	ldrh	r2, [r7, #2]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4013      	ands	r3, r2
 8004c26:	041a      	lsls	r2, r3, #16
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43d9      	mvns	r1, r3
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	400b      	ands	r3, r1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	619a      	str	r2, [r3, #24]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c4e:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c5a:	4a05      	ldr	r2, [pc, #20]	@ (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc f9e8 	bl	8001038 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40013c00 	.word	0x40013c00

08004c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e12b      	b.n	8004ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe fa00 	bl	80030a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	@ 0x24
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f001 ff90 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 8004cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4a81      	ldr	r2, [pc, #516]	@ (8004ee8 <HAL_I2C_Init+0x274>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d807      	bhi.n	8004cf8 <HAL_I2C_Init+0x84>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a80      	ldr	r2, [pc, #512]	@ (8004eec <HAL_I2C_Init+0x278>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bf94      	ite	ls
 8004cf0:	2301      	movls	r3, #1
 8004cf2:	2300      	movhi	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e006      	b.n	8004d06 <HAL_I2C_Init+0x92>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8004ef0 <HAL_I2C_Init+0x27c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bf94      	ite	ls
 8004d00:	2301      	movls	r3, #1
 8004d02:	2300      	movhi	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e0e7      	b.n	8004ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a78      	ldr	r2, [pc, #480]	@ (8004ef4 <HAL_I2C_Init+0x280>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0c9b      	lsrs	r3, r3, #18
 8004d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee8 <HAL_I2C_Init+0x274>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d802      	bhi.n	8004d48 <HAL_I2C_Init+0xd4>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	e009      	b.n	8004d5c <HAL_I2C_Init+0xe8>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	4a69      	ldr	r2, [pc, #420]	@ (8004ef8 <HAL_I2C_Init+0x284>)
 8004d54:	fba2 2303 	umull	r2, r3, r2, r3
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	495c      	ldr	r1, [pc, #368]	@ (8004ee8 <HAL_I2C_Init+0x274>)
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	d819      	bhi.n	8004db0 <HAL_I2C_Init+0x13c>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1e59      	subs	r1, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d90:	400b      	ands	r3, r1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_I2C_Init+0x138>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1e59      	subs	r1, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da4:	3301      	adds	r3, #1
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	e051      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004dac:	2304      	movs	r3, #4
 8004dae:	e04f      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d111      	bne.n	8004ddc <HAL_I2C_Init+0x168>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1e58      	subs	r0, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	440b      	add	r3, r1
 8004dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e012      	b.n	8004e02 <HAL_I2C_Init+0x18e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e58      	subs	r0, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6859      	ldr	r1, [r3, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	0099      	lsls	r1, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_I2C_Init+0x196>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10e      	bne.n	8004e30 <HAL_I2C_Init+0x1bc>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1e58      	subs	r0, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	440b      	add	r3, r1
 8004e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e24:	3301      	adds	r3, #1
 8004e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2e:	e00f      	b.n	8004e50 <HAL_I2C_Init+0x1dc>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e58      	subs	r0, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	0099      	lsls	r1, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	6809      	ldr	r1, [r1, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6911      	ldr	r1, [r2, #16]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68d2      	ldr	r2, [r2, #12]
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	000186a0 	.word	0x000186a0
 8004eec:	001e847f 	.word	0x001e847f
 8004ef0:	003d08ff 	.word	0x003d08ff
 8004ef4:	431bde83 	.word	0x431bde83
 8004ef8:	10624dd3 	.word	0x10624dd3

08004efc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e101      	b.n	8005112 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f007 fb4b 	bl	800c5c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2203      	movs	r2, #3
 8004f32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f3c:	d102      	bne.n	8004f44 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 ff44 	bl	8008dd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7c1a      	ldrb	r2, [r3, #16]
 8004f56:	f88d 2000 	strb.w	r2, [sp]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f5e:	f003 fe23 	bl	8008ba8 <USB_CoreInit>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0ce      	b.n	8005112 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f003 ff3c 	bl	8008df8 <USB_SetCurrentMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0bf      	b.n	8005112 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	e04a      	b.n	800502e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3315      	adds	r3, #21
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3314      	adds	r3, #20
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	b298      	uxth	r0, r3
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	332e      	adds	r3, #46	@ 0x2e
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	331c      	adds	r3, #28
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3320      	adds	r3, #32
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3324      	adds	r3, #36	@ 0x24
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	3301      	adds	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	791b      	ldrb	r3, [r3, #4]
 8005032:	7bfa      	ldrb	r2, [r7, #15]
 8005034:	429a      	cmp	r2, r3
 8005036:	d3af      	bcc.n	8004f98 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e044      	b.n	80050c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	440b      	add	r3, r1
 800508e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	3301      	adds	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	791b      	ldrb	r3, [r3, #4]
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3b5      	bcc.n	800503e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	7c1a      	ldrb	r2, [r3, #16]
 80050da:	f88d 2000 	strb.w	r2, [sp]
 80050de:	3304      	adds	r3, #4
 80050e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e2:	f003 fed5 	bl	8008e90 <USB_DevInit>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e00c      	b.n	8005112 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f004 ff19 	bl	8009f42 <USB_DevDisconnect>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_PCD_Start+0x1c>
 8005132:	2302      	movs	r3, #2
 8005134:	e022      	b.n	800517c <HAL_PCD_Start+0x62>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f003 fe26 	bl	8008db4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fec7 	bl	8009f00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b08d      	sub	sp, #52	@ 0x34
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f004 ff85 	bl	800a0aa <USB_GetMode>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 848c 	bne.w	8005ac0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f004 fee9 	bl	8009f84 <USB_ReadInterrupts>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8482 	beq.w	8005abe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f004 fed6 	bl	8009f84 <USB_ReadInterrupts>
 80051d8:	4603      	mov	r3, r0
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d107      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f002 0202 	and.w	r2, r2, #2
 80051f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f004 fec4 	bl	8009f84 <USB_ReadInterrupts>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b10      	cmp	r3, #16
 8005204:	d161      	bne.n	80052ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0210 	bic.w	r2, r2, #16
 8005214:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	0c5b      	lsrs	r3, r3, #17
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	2b02      	cmp	r3, #2
 8005240:	d124      	bne.n	800528c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d035      	beq.n	80052ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525c:	b29b      	uxth	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	6a38      	ldr	r0, [r7, #32]
 8005262:	f004 fcfb 	bl	8009c5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005272:	441a      	add	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005284:	441a      	add	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	615a      	str	r2, [r3, #20]
 800528a:	e016      	b.n	80052ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	0c5b      	lsrs	r3, r3, #17
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	2b06      	cmp	r3, #6
 8005296:	d110      	bne.n	80052ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800529e:	2208      	movs	r2, #8
 80052a0:	4619      	mov	r1, r3
 80052a2:	6a38      	ldr	r0, [r7, #32]
 80052a4:	f004 fcda 	bl	8009c5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b4:	441a      	add	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0210 	orr.w	r2, r2, #16
 80052c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f004 fe58 	bl	8009f84 <USB_ReadInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052de:	f040 80a7 	bne.w	8005430 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f004 fe5d 	bl	8009faa <USB_ReadDevAllOutEpInterrupt>
 80052f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80052f2:	e099      	b.n	8005428 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 808e 	beq.w	800541c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f004 fe81 	bl	800a012 <USB_ReadDevOutEPInterrupt>
 8005310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	2301      	movs	r3, #1
 800532c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800532e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fea1 	bl	8006078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534c:	461a      	mov	r2, r3
 800534e:	2308      	movs	r3, #8
 8005350:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005352:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 ff77 	bl	8006248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005370:	461a      	mov	r2, r3
 8005372:	2310      	movs	r3, #16
 8005374:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d030      	beq.n	80053e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b80      	cmp	r3, #128	@ 0x80
 800538a:	d109      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800539e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80053a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	78db      	ldrb	r3, [r3, #3]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2200      	movs	r2, #0
 80053c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f007 f9f6 	bl	800c7bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	2302      	movs	r3, #2
 80053e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f8:	461a      	mov	r2, r3
 80053fa:	2320      	movs	r3, #32
 80053fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800541a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	3301      	adds	r3, #1
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	2b00      	cmp	r3, #0
 800542c:	f47f af62 	bne.w	80052f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 fda5 	bl	8009f84 <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005440:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005444:	f040 80db 	bne.w	80055fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f004 fdc6 	bl	8009fde <USB_ReadDevAllInEpInterrupt>
 8005452:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005458:	e0cd      	b.n	80055f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80c2 	beq.w	80055ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f004 fdec 	bl	800a04e <USB_ReadDevInEPInterrupt>
 8005476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d057      	beq.n	8005532 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	2201      	movs	r2, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	43db      	mvns	r3, r3
 800549c:	69f9      	ldr	r1, [r7, #28]
 800549e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054a2:	4013      	ands	r3, r2
 80054a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b2:	461a      	mov	r2, r3
 80054b4:	2301      	movs	r3, #1
 80054b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	799b      	ldrb	r3, [r3, #6]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d132      	bne.n	8005526 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	3320      	adds	r3, #32
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4403      	add	r3, r0
 80054e0:	331c      	adds	r3, #28
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4419      	add	r1, r3
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4403      	add	r3, r0
 80054f4:	3320      	adds	r3, #32
 80054f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d113      	bne.n	8005526 <HAL_PCD_IRQHandler+0x3a2>
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	3324      	adds	r3, #36	@ 0x24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800551e:	461a      	mov	r2, r3
 8005520:	2101      	movs	r1, #1
 8005522:	f004 fdf3 	bl	800a10c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	b2db      	uxtb	r3, r3
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 f8ca 	bl	800c6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	2308      	movs	r3, #8
 800554c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	d008      	beq.n	800556a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005564:	461a      	mov	r2, r3
 8005566:	2310      	movs	r3, #16
 8005568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	461a      	mov	r2, r3
 8005582:	2340      	movs	r3, #64	@ 0x40
 8005584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005592:	6a38      	ldr	r0, [r7, #32]
 8005594:	f003 fde0 	bl	8009158 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3310      	adds	r3, #16
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4413      	add	r3, r2
 80055a8:	3304      	adds	r3, #4
 80055aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	78db      	ldrb	r3, [r3, #3]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d108      	bne.n	80055c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f007 f90d 	bl	800c7e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d2:	461a      	mov	r2, r3
 80055d4:	2302      	movs	r3, #2
 80055d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fcbb 	bl	8005f60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	3301      	adds	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af2e 	bne.w	800545a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f004 fcbe 	bl	8009f84 <USB_ReadInterrupts>
 8005608:	4603      	mov	r3, r0
 800560a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800560e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005612:	d122      	bne.n	800565a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800562e:	2b01      	cmp	r3, #1
 8005630:	d108      	bne.n	8005644 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fea1 	bl	8006384 <HAL_PCDEx_LPM_Callback>
 8005642:	e002      	b.n	800564a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f007 f8ab 	bl	800c7a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f004 fc90 	bl	8009f84 <USB_ReadInterrupts>
 8005664:	4603      	mov	r3, r0
 8005666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566e:	d112      	bne.n	8005696 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d102      	bne.n	8005686 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f007 f867 	bl	800c754 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695a      	ldr	r2, [r3, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005694:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f004 fc72 	bl	8009f84 <USB_ReadInterrupts>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056aa:	f040 80b7 	bne.w	800581c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2110      	movs	r1, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f003 fd45 	bl	8009158 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	e046      	b.n	8005762 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	461a      	mov	r2, r3
 80056e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800571a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	440a      	add	r2, r1
 8005732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005736:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800573a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800575a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	3301      	adds	r3, #1
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	791b      	ldrb	r3, [r3, #4]
 8005766:	461a      	mov	r2, r3
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	4293      	cmp	r3, r2
 800576c:	d3b2      	bcc.n	80056d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005780:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7bdb      	ldrb	r3, [r3, #15]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800579a:	f043 030b 	orr.w	r3, r3, #11
 800579e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b0:	f043 030b 	orr.w	r3, r3, #11
 80057b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057b6:	e015      	b.n	80057e4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80057ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80057ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057de:	f043 030b 	orr.w	r3, r3, #11
 80057e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80057f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005806:	461a      	mov	r2, r3
 8005808:	f004 fc80 	bl	800a10c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800581a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f004 fbaf 	bl	8009f84 <USB_ReadInterrupts>
 8005826:	4603      	mov	r3, r0
 8005828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800582c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005830:	d123      	bne.n	800587a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f004 fc45 	bl	800a0c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f003 fd02 	bl	800924a <USB_GetDevSpeed>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681c      	ldr	r4, [r3, #0]
 8005852:	f001 f9c7 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8005856:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800585c:	461a      	mov	r2, r3
 800585e:	4620      	mov	r0, r4
 8005860:	f003 fa06 	bl	8008c70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f006 ff56 	bl	800c716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fb80 	bl	8009f84 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d10a      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f006 ff33 	bl	800c6fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 0208 	and.w	r2, r2, #8
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f004 fb6b 	bl	8009f84 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b4:	2b80      	cmp	r3, #128	@ 0x80
 80058b6:	d123      	bne.n	8005900 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c4:	2301      	movs	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c8:	e014      	b.n	80058f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb08 	bl	8005efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	3301      	adds	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	791b      	ldrb	r3, [r3, #4]
 80058f8:	461a      	mov	r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d3e4      	bcc.n	80058ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f004 fb3d 	bl	8009f84 <USB_ReadInterrupts>
 800590a:	4603      	mov	r3, r0
 800590c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005910:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005914:	d13c      	bne.n	8005990 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005916:	2301      	movs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
 800591a:	e02b      	b.n	8005974 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	4613      	mov	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	3318      	adds	r3, #24
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d115      	bne.n	800596e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005942:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005944:	2b00      	cmp	r3, #0
 8005946:	da12      	bge.n	800596e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	3317      	adds	r3, #23
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fac8 	bl	8005efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	461a      	mov	r2, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	4293      	cmp	r3, r2
 800597e:	d3cd      	bcc.n	800591c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800598e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f004 faf5 	bl	8009f84 <USB_ReadInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059a4:	d156      	bne.n	8005a54 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a6:	2301      	movs	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059aa:	e045      	b.n	8005a38 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d12e      	bne.n	8005a32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	da2b      	bge.n	8005a32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80059e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d121      	bne.n	8005a32 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a00:	2201      	movs	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a2e:	6053      	str	r3, [r2, #4]
            break;
 8005a30:	e008      	b.n	8005a44 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	3301      	adds	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	791b      	ldrb	r3, [r3, #4]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d3b3      	bcc.n	80059ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fa93 	bl	8009f84 <USB_ReadInterrupts>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a68:	d10a      	bne.n	8005a80 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f006 feca 	bl	800c804 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f004 fa7d 	bl	8009f84 <USB_ReadInterrupts>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d115      	bne.n	8005ac0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f006 feba 	bl	800c820 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	e000      	b.n	8005ac0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005abe:	bf00      	nop
    }
  }
}
 8005ac0:	3734      	adds	r7, #52	@ 0x34
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}

08005ac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_PCD_SetAddress+0x1a>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e012      	b.n	8005b06 <HAL_PCD_SetAddress+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f004 f9dc 	bl	8009eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	70fb      	strb	r3, [r7, #3]
 8005b20:	460b      	mov	r3, r1
 8005b22:	803b      	strh	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da0f      	bge.n	8005b54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	3310      	adds	r3, #16
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	705a      	strb	r2, [r3, #1]
 8005b52:	e00f      	b.n	8005b74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b80:	883a      	ldrh	r2, [r7, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	78ba      	ldrb	r2, [r7, #2]
 8005b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b9e:	78bb      	ldrb	r3, [r7, #2]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d102      	bne.n	8005baa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_PCD_EP_Open+0xaa>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e00e      	b.n	8005bd6 <HAL_PCD_EP_Open+0xc8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 fb64 	bl	8009294 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da0f      	bge.n	8005c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3310      	adds	r3, #16
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	705a      	strb	r2, [r3, #1]
 8005c10:	e00f      	b.n	8005c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_PCD_EP_Close+0x6e>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e00e      	b.n	8005c6a <HAL_PCD_EP_Close+0x8c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 fba2 	bl	80093a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	3304      	adds	r3, #4
 8005c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2200      	movs	r2, #0
 8005cac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	799b      	ldrb	r3, [r3, #6]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d102      	bne.n	8005cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	799b      	ldrb	r3, [r3, #6]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6979      	ldr	r1, [r7, #20]
 8005cda:	f003 fc3f 	bl	800955c <USB_EPStartXfer>

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	460b      	mov	r3, r1
 8005d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d28:	7afb      	ldrb	r3, [r7, #11]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	4613      	mov	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	3310      	adds	r3, #16
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2201      	movs	r2, #1
 8005d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	799b      	ldrb	r3, [r3, #6]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d102      	bne.n	8005d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	799b      	ldrb	r3, [r3, #6]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	f003 fbed 	bl	800955c <USB_EPStartXfer>

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	7912      	ldrb	r2, [r2, #4]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e04f      	b.n	8005e4a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da0f      	bge.n	8005dd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	3310      	adds	r3, #16
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	705a      	strb	r2, [r3, #1]
 8005dd0:	e00d      	b.n	8005dee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_PCD_EP_SetStall+0x82>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e01d      	b.n	8005e4a <HAL_PCD_EP_SetStall+0xbe>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f003 ff75 	bl	8009d0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7999      	ldrb	r1, [r3, #6]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f004 f966 	bl	800a10c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	7912      	ldrb	r2, [r2, #4]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d901      	bls.n	8005e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e042      	b.n	8005ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da0f      	bge.n	8005e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	3310      	adds	r3, #16
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	705a      	strb	r2, [r3, #1]
 8005e96:	e00f      	b.n	8005eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 020f 	and.w	r2, r3, #15
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	3304      	adds	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_PCD_EP_ClrStall+0x86>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e00e      	b.n	8005ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f003 ff7e 	bl	8009de8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	da0c      	bge.n	8005f2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	3310      	adds	r3, #16
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	3304      	adds	r3, #4
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e00c      	b.n	8005f46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	f003 020f 	and.w	r2, r3, #15
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	3304      	adds	r3, #4
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f003 fd9d 	bl	8009a8c <USB_EPStopXfer>
 8005f52:	4603      	mov	r3, r0
 8005f54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f56:	7afb      	ldrb	r3, [r7, #11]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	@ 0x28
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3310      	adds	r3, #16
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	3304      	adds	r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d901      	bls.n	8005f98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e06b      	b.n	8006070 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d902      	bls.n	8005fb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fbc:	e02a      	b.n	8006014 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d902      	bls.n	8005fda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3303      	adds	r3, #3
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68d9      	ldr	r1, [r3, #12]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	6978      	ldr	r0, [r7, #20]
 8005ff8:	f003 fdf2 	bl	8009be0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	441a      	add	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	429a      	cmp	r2, r3
 8006028:	d809      	bhi.n	800603e <PCD_WriteEmptyTxFifo+0xde>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006032:	429a      	cmp	r2, r3
 8006034:	d203      	bcs.n	800603e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1bf      	bne.n	8005fbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	429a      	cmp	r2, r3
 8006048:	d811      	bhi.n	800606e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	2201      	movs	r2, #1
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800605e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	43db      	mvns	r3, r3
 8006064:	6939      	ldr	r1, [r7, #16]
 8006066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800606a:	4013      	ands	r3, r2
 800606c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	333c      	adds	r3, #60	@ 0x3c
 8006090:	3304      	adds	r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	799b      	ldrb	r3, [r3, #6]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d17b      	bne.n	80061a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4a61      	ldr	r2, [pc, #388]	@ (8006240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	f240 80b9 	bls.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80b3 	beq.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	461a      	mov	r2, r3
 80060dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060e0:	6093      	str	r3, [r2, #8]
 80060e2:	e0a7      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2320      	movs	r3, #32
 80060fe:	6093      	str	r3, [r2, #8]
 8006100:	e098      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 8093 	bne.w	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4a4b      	ldr	r2, [pc, #300]	@ (8006240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d90f      	bls.n	8006136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612c:	461a      	mov	r2, r3
 800612e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006132:	6093      	str	r3, [r2, #8]
 8006134:	e07e      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	0159      	lsls	r1, r3, #5
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	440b      	add	r3, r1
 8006158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006162:	1ad2      	subs	r2, r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d114      	bne.n	8006198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006180:	461a      	mov	r2, r3
 8006182:	2101      	movs	r1, #1
 8006184:	f003 ffc2 	bl	800a10c <USB_EP0_OutStart>
 8006188:	e006      	b.n	8006198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f006 fa76 	bl	800c690 <HAL_PCD_DataOutStageCallback>
 80061a4:	e046      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4a26      	ldr	r2, [pc, #152]	@ (8006244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d124      	bne.n	80061f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c4:	461a      	mov	r2, r3
 80061c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ca:	6093      	str	r3, [r2, #8]
 80061cc:	e032      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	2320      	movs	r3, #32
 80061e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f006 fa4d 	bl	800c690 <HAL_PCD_DataOutStageCallback>
 80061f6:	e01d      	b.n	8006234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d114      	bne.n	8006228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006220:	461a      	mov	r2, r3
 8006222:	2100      	movs	r1, #0
 8006224:	f003 ff72 	bl	800a10c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f006 fa2e 	bl	800c690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	4f54300a 	.word	0x4f54300a
 8006244:	4f54310a 	.word	0x4f54310a

08006248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	333c      	adds	r3, #60	@ 0x3c
 8006260:	3304      	adds	r3, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d90e      	bls.n	800629c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006294:	461a      	mov	r2, r3
 8006296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f006 f9e5 	bl	800c66c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a0a      	ldr	r2, [pc, #40]	@ (80062d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d90c      	bls.n	80062c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	799b      	ldrb	r3, [r3, #6]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d108      	bne.n	80062c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062bc:	461a      	mov	r2, r3
 80062be:	2101      	movs	r1, #1
 80062c0:	f003 ff24 	bl	800a10c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	4f54300a 	.word	0x4f54300a

080062d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
 80062e0:	4613      	mov	r3, r2
 80062e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062f2:	883b      	ldrh	r3, [r7, #0]
 80062f4:	0419      	lsls	r1, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006300:	e028      	b.n	8006354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	e00d      	b.n	8006332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	3340      	adds	r3, #64	@ 0x40
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	3301      	adds	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	3b01      	subs	r3, #1
 8006338:	429a      	cmp	r2, r3
 800633a:	d3ec      	bcc.n	8006316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800633c:	883b      	ldrh	r3, [r7, #0]
 800633e:	0418      	lsls	r0, r3, #16
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	3b01      	subs	r3, #1
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4302      	orrs	r2, r0
 800634c:	3340      	adds	r3, #64	@ 0x40
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	887a      	ldrh	r2, [r7, #2]
 8006374:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e267      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d075      	beq.n	80064a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ba:	4b88      	ldr	r3, [pc, #544]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d00c      	beq.n	80063e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063c6:	4b85      	ldr	r3, [pc, #532]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d112      	bne.n	80063f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063d2:	4b82      	ldr	r3, [pc, #520]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063de:	d10b      	bne.n	80063f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	4b7e      	ldr	r3, [pc, #504]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d05b      	beq.n	80064a4 <HAL_RCC_OscConfig+0x108>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d157      	bne.n	80064a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e242      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006400:	d106      	bne.n	8006410 <HAL_RCC_OscConfig+0x74>
 8006402:	4b76      	ldr	r3, [pc, #472]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a75      	ldr	r2, [pc, #468]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e01d      	b.n	800644c <HAL_RCC_OscConfig+0xb0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006418:	d10c      	bne.n	8006434 <HAL_RCC_OscConfig+0x98>
 800641a:	4b70      	ldr	r3, [pc, #448]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6f      	ldr	r2, [pc, #444]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b6d      	ldr	r3, [pc, #436]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a6c      	ldr	r2, [pc, #432]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e00b      	b.n	800644c <HAL_RCC_OscConfig+0xb0>
 8006434:	4b69      	ldr	r3, [pc, #420]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a68      	ldr	r2, [pc, #416]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 800643a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b66      	ldr	r3, [pc, #408]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800644a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fd f912 	bl	800367c <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645c:	f7fd f90e 	bl	800367c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	@ 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e207      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646e:	4b5b      	ldr	r3, [pc, #364]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0xc0>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fd f8fe 	bl	800367c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006484:	f7fd f8fa 	bl	800367c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	@ 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e1f3      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006496:	4b51      	ldr	r3, [pc, #324]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0xe8>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d063      	beq.n	800657a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b2:	4b4a      	ldr	r3, [pc, #296]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064be:	4b47      	ldr	r3, [pc, #284]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d11c      	bne.n	8006504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ca:	4b44      	ldr	r3, [pc, #272]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d116      	bne.n	8006504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d6:	4b41      	ldr	r3, [pc, #260]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_RCC_OscConfig+0x152>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e1c7      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b3b      	ldr	r3, [pc, #236]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4937      	ldr	r1, [pc, #220]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006502:	e03a      	b.n	800657a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d020      	beq.n	800654e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800650c:	4b34      	ldr	r3, [pc, #208]	@ (80065e0 <HAL_RCC_OscConfig+0x244>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fd f8b3 	bl	800367c <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651a:	f7fd f8af 	bl	800367c <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1a8      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006538:	4b28      	ldr	r3, [pc, #160]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4925      	ldr	r1, [pc, #148]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]
 800654c:	e015      	b.n	800657a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654e:	4b24      	ldr	r3, [pc, #144]	@ (80065e0 <HAL_RCC_OscConfig+0x244>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fd f892 	bl	800367c <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655c:	f7fd f88e 	bl	800367c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e187      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800656e:	4b1b      	ldr	r3, [pc, #108]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d036      	beq.n	80065f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800658e:	4b15      	ldr	r3, [pc, #84]	@ (80065e4 <HAL_RCC_OscConfig+0x248>)
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fd f872 	bl	800367c <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659c:	f7fd f86e 	bl	800367c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e167      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <HAL_RCC_OscConfig+0x240>)
 80065b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x200>
 80065ba:	e01b      	b.n	80065f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065bc:	4b09      	ldr	r3, [pc, #36]	@ (80065e4 <HAL_RCC_OscConfig+0x248>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c2:	f7fd f85b 	bl	800367c <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c8:	e00e      	b.n	80065e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ca:	f7fd f857 	bl	800367c <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d907      	bls.n	80065e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e150      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
 80065dc:	40023800 	.word	0x40023800
 80065e0:	42470000 	.word	0x42470000
 80065e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e8:	4b88      	ldr	r3, [pc, #544]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80065ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ea      	bne.n	80065ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8097 	beq.w	8006730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006606:	4b81      	ldr	r3, [pc, #516]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10f      	bne.n	8006632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	4b7d      	ldr	r3, [pc, #500]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	4a7c      	ldr	r2, [pc, #496]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006620:	6413      	str	r3, [r2, #64]	@ 0x40
 8006622:	4b7a      	ldr	r3, [pc, #488]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662e:	2301      	movs	r3, #1
 8006630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	4b77      	ldr	r3, [pc, #476]	@ (8006810 <HAL_RCC_OscConfig+0x474>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d118      	bne.n	8006670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800663e:	4b74      	ldr	r3, [pc, #464]	@ (8006810 <HAL_RCC_OscConfig+0x474>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a73      	ldr	r2, [pc, #460]	@ (8006810 <HAL_RCC_OscConfig+0x474>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664a:	f7fd f817 	bl	800367c <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006652:	f7fd f813 	bl	800367c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e10c      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006664:	4b6a      	ldr	r3, [pc, #424]	@ (8006810 <HAL_RCC_OscConfig+0x474>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <HAL_RCC_OscConfig+0x2ea>
 8006678:	4b64      	ldr	r3, [pc, #400]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800667a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667c:	4a63      	ldr	r2, [pc, #396]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6713      	str	r3, [r2, #112]	@ 0x70
 8006684:	e01c      	b.n	80066c0 <HAL_RCC_OscConfig+0x324>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b05      	cmp	r3, #5
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x30c>
 800668e:	4b5f      	ldr	r3, [pc, #380]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	4a5e      	ldr	r2, [pc, #376]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006694:	f043 0304 	orr.w	r3, r3, #4
 8006698:	6713      	str	r3, [r2, #112]	@ 0x70
 800669a:	4b5c      	ldr	r3, [pc, #368]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	4a5b      	ldr	r2, [pc, #364]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a6:	e00b      	b.n	80066c0 <HAL_RCC_OscConfig+0x324>
 80066a8:	4b58      	ldr	r3, [pc, #352]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ac:	4a57      	ldr	r2, [pc, #348]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b4:	4b55      	ldr	r3, [pc, #340]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b8:	4a54      	ldr	r2, [pc, #336]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066ba:	f023 0304 	bic.w	r3, r3, #4
 80066be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d015      	beq.n	80066f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fc ffd8 	bl	800367c <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ce:	e00a      	b.n	80066e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d0:	f7fc ffd4 	bl	800367c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e0cb      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e6:	4b49      	ldr	r3, [pc, #292]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ee      	beq.n	80066d0 <HAL_RCC_OscConfig+0x334>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f4:	f7fc ffc2 	bl	800367c <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fa:	e00a      	b.n	8006712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fc:	f7fc ffbe 	bl	800367c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670a:	4293      	cmp	r3, r2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e0b5      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006712:	4b3e      	ldr	r3, [pc, #248]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ee      	bne.n	80066fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800671e:	7dfb      	ldrb	r3, [r7, #23]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006724:	4b39      	ldr	r3, [pc, #228]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	4a38      	ldr	r2, [pc, #224]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800672a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800672e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a1 	beq.w	800687c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800673a:	4b34      	ldr	r3, [pc, #208]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b08      	cmp	r3, #8
 8006744:	d05c      	beq.n	8006800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d141      	bne.n	80067d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674e:	4b31      	ldr	r3, [pc, #196]	@ (8006814 <HAL_RCC_OscConfig+0x478>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006754:	f7fc ff92 	bl	800367c <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675c:	f7fc ff8e 	bl	800367c <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e087      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676e:	4b27      	ldr	r3, [pc, #156]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	019b      	lsls	r3, r3, #6
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	3b01      	subs	r3, #1
 8006794:	041b      	lsls	r3, r3, #16
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	061b      	lsls	r3, r3, #24
 800679e:	491b      	ldr	r1, [pc, #108]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006814 <HAL_RCC_OscConfig+0x478>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fc ff67 	bl	800367c <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fc ff63 	bl	800367c <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e05c      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c4:	4b11      	ldr	r3, [pc, #68]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x416>
 80067d0:	e054      	b.n	800687c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b10      	ldr	r3, [pc, #64]	@ (8006814 <HAL_RCC_OscConfig+0x478>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fc ff50 	bl	800367c <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fc ff4c 	bl	800367c <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e045      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f2:	4b06      	ldr	r3, [pc, #24]	@ (800680c <HAL_RCC_OscConfig+0x470>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x444>
 80067fe:	e03d      	b.n	800687c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e038      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
 800680c:	40023800 	.word	0x40023800
 8006810:	40007000 	.word	0x40007000
 8006814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006818:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <HAL_RCC_OscConfig+0x4ec>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d028      	beq.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d121      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683e:	429a      	cmp	r2, r3
 8006840:	d11a      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006848:	4013      	ands	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800684e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006850:	4293      	cmp	r3, r2
 8006852:	d111      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	3b01      	subs	r3, #1
 8006862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006864:	429a      	cmp	r2, r3
 8006866:	d107      	bne.n	8006878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40023800 	.word	0x40023800

0800688c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0cc      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a0:	4b68      	ldr	r3, [pc, #416]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d90c      	bls.n	80068c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ae:	4b65      	ldr	r3, [pc, #404]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	4b63      	ldr	r3, [pc, #396]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0b8      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d020      	beq.n	8006916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e0:	4b59      	ldr	r3, [pc, #356]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a58      	ldr	r2, [pc, #352]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f8:	4b53      	ldr	r3, [pc, #332]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a52      	ldr	r2, [pc, #328]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006904:	4b50      	ldr	r3, [pc, #320]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	494d      	ldr	r1, [pc, #308]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d044      	beq.n	80069ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	4b47      	ldr	r3, [pc, #284]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d119      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e07f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d003      	beq.n	800694a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006946:	2b03      	cmp	r3, #3
 8006948:	d107      	bne.n	800695a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800694a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e06f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e067      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800696a:	4b37      	ldr	r3, [pc, #220]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f023 0203 	bic.w	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4934      	ldr	r1, [pc, #208]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	4313      	orrs	r3, r2
 800697a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800697c:	f7fc fe7e 	bl	800367c <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006982:	e00a      	b.n	800699a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006984:	f7fc fe7a 	bl	800367c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e04f      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699a:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 020c 	and.w	r2, r3, #12
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d1eb      	bne.n	8006984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ac:	4b25      	ldr	r3, [pc, #148]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d20c      	bcs.n	80069d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ba:	4b22      	ldr	r3, [pc, #136]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c2:	4b20      	ldr	r3, [pc, #128]	@ (8006a44 <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e032      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e0:	4b19      	ldr	r3, [pc, #100]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4916      	ldr	r1, [pc, #88]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069fe:	4b12      	ldr	r3, [pc, #72]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	490e      	ldr	r1, [pc, #56]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a12:	f000 f821 	bl	8006a58 <HAL_RCC_GetSysClockFreq>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b0b      	ldr	r3, [pc, #44]	@ (8006a48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	091b      	lsrs	r3, r3, #4
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	490a      	ldr	r1, [pc, #40]	@ (8006a4c <HAL_RCC_ClockConfig+0x1c0>)
 8006a24:	5ccb      	ldrb	r3, [r1, r3]
 8006a26:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2a:	4a09      	ldr	r2, [pc, #36]	@ (8006a50 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a2e:	4b09      	ldr	r3, [pc, #36]	@ (8006a54 <HAL_RCC_ClockConfig+0x1c8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fc fdde 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40023c00 	.word	0x40023c00
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	08010674 	.word	0x08010674
 8006a50:	20000004 	.word	0x20000004
 8006a54:	20000008 	.word	0x20000008

08006a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a5c:	b090      	sub	sp, #64	@ 0x40
 8006a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a64:	2300      	movs	r3, #0
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a68:	2300      	movs	r3, #0
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a70:	4b59      	ldr	r3, [pc, #356]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d00d      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x40>
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	f200 80a1 	bhi.w	8006bc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x34>
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d003      	beq.n	8006a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a8a:	e09b      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a8c:	4b53      	ldr	r3, [pc, #332]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006a90:	e09b      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a92:	4b53      	ldr	r3, [pc, #332]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a96:	e098      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a98:	4b4f      	ldr	r3, [pc, #316]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d028      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aae:	4b4a      	ldr	r3, [pc, #296]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4b47      	ldr	r3, [pc, #284]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ac4:	fb03 f201 	mul.w	r2, r3, r1
 8006ac8:	2300      	movs	r3, #0
 8006aca:	fb00 f303 	mul.w	r3, r0, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	4a43      	ldr	r2, [pc, #268]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8006ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad8:	460a      	mov	r2, r1
 8006ada:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ade:	4413      	add	r3, r2
 8006ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	61fa      	str	r2, [r7, #28]
 8006aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006af2:	f7fa f881 	bl	8000bf8 <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4613      	mov	r3, r2
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006afe:	e053      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b00:	4b35      	ldr	r3, [pc, #212]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	099b      	lsrs	r3, r3, #6
 8006b06:	2200      	movs	r2, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	617a      	str	r2, [r7, #20]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	4652      	mov	r2, sl
 8006b18:	465b      	mov	r3, fp
 8006b1a:	f04f 0000 	mov.w	r0, #0
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	0159      	lsls	r1, r3, #5
 8006b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b28:	0150      	lsls	r0, r2, #5
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	ebb2 080a 	subs.w	r8, r2, sl
 8006b32:	eb63 090b 	sbc.w	r9, r3, fp
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b4a:	ebb2 0408 	subs.w	r4, r2, r8
 8006b4e:	eb63 0509 	sbc.w	r5, r3, r9
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	00eb      	lsls	r3, r5, #3
 8006b5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b60:	00e2      	lsls	r2, r4, #3
 8006b62:	4614      	mov	r4, r2
 8006b64:	461d      	mov	r5, r3
 8006b66:	eb14 030a 	adds.w	r3, r4, sl
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	eb45 030b 	adc.w	r3, r5, fp
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b7e:	4629      	mov	r1, r5
 8006b80:	028b      	lsls	r3, r1, #10
 8006b82:	4621      	mov	r1, r4
 8006b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b88:	4621      	mov	r1, r4
 8006b8a:	028a      	lsls	r2, r1, #10
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b92:	2200      	movs	r2, #0
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	60fa      	str	r2, [r7, #12]
 8006b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b9c:	f7fa f82c 	bl	8000bf8 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	0c1b      	lsrs	r3, r3, #16
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x184>)
 8006bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3740      	adds	r7, #64	@ 0x40
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	00f42400 	.word	0x00f42400
 8006be0:	017d7840 	.word	0x017d7840

08006be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be8:	4b03      	ldr	r3, [pc, #12]	@ (8006bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bea:	681b      	ldr	r3, [r3, #0]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000004 	.word	0x20000004

08006bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c00:	f7ff fff0 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0a9b      	lsrs	r3, r3, #10
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	08010684 	.word	0x08010684

08006c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c28:	f7ff ffdc 	bl	8006be4 <HAL_RCC_GetHCLKFreq>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0b5b      	lsrs	r3, r3, #13
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	4903      	ldr	r1, [pc, #12]	@ (8006c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c3a:	5ccb      	ldrb	r3, [r1, r3]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40023800 	.word	0x40023800
 8006c48:	08010684 	.word	0x08010684

08006c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e041      	b.n	8006ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc fa5c 	bl	8003130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 fc96 	bl	80075bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e03c      	b.n	8006d7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1e      	ldr	r2, [pc, #120]	@ (8006d8c <HAL_TIM_Base_Start+0xa0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	d013      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1a      	ldr	r2, [pc, #104]	@ (8006d90 <HAL_TIM_Base_Start+0xa4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a19      	ldr	r2, [pc, #100]	@ (8006d94 <HAL_TIM_Base_Start+0xa8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a17      	ldr	r2, [pc, #92]	@ (8006d98 <HAL_TIM_Base_Start+0xac>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIM_Base_Start+0x5c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a16      	ldr	r2, [pc, #88]	@ (8006d9c <HAL_TIM_Base_Start+0xb0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d111      	bne.n	8006d6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	d010      	beq.n	8006d7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e007      	b.n	8006d7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40014000 	.word	0x40014000

08006da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d001      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e044      	b.n	8006e42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e50 <HAL_TIM_Base_Start_IT+0xb0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x6c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de2:	d013      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x6c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1a      	ldr	r2, [pc, #104]	@ (8006e54 <HAL_TIM_Base_Start_IT+0xb4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x6c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_TIM_Base_Start_IT+0xb8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x6c>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a17      	ldr	r2, [pc, #92]	@ (8006e5c <HAL_TIM_Base_Start_IT+0xbc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x6c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d111      	bne.n	8006e30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d010      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0201 	orr.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	e007      	b.n	8006e40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40014000 	.word	0x40014000

08006e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e041      	b.n	8006efa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f839 	bl	8006f02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 fb8a 	bl	80075bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <HAL_TIM_PWM_Start+0x24>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	e022      	b.n	8006f82 <HAL_TIM_PWM_Start+0x6a>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d109      	bne.n	8006f56 <HAL_TIM_PWM_Start+0x3e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	e015      	b.n	8006f82 <HAL_TIM_PWM_Start+0x6a>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d109      	bne.n	8006f70 <HAL_TIM_PWM_Start+0x58>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e008      	b.n	8006f82 <HAL_TIM_PWM_Start+0x6a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e068      	b.n	800705c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Start+0x82>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f98:	e013      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xaa>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0x92>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fa8:	e00b      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xaa>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_PWM_Start+0xa2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fb8:	e003      	b.n	8006fc2 <HAL_TIM_PWM_Start+0xaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fda8 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	@ (8007064 <HAL_TIM_PWM_Start+0x14c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d107      	bne.n	8006fea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	@ (8007064 <HAL_TIM_PWM_Start+0x14c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_TIM_PWM_Start+0x10e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffc:	d013      	beq.n	8007026 <HAL_TIM_PWM_Start+0x10e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a19      	ldr	r2, [pc, #100]	@ (8007068 <HAL_TIM_PWM_Start+0x150>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_TIM_PWM_Start+0x10e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	@ (800706c <HAL_TIM_PWM_Start+0x154>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_TIM_PWM_Start+0x10e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a16      	ldr	r2, [pc, #88]	@ (8007070 <HAL_TIM_PWM_Start+0x158>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_TIM_PWM_Start+0x10e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a14      	ldr	r2, [pc, #80]	@ (8007074 <HAL_TIM_PWM_Start+0x15c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d010      	beq.n	800705a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007048:	e007      	b.n	800705a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40014000 	.word	0x40014000

08007078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d020      	beq.n	80070dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01b      	beq.n	80070dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0202 	mvn.w	r2, #2
 80070ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa5b 	bl	800757e <HAL_TIM_IC_CaptureCallback>
 80070c8:	e005      	b.n	80070d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fa4d 	bl	800756a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa5e 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01b      	beq.n	8007128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0204 	mvn.w	r2, #4
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa35 	bl	800757e <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa27 	bl	800756a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa38 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d020      	beq.n	8007174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0208 	mvn.w	r2, #8
 8007144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2204      	movs	r2, #4
 800714a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa0f 	bl	800757e <HAL_TIM_IC_CaptureCallback>
 8007160:	e005      	b.n	800716e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa01 	bl	800756a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa12 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b00      	cmp	r3, #0
 800717c:	d020      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01b      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0210 	mvn.w	r2, #16
 8007190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2208      	movs	r2, #8
 8007196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9e9 	bl	800757e <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9db 	bl	800756a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f9ec 	bl	8007592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0201 	mvn.w	r2, #1
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fb f81a 	bl	8002218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fd7c 	bl	8007d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00c      	beq.n	800722c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9bd 	bl	80075a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0220 	mvn.w	r2, #32
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fd4e 	bl	8007cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007272:	2302      	movs	r3, #2
 8007274:	e0ae      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b0c      	cmp	r3, #12
 8007282:	f200 809f 	bhi.w	80073c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007286:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	080072c1 	.word	0x080072c1
 8007290:	080073c5 	.word	0x080073c5
 8007294:	080073c5 	.word	0x080073c5
 8007298:	080073c5 	.word	0x080073c5
 800729c:	08007301 	.word	0x08007301
 80072a0:	080073c5 	.word	0x080073c5
 80072a4:	080073c5 	.word	0x080073c5
 80072a8:	080073c5 	.word	0x080073c5
 80072ac:	08007343 	.word	0x08007343
 80072b0:	080073c5 	.word	0x080073c5
 80072b4:	080073c5 	.word	0x080073c5
 80072b8:	080073c5 	.word	0x080073c5
 80072bc:	08007383 	.word	0x08007383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fa04 	bl	80076d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0208 	orr.w	r2, r2, #8
 80072da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0204 	bic.w	r2, r2, #4
 80072ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6999      	ldr	r1, [r3, #24]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	619a      	str	r2, [r3, #24]
      break;
 80072fe:	e064      	b.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fa4a 	bl	80077a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800731a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6999      	ldr	r1, [r3, #24]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	021a      	lsls	r2, r3, #8
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	619a      	str	r2, [r3, #24]
      break;
 8007340:	e043      	b.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fa95 	bl	8007878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0208 	orr.w	r2, r2, #8
 800735c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0204 	bic.w	r2, r2, #4
 800736c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69d9      	ldr	r1, [r3, #28]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	691a      	ldr	r2, [r3, #16]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	61da      	str	r2, [r3, #28]
      break;
 8007380:	e023      	b.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fadf 	bl	800794c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800739c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69d9      	ldr	r1, [r3, #28]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	021a      	lsls	r2, r3, #8
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	61da      	str	r2, [r3, #28]
      break;
 80073c2:	e002      	b.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
      break;
 80073c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIM_ConfigClockSource+0x1c>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e0b4      	b.n	8007562 <HAL_TIM_ConfigClockSource+0x186>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800741e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007430:	d03e      	beq.n	80074b0 <HAL_TIM_ConfigClockSource+0xd4>
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007436:	f200 8087 	bhi.w	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743e:	f000 8086 	beq.w	800754e <HAL_TIM_ConfigClockSource+0x172>
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007446:	d87f      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007448:	2b70      	cmp	r3, #112	@ 0x70
 800744a:	d01a      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0xa6>
 800744c:	2b70      	cmp	r3, #112	@ 0x70
 800744e:	d87b      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007450:	2b60      	cmp	r3, #96	@ 0x60
 8007452:	d050      	beq.n	80074f6 <HAL_TIM_ConfigClockSource+0x11a>
 8007454:	2b60      	cmp	r3, #96	@ 0x60
 8007456:	d877      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007458:	2b50      	cmp	r3, #80	@ 0x50
 800745a:	d03c      	beq.n	80074d6 <HAL_TIM_ConfigClockSource+0xfa>
 800745c:	2b50      	cmp	r3, #80	@ 0x50
 800745e:	d873      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007460:	2b40      	cmp	r3, #64	@ 0x40
 8007462:	d058      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x13a>
 8007464:	2b40      	cmp	r3, #64	@ 0x40
 8007466:	d86f      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007468:	2b30      	cmp	r3, #48	@ 0x30
 800746a:	d064      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x15a>
 800746c:	2b30      	cmp	r3, #48	@ 0x30
 800746e:	d86b      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007470:	2b20      	cmp	r3, #32
 8007472:	d060      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x15a>
 8007474:	2b20      	cmp	r3, #32
 8007476:	d867      	bhi.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05c      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x15a>
 800747c:	2b10      	cmp	r3, #16
 800747e:	d05a      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x15a>
 8007480:	e062      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007492:	f000 fb25 	bl	8007ae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80074a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	609a      	str	r2, [r3, #8]
      break;
 80074ae:	e04f      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074c0:	f000 fb0e 	bl	8007ae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074d2:	609a      	str	r2, [r3, #8]
      break;
 80074d4:	e03c      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	461a      	mov	r2, r3
 80074e4:	f000 fa82 	bl	80079ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2150      	movs	r1, #80	@ 0x50
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fadb 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 80074f4:	e02c      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007502:	461a      	mov	r2, r3
 8007504:	f000 faa1 	bl	8007a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2160      	movs	r1, #96	@ 0x60
 800750e:	4618      	mov	r0, r3
 8007510:	f000 facb 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007514:	e01c      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007522:	461a      	mov	r2, r3
 8007524:	f000 fa62 	bl	80079ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2140      	movs	r1, #64	@ 0x40
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fabb 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007534:	e00c      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f000 fab2 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007546:	e003      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
      break;
 800754c:	e000      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800754e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3a      	ldr	r2, [pc, #232]	@ (80076b8 <TIM_Base_SetConfig+0xfc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00f      	beq.n	80075f4 <TIM_Base_SetConfig+0x38>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075da:	d00b      	beq.n	80075f4 <TIM_Base_SetConfig+0x38>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a37      	ldr	r2, [pc, #220]	@ (80076bc <TIM_Base_SetConfig+0x100>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d007      	beq.n	80075f4 <TIM_Base_SetConfig+0x38>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a36      	ldr	r2, [pc, #216]	@ (80076c0 <TIM_Base_SetConfig+0x104>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_Base_SetConfig+0x38>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a35      	ldr	r2, [pc, #212]	@ (80076c4 <TIM_Base_SetConfig+0x108>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d108      	bne.n	8007606 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a2b      	ldr	r2, [pc, #172]	@ (80076b8 <TIM_Base_SetConfig+0xfc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01b      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007614:	d017      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a28      	ldr	r2, [pc, #160]	@ (80076bc <TIM_Base_SetConfig+0x100>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a27      	ldr	r2, [pc, #156]	@ (80076c0 <TIM_Base_SetConfig+0x104>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00f      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a26      	ldr	r2, [pc, #152]	@ (80076c4 <TIM_Base_SetConfig+0x108>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00b      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a25      	ldr	r2, [pc, #148]	@ (80076c8 <TIM_Base_SetConfig+0x10c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d007      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a24      	ldr	r2, [pc, #144]	@ (80076cc <TIM_Base_SetConfig+0x110>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d003      	beq.n	8007646 <TIM_Base_SetConfig+0x8a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a23      	ldr	r2, [pc, #140]	@ (80076d0 <TIM_Base_SetConfig+0x114>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d108      	bne.n	8007658 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800764c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a0e      	ldr	r2, [pc, #56]	@ (80076b8 <TIM_Base_SetConfig+0xfc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d103      	bne.n	800768c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d105      	bne.n	80076aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f023 0201 	bic.w	r2, r3, #1
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]
  }
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010000 	.word	0x40010000
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800

080076d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 0201 	bic.w	r2, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f023 0302 	bic.w	r3, r3, #2
 800771c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <TIM_OC1_SetConfig+0xc8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d10c      	bne.n	800774a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0308 	bic.w	r3, r3, #8
 8007736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 0304 	bic.w	r3, r3, #4
 8007748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a13      	ldr	r2, [pc, #76]	@ (800779c <TIM_OC1_SetConfig+0xc8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d111      	bne.n	8007776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	40010000 	.word	0x40010000

080077a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f023 0210 	bic.w	r2, r3, #16
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0320 	bic.w	r3, r3, #32
 80077ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007874 <TIM_OC2_SetConfig+0xd4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10d      	bne.n	800781c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800781a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <TIM_OC2_SetConfig+0xd4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d113      	bne.n	800784c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800782a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000

08007878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007948 <TIM_OC3_SetConfig+0xd0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d10d      	bne.n	80078f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a14      	ldr	r2, [pc, #80]	@ (8007948 <TIM_OC3_SetConfig+0xd0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d113      	bne.n	8007922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	621a      	str	r2, [r3, #32]
}
 800793c:	bf00      	nop
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40010000 	.word	0x40010000

0800794c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a10      	ldr	r2, [pc, #64]	@ (80079e8 <TIM_OC4_SetConfig+0x9c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d109      	bne.n	80079c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000

080079ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f023 0201 	bic.w	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 030a 	bic.w	r3, r3, #10
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b087      	sub	sp, #28
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f023 0210 	bic.w	r2, r3, #16
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f043 0307 	orr.w	r3, r3, #7
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e050      	b.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d018      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd0:	d013      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a18      	ldr	r2, [pc, #96]	@ (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00e      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a16      	ldr	r2, [pc, #88]	@ (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a13      	ldr	r2, [pc, #76]	@ (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10c      	bne.n	8007c14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	40014000 	.word	0x40014000

08007c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e03d      	b.n	8007ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e042      	b.n	8007dac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fb fa76 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2224      	movs	r2, #36	@ 0x24
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fb87 	bl	800846c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695a      	ldr	r2, [r3, #20]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b0ba      	sub	sp, #232	@ 0xe8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_UART_IRQHandler+0x66>
 8007e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb1e 	bl	8008454 <UART_Receive_IT>
      return;
 8007e18:	e25b      	b.n	80082d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80de 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x22c>
 8007e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80d1 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <HAL_UART_IRQHandler+0xae>
 8007e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <HAL_UART_IRQHandler+0xd2>
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_UART_IRQHandler+0xf6>
 8007e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea2:	f043 0204 	orr.w	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <HAL_UART_IRQHandler+0x126>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed2:	f043 0208 	orr.w	r2, r3, #8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 81f2 	beq.w	80082c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d008      	beq.n	8007f02 <HAL_UART_IRQHandler+0x14e>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 faa9 	bl	8008454 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <HAL_UART_IRQHandler+0x17a>
 8007f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d04f      	beq.n	8007fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9f2 	bl	8008318 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d141      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3314      	adds	r3, #20
 8007f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1d9      	bne.n	8007f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d013      	beq.n	8007fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8008194 <HAL_UART_IRQHandler+0x3e0>)
 8007f9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc fa0a 	bl	80043bc <HAL_DMA_Abort_IT>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d016      	beq.n	8007fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	e00e      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f994 	bl	80082ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	e00a      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f990 	bl	80082ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	e006      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f98c 	bl	80082ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007fda:	e175      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	bf00      	nop
    return;
 8007fde:	e173      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 814f 	bne.w	8008288 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8148 	beq.w	8008288 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8141 	beq.w	8008288 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008026:	2b40      	cmp	r3, #64	@ 0x40
 8008028:	f040 80b6 	bne.w	8008198 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8145 	beq.w	80082cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800804a:	429a      	cmp	r2, r3
 800804c:	f080 813e 	bcs.w	80082cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008056:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008062:	f000 8088 	beq.w	8008176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800807c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800809e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1d9      	bne.n	8008066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3314      	adds	r3, #20
 80080b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3314      	adds	r3, #20
 80080d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e1      	bne.n	80080b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008112:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e3      	bne.n	80080ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008158:	65ba      	str	r2, [r7, #88]	@ 0x58
 800815a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800815e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e3      	bne.n	8008134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008170:	4618      	mov	r0, r3
 8008172:	f7fc f8b3 	bl	80042dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008184:	b29b      	uxth	r3, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	b29b      	uxth	r3, r3
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f8b7 	bl	8008300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008192:	e09b      	b.n	80082cc <HAL_UART_IRQHandler+0x518>
 8008194:	080083df 	.word	0x080083df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 808e 	beq.w	80082d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8089 	beq.w	80082d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80081e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e3      	bne.n	80081be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3314      	adds	r3, #20
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	623b      	str	r3, [r7, #32]
   return(result);
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	f023 0301 	bic.w	r3, r3, #1
 800820c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3314      	adds	r3, #20
 8008216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800821a:	633a      	str	r2, [r7, #48]	@ 0x30
 800821c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e3      	bne.n	80081f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	330c      	adds	r3, #12
 8008242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	60fb      	str	r3, [r7, #12]
   return(result);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0310 	bic.w	r3, r3, #16
 8008252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008260:	61fa      	str	r2, [r7, #28]
 8008262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	69b9      	ldr	r1, [r7, #24]
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	617b      	str	r3, [r7, #20]
   return(result);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e3      	bne.n	800823c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800827a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f83d 	bl	8008300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008286:	e023      	b.n	80082d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800828c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008290:	2b00      	cmp	r3, #0
 8008292:	d009      	beq.n	80082a8 <HAL_UART_IRQHandler+0x4f4>
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f8b0 	bl	8008406 <UART_Transmit_IT>
    return;
 80082a6:	e014      	b.n	80082d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <HAL_UART_IRQHandler+0x51e>
 80082b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f8ac 	bl	800841e <UART_EndTransmit_IT>
    return;
 80082c6:	e004      	b.n	80082d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80082c8:	bf00      	nop
 80082ca:	e002      	b.n	80082d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082cc:	bf00      	nop
 80082ce:	e000      	b.n	80082d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082d0:	bf00      	nop
  }
}
 80082d2:	37e8      	adds	r7, #232	@ 0xe8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b095      	sub	sp, #84	@ 0x54
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	330c      	adds	r3, #12
 800833e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008340:	643a      	str	r2, [r7, #64]	@ 0x40
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e5      	bne.n	8008320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3314      	adds	r3, #20
 800835a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	61fb      	str	r3, [r7, #28]
   return(result);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3314      	adds	r3, #20
 8008372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800837a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e5      	bne.n	8008354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	d119      	bne.n	80083c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	330c      	adds	r3, #12
 8008396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0310 	bic.w	r3, r3, #16
 80083a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083b0:	61ba      	str	r2, [r7, #24]
 80083b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	6979      	ldr	r1, [r7, #20]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	613b      	str	r3, [r7, #16]
   return(result);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e5      	bne.n	8008390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083d2:	bf00      	nop
 80083d4:	3754      	adds	r7, #84	@ 0x54
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7ff ff77 	bl	80082ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
	transmit_IT(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fb90 	bl	8008b34 <transmit_IT>
	return HAL_OK;
 8008414:	2300      	movs	r3, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008434:	60da      	str	r2, [r3, #12]
	endTransmit(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb28 	bl	8008a8c <endTransmit>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ff47 	bl	80082d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

  receive_IT(huart);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb2f 	bl	8008ac0 <receive_IT>
	return HAL_OK;
 8008462:	2300      	movs	r3, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800846c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008470:	b0c0      	sub	sp, #256	@ 0x100
 8008472:	af00      	add	r7, sp, #0
 8008474:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	68d9      	ldr	r1, [r3, #12]
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	ea40 0301 	orr.w	r3, r0, r1
 8008494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084c4:	f021 010c 	bic.w	r1, r1, #12
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084d2:	430b      	orrs	r3, r1
 80084d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e6:	6999      	ldr	r1, [r3, #24]
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	ea40 0301 	orr.w	r3, r0, r1
 80084f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008738 <UART_SetConfig+0x2cc>)
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d005      	beq.n	800850c <UART_SetConfig+0xa0>
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b8d      	ldr	r3, [pc, #564]	@ (800873c <UART_SetConfig+0x2d0>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d104      	bne.n	8008516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800850c:	f7fe fb8a 	bl	8006c24 <HAL_RCC_GetPCLK2Freq>
 8008510:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008514:	e003      	b.n	800851e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008516:	f7fe fb71 	bl	8006bfc <HAL_RCC_GetPCLK1Freq>
 800851a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008528:	f040 810c 	bne.w	8008744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800852c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008530:	2200      	movs	r2, #0
 8008532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008536:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800853a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800853e:	4622      	mov	r2, r4
 8008540:	462b      	mov	r3, r5
 8008542:	1891      	adds	r1, r2, r2
 8008544:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008546:	415b      	adcs	r3, r3
 8008548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800854a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800854e:	4621      	mov	r1, r4
 8008550:	eb12 0801 	adds.w	r8, r2, r1
 8008554:	4629      	mov	r1, r5
 8008556:	eb43 0901 	adc.w	r9, r3, r1
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800856a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800856e:	4690      	mov	r8, r2
 8008570:	4699      	mov	r9, r3
 8008572:	4623      	mov	r3, r4
 8008574:	eb18 0303 	adds.w	r3, r8, r3
 8008578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800857c:	462b      	mov	r3, r5
 800857e:	eb49 0303 	adc.w	r3, r9, r3
 8008582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008592:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800859a:	460b      	mov	r3, r1
 800859c:	18db      	adds	r3, r3, r3
 800859e:	653b      	str	r3, [r7, #80]	@ 0x50
 80085a0:	4613      	mov	r3, r2
 80085a2:	eb42 0303 	adc.w	r3, r2, r3
 80085a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80085a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085b0:	f7f8 fb22 	bl	8000bf8 <__aeabi_uldivmod>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4b61      	ldr	r3, [pc, #388]	@ (8008740 <UART_SetConfig+0x2d4>)
 80085ba:	fba3 2302 	umull	r2, r3, r3, r2
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	011c      	lsls	r4, r3, #4
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	1891      	adds	r1, r2, r2
 80085da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085dc:	415b      	adcs	r3, r3
 80085de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085e4:	4641      	mov	r1, r8
 80085e6:	eb12 0a01 	adds.w	sl, r2, r1
 80085ea:	4649      	mov	r1, r9
 80085ec:	eb43 0b01 	adc.w	fp, r3, r1
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008604:	4692      	mov	sl, r2
 8008606:	469b      	mov	fp, r3
 8008608:	4643      	mov	r3, r8
 800860a:	eb1a 0303 	adds.w	r3, sl, r3
 800860e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008612:	464b      	mov	r3, r9
 8008614:	eb4b 0303 	adc.w	r3, fp, r3
 8008618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800861c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800862c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008630:	460b      	mov	r3, r1
 8008632:	18db      	adds	r3, r3, r3
 8008634:	643b      	str	r3, [r7, #64]	@ 0x40
 8008636:	4613      	mov	r3, r2
 8008638:	eb42 0303 	adc.w	r3, r2, r3
 800863c:	647b      	str	r3, [r7, #68]	@ 0x44
 800863e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008646:	f7f8 fad7 	bl	8000bf8 <__aeabi_uldivmod>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	4611      	mov	r1, r2
 8008650:	4b3b      	ldr	r3, [pc, #236]	@ (8008740 <UART_SetConfig+0x2d4>)
 8008652:	fba3 2301 	umull	r2, r3, r3, r1
 8008656:	095b      	lsrs	r3, r3, #5
 8008658:	2264      	movs	r2, #100	@ 0x64
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	1acb      	subs	r3, r1, r3
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008666:	4b36      	ldr	r3, [pc, #216]	@ (8008740 <UART_SetConfig+0x2d4>)
 8008668:	fba3 2302 	umull	r2, r3, r3, r2
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008674:	441c      	add	r4, r3
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008680:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	1891      	adds	r1, r2, r2
 800868e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008690:	415b      	adcs	r3, r3
 8008692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008698:	4641      	mov	r1, r8
 800869a:	1851      	adds	r1, r2, r1
 800869c:	6339      	str	r1, [r7, #48]	@ 0x30
 800869e:	4649      	mov	r1, r9
 80086a0:	414b      	adcs	r3, r1
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086b0:	4659      	mov	r1, fp
 80086b2:	00cb      	lsls	r3, r1, #3
 80086b4:	4651      	mov	r1, sl
 80086b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ba:	4651      	mov	r1, sl
 80086bc:	00ca      	lsls	r2, r1, #3
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	4642      	mov	r2, r8
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086cc:	464b      	mov	r3, r9
 80086ce:	460a      	mov	r2, r1
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086ec:	460b      	mov	r3, r1
 80086ee:	18db      	adds	r3, r3, r3
 80086f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086f2:	4613      	mov	r3, r2
 80086f4:	eb42 0303 	adc.w	r3, r2, r3
 80086f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008702:	f7f8 fa79 	bl	8000bf8 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4b0d      	ldr	r3, [pc, #52]	@ (8008740 <UART_SetConfig+0x2d4>)
 800870c:	fba3 1302 	umull	r1, r3, r3, r2
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	2164      	movs	r1, #100	@ 0x64
 8008714:	fb01 f303 	mul.w	r3, r1, r3
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	3332      	adds	r3, #50	@ 0x32
 800871e:	4a08      	ldr	r2, [pc, #32]	@ (8008740 <UART_SetConfig+0x2d4>)
 8008720:	fba2 2303 	umull	r2, r3, r2, r3
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	f003 0207 	and.w	r2, r3, #7
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4422      	add	r2, r4
 8008732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008734:	e106      	b.n	8008944 <UART_SetConfig+0x4d8>
 8008736:	bf00      	nop
 8008738:	40011000 	.word	0x40011000
 800873c:	40011400 	.word	0x40011400
 8008740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008748:	2200      	movs	r2, #0
 800874a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800874e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008756:	4642      	mov	r2, r8
 8008758:	464b      	mov	r3, r9
 800875a:	1891      	adds	r1, r2, r2
 800875c:	6239      	str	r1, [r7, #32]
 800875e:	415b      	adcs	r3, r3
 8008760:	627b      	str	r3, [r7, #36]	@ 0x24
 8008762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008766:	4641      	mov	r1, r8
 8008768:	1854      	adds	r4, r2, r1
 800876a:	4649      	mov	r1, r9
 800876c:	eb43 0501 	adc.w	r5, r3, r1
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	00eb      	lsls	r3, r5, #3
 800877a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800877e:	00e2      	lsls	r2, r4, #3
 8008780:	4614      	mov	r4, r2
 8008782:	461d      	mov	r5, r3
 8008784:	4643      	mov	r3, r8
 8008786:	18e3      	adds	r3, r4, r3
 8008788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800878c:	464b      	mov	r3, r9
 800878e:	eb45 0303 	adc.w	r3, r5, r3
 8008792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087b2:	4629      	mov	r1, r5
 80087b4:	008b      	lsls	r3, r1, #2
 80087b6:	4621      	mov	r1, r4
 80087b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087bc:	4621      	mov	r1, r4
 80087be:	008a      	lsls	r2, r1, #2
 80087c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087c4:	f7f8 fa18 	bl	8000bf8 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4b60      	ldr	r3, [pc, #384]	@ (8008950 <UART_SetConfig+0x4e4>)
 80087ce:	fba3 2302 	umull	r2, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	011c      	lsls	r4, r3, #4
 80087d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	1891      	adds	r1, r2, r2
 80087ee:	61b9      	str	r1, [r7, #24]
 80087f0:	415b      	adcs	r3, r3
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f8:	4641      	mov	r1, r8
 80087fa:	1851      	adds	r1, r2, r1
 80087fc:	6139      	str	r1, [r7, #16]
 80087fe:	4649      	mov	r1, r9
 8008800:	414b      	adcs	r3, r1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008810:	4659      	mov	r1, fp
 8008812:	00cb      	lsls	r3, r1, #3
 8008814:	4651      	mov	r1, sl
 8008816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800881a:	4651      	mov	r1, sl
 800881c:	00ca      	lsls	r2, r1, #3
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	4603      	mov	r3, r0
 8008824:	4642      	mov	r2, r8
 8008826:	189b      	adds	r3, r3, r2
 8008828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800882c:	464b      	mov	r3, r9
 800882e:	460a      	mov	r2, r1
 8008830:	eb42 0303 	adc.w	r3, r2, r3
 8008834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008842:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008844:	f04f 0200 	mov.w	r2, #0
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008850:	4649      	mov	r1, r9
 8008852:	008b      	lsls	r3, r1, #2
 8008854:	4641      	mov	r1, r8
 8008856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800885a:	4641      	mov	r1, r8
 800885c:	008a      	lsls	r2, r1, #2
 800885e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008862:	f7f8 f9c9 	bl	8000bf8 <__aeabi_uldivmod>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4611      	mov	r1, r2
 800886c:	4b38      	ldr	r3, [pc, #224]	@ (8008950 <UART_SetConfig+0x4e4>)
 800886e:	fba3 2301 	umull	r2, r3, r3, r1
 8008872:	095b      	lsrs	r3, r3, #5
 8008874:	2264      	movs	r2, #100	@ 0x64
 8008876:	fb02 f303 	mul.w	r3, r2, r3
 800887a:	1acb      	subs	r3, r1, r3
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	3332      	adds	r3, #50	@ 0x32
 8008880:	4a33      	ldr	r2, [pc, #204]	@ (8008950 <UART_SetConfig+0x4e4>)
 8008882:	fba2 2303 	umull	r2, r3, r2, r3
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800888c:	441c      	add	r4, r3
 800888e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008892:	2200      	movs	r2, #0
 8008894:	673b      	str	r3, [r7, #112]	@ 0x70
 8008896:	677a      	str	r2, [r7, #116]	@ 0x74
 8008898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800889c:	4642      	mov	r2, r8
 800889e:	464b      	mov	r3, r9
 80088a0:	1891      	adds	r1, r2, r2
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	415b      	adcs	r3, r3
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088ac:	4641      	mov	r1, r8
 80088ae:	1851      	adds	r1, r2, r1
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	4649      	mov	r1, r9
 80088b4:	414b      	adcs	r3, r1
 80088b6:	607b      	str	r3, [r7, #4]
 80088b8:	f04f 0200 	mov.w	r2, #0
 80088bc:	f04f 0300 	mov.w	r3, #0
 80088c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088c4:	4659      	mov	r1, fp
 80088c6:	00cb      	lsls	r3, r1, #3
 80088c8:	4651      	mov	r1, sl
 80088ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ce:	4651      	mov	r1, sl
 80088d0:	00ca      	lsls	r2, r1, #3
 80088d2:	4610      	mov	r0, r2
 80088d4:	4619      	mov	r1, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	4642      	mov	r2, r8
 80088da:	189b      	adds	r3, r3, r2
 80088dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088de:	464b      	mov	r3, r9
 80088e0:	460a      	mov	r2, r1
 80088e2:	eb42 0303 	adc.w	r3, r2, r3
 80088e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80088f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008900:	4649      	mov	r1, r9
 8008902:	008b      	lsls	r3, r1, #2
 8008904:	4641      	mov	r1, r8
 8008906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800890a:	4641      	mov	r1, r8
 800890c:	008a      	lsls	r2, r1, #2
 800890e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008912:	f7f8 f971 	bl	8000bf8 <__aeabi_uldivmod>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <UART_SetConfig+0x4e4>)
 800891c:	fba3 1302 	umull	r1, r3, r3, r2
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	2164      	movs	r1, #100	@ 0x64
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	3332      	adds	r3, #50	@ 0x32
 800892e:	4a08      	ldr	r2, [pc, #32]	@ (8008950 <UART_SetConfig+0x4e4>)
 8008930:	fba2 2303 	umull	r2, r3, r2, r3
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	f003 020f 	and.w	r2, r3, #15
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4422      	add	r2, r4
 8008942:	609a      	str	r2, [r3, #8]
}
 8008944:	bf00      	nop
 8008946:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800894a:	46bd      	mov	sp, r7
 800894c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008950:	51eb851f 	.word	0x51eb851f

08008954 <Transmit>:

void Transmit(UART_HandleTypeDef *huart, char txChar) {
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
    while (((huart->TX.tail+1)%TXBUFSIZE)==huart->TX.head);
 8008960:	bf00      	nop
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8008968:	3301      	adds	r3, #1
 800896a:	425a      	negs	r2, r3
 800896c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008974:	bf58      	it	pl
 8008976:	4253      	negpl	r3, r2
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	f8b2 2454 	ldrh.w	r2, [r2, #1108]	@ 0x454
 800897e:	4293      	cmp	r3, r2
 8008980:	d0ef      	beq.n	8008962 <Transmit+0xe>
    huart->TX.buf[huart->TX.tail++]=txChar;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	b291      	uxth	r1, r2
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	f8a2 1456 	strh.w	r1, [r2, #1110]	@ 0x456
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    huart->TX.tail%=TXBUFSIZE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80089a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8a3 2456 	strh.w	r2, [r3, #1110]	@ 0x456
    if (1==huart->TX.txForce) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3458 	ldrb.w	r3, [r3, #1112]	@ 0x458
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d10b      	bne.n	80089d2 <Transmit+0x7e>
        huart->TX.txForce=0;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2458 	strb.w	r2, [r3, #1112]	@ 0x458
        __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80089d0:	60da      	str	r2, [r3, #12]
      //SET_BIT(uarts[Chanel]->Instance->CR1, USART_CR1_TXEIE);
    }
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <Receive>:

char Receive(UART_HandleTypeDef *huart, int Wait) {
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
char ch=0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
    int DelayCount=HAL_GetTick();
 80089ec:	f7fa fe46 	bl	800367c <HAL_GetTick>
 80089f0:	4603      	mov	r3, r0
 80089f2:	60bb      	str	r3, [r7, #8]
    huart->RX.timeOut=0;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
    while (huart->RX.head==huart->RX.tail) {
 80089fc:	e00d      	b.n	8008a1a <Receive+0x3c>
      if ((HAL_GetTick()-DelayCount)>=Wait) {
 80089fe:	f7fa fe3d 	bl	800367c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d305      	bcc.n	8008a1a <Receive+0x3c>
       huart->RX.timeOut=1;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f8c3 224c 	str.w	r2, [r3, #588]	@ 0x24c
       return 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e01f      	b.n	8008a5a <Receive+0x7c>
    while (huart->RX.head==huart->RX.tail) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 2248 	ldrh.w	r2, [r3, #584]	@ 0x248
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 324a 	ldrh.w	r3, [r3, #586]	@ 0x24a
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d0e9      	beq.n	80089fe <Receive+0x20>
      }
    }
    ch=huart->RX.buf[huart->RX.head++];
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 3248 	ldrh.w	r3, [r3, #584]	@ 0x248
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	b291      	uxth	r1, r2
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	f8a2 1248 	strh.w	r1, [r2, #584]	@ 0x248
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008a44:	73fb      	strb	r3, [r7, #15]
    huart->RX.head%=RXBUFSIZE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3248 	ldrh.w	r3, [r3, #584]	@ 0x248
 8008a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8a3 2248 	strh.w	r2, [r3, #584]	@ 0x248
    return ch;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <csts>:

char csts(UART_HandleTypeDef *huart) {
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
    if (huart->RX.head==huart->RX.tail) return 0; else return 1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 2248 	ldrh.w	r2, [r3, #584]	@ 0x248
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8b3 324a 	ldrh.w	r3, [r3, #586]	@ 0x24a
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d101      	bne.n	8008a7e <csts+0x1c>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e000      	b.n	8008a80 <csts+0x1e>
 8008a7e:	2301      	movs	r3, #1
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <endTransmit>:

void endTransmit(UART_HandleTypeDef *huart) {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa2:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->SR, USART_SR_TC);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ab2:	601a      	str	r2, [r3, #0]
	if (huart->TX.RS485) {
//			HAL_GPIO_WritePin(XDIR_GPIO_Port,XDIR_Pin,GPIO_PIN_RESET);
	}
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <receive_IT>:

void receive_IT (UART_HandleTypeDef *huart) {
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint16_t TmpChar=0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	81fb      	strh	r3, [r7, #14]
//	WaitCount=0;
  TmpChar=(uint16_t)(huart->Instance->DR & 0x00FF);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	81fb      	strh	r3, [r7, #14]
	if (((huart->RX.tail+1) % RXBUFSIZE) != huart->RX.head) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 324a 	ldrh.w	r3, [r3, #586]	@ 0x24a
 8008ade:	3301      	adds	r3, #1
 8008ae0:	425a      	negs	r2, r3
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aea:	bf58      	it	pl
 8008aec:	4253      	negpl	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	f8b2 2248 	ldrh.w	r2, [r2, #584]	@ 0x248
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d017      	beq.n	8008b28 <receive_IT+0x68>
		huart->RX.buf[huart->RX.tail++]=TmpChar;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 324a 	ldrh.w	r3, [r3, #586]	@ 0x24a
 8008afe:	1c5a      	adds	r2, r3, #1
 8008b00:	b291      	uxth	r1, r2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	f8a2 124a 	strh.w	r1, [r2, #586]	@ 0x24a
 8008b08:	4619      	mov	r1, r3
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	440b      	add	r3, r1
 8008b12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		huart->RX.tail%=RXBUFSIZE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8b3 324a 	ldrh.w	r3, [r3, #586]	@ 0x24a
 8008b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8a3 224a 	strh.w	r2, [r3, #586]	@ 0x24a
	}
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <transmit_IT>:

void transmit_IT(UART_HandleTypeDef *huart) {
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	uint16_t ch;
	if (huart->TX.head!=huart->TX.tail) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8b3 2454 	ldrh.w	r2, [r3, #1108]	@ 0x454
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d01b      	beq.n	8008b84 <transmit_IT+0x50>
		ch=(uint16_t)huart->TX.buf[huart->TX.head++];
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	@ 0x454
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	b291      	uxth	r1, r2
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	f8a2 1454 	strh.w	r1, [r2, #1108]	@ 0x454
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	f893 3254 	ldrb.w	r3, [r3, #596]	@ 0x254
 8008b66:	81fb      	strh	r3, [r7, #14]
		huart->Instance->DR=ch;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	89fa      	ldrh	r2, [r7, #14]
 8008b6e:	605a      	str	r2, [r3, #4]
		huart->TX.head%=TXBUFSIZE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	@ 0x454
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8a3 2454 	strh.w	r2, [r3, #1108]	@ 0x454
	{
//		__HAL_UART_ENABLE_IT(huart, UART_IT_TC);
		__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
		huart->TX.txForce=1;
	}
}
 8008b82:	e00b      	b.n	8008b9c <transmit_IT+0x68>
		__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b92:	60da      	str	r2, [r3, #12]
		huart->TX.txForce=1;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2458 	strb.w	r2, [r3, #1112]	@ 0x458
}
 8008b9c:	bf00      	nop
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba8:	b084      	sub	sp, #16
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	f107 001c 	add.w	r0, r7, #28
 8008bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d123      	bne.n	8008c0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d105      	bne.n	8008bfe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 fae2 	bl	800a1c8 <USB_CoreReset>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
 8008c08:	e01b      	b.n	8008c42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fad6 	bl	800a1c8 <USB_CoreReset>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c34:	e005      	b.n	8008c42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c42:	7fbb      	ldrb	r3, [r7, #30]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d10b      	bne.n	8008c60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f043 0206 	orr.w	r2, r3, #6
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f043 0220 	orr.w	r2, r3, #32
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c6c:	b004      	add	sp, #16
 8008c6e:	4770      	bx	lr

08008c70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d165      	bne.n	8008d50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	4a41      	ldr	r2, [pc, #260]	@ (8008d8c <USB_SetTurnaroundTime+0x11c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d906      	bls.n	8008c9a <USB_SetTurnaroundTime+0x2a>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4a40      	ldr	r2, [pc, #256]	@ (8008d90 <USB_SetTurnaroundTime+0x120>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d202      	bcs.n	8008c9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c94:	230f      	movs	r3, #15
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	e062      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8008d90 <USB_SetTurnaroundTime+0x120>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d306      	bcc.n	8008cb0 <USB_SetTurnaroundTime+0x40>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8008d94 <USB_SetTurnaroundTime+0x124>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d202      	bcs.n	8008cb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008caa:	230e      	movs	r3, #14
 8008cac:	617b      	str	r3, [r7, #20]
 8008cae:	e057      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4a38      	ldr	r2, [pc, #224]	@ (8008d94 <USB_SetTurnaroundTime+0x124>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d306      	bcc.n	8008cc6 <USB_SetTurnaroundTime+0x56>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4a37      	ldr	r2, [pc, #220]	@ (8008d98 <USB_SetTurnaroundTime+0x128>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d202      	bcs.n	8008cc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008cc0:	230d      	movs	r3, #13
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e04c      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4a33      	ldr	r2, [pc, #204]	@ (8008d98 <USB_SetTurnaroundTime+0x128>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d306      	bcc.n	8008cdc <USB_SetTurnaroundTime+0x6c>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4a32      	ldr	r2, [pc, #200]	@ (8008d9c <USB_SetTurnaroundTime+0x12c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d802      	bhi.n	8008cdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	e041      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4a2f      	ldr	r2, [pc, #188]	@ (8008d9c <USB_SetTurnaroundTime+0x12c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d906      	bls.n	8008cf2 <USB_SetTurnaroundTime+0x82>
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8008da0 <USB_SetTurnaroundTime+0x130>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d802      	bhi.n	8008cf2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cec:	230b      	movs	r3, #11
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e036      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8008da0 <USB_SetTurnaroundTime+0x130>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d906      	bls.n	8008d08 <USB_SetTurnaroundTime+0x98>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	4a29      	ldr	r2, [pc, #164]	@ (8008da4 <USB_SetTurnaroundTime+0x134>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d802      	bhi.n	8008d08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d02:	230a      	movs	r3, #10
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e02b      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4a26      	ldr	r2, [pc, #152]	@ (8008da4 <USB_SetTurnaroundTime+0x134>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d906      	bls.n	8008d1e <USB_SetTurnaroundTime+0xae>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	4a25      	ldr	r2, [pc, #148]	@ (8008da8 <USB_SetTurnaroundTime+0x138>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d202      	bcs.n	8008d1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d18:	2309      	movs	r3, #9
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e020      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	4a21      	ldr	r2, [pc, #132]	@ (8008da8 <USB_SetTurnaroundTime+0x138>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d306      	bcc.n	8008d34 <USB_SetTurnaroundTime+0xc4>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4a20      	ldr	r2, [pc, #128]	@ (8008dac <USB_SetTurnaroundTime+0x13c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d802      	bhi.n	8008d34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d2e:	2308      	movs	r3, #8
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e015      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4a1d      	ldr	r2, [pc, #116]	@ (8008dac <USB_SetTurnaroundTime+0x13c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d906      	bls.n	8008d4a <USB_SetTurnaroundTime+0xda>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008db0 <USB_SetTurnaroundTime+0x140>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d202      	bcs.n	8008d4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d44:	2307      	movs	r3, #7
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	e00a      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d4a:	2306      	movs	r3, #6
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e007      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d56:	2309      	movs	r3, #9
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e001      	b.n	8008d60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d5c:	2309      	movs	r3, #9
 8008d5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	029b      	lsls	r3, r3, #10
 8008d74:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	00d8acbf 	.word	0x00d8acbf
 8008d90:	00e4e1c0 	.word	0x00e4e1c0
 8008d94:	00f42400 	.word	0x00f42400
 8008d98:	01067380 	.word	0x01067380
 8008d9c:	011a499f 	.word	0x011a499f
 8008da0:	01312cff 	.word	0x01312cff
 8008da4:	014ca43f 	.word	0x014ca43f
 8008da8:	016e3600 	.word	0x016e3600
 8008dac:	01a6ab1f 	.word	0x01a6ab1f
 8008db0:	01e84800 	.word	0x01e84800

08008db4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f043 0201 	orr.w	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f023 0201 	bic.w	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d115      	bne.n	8008e46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e26:	200a      	movs	r0, #10
 8008e28:	f7fa fc34 	bl	8003694 <HAL_Delay>
      ms += 10U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	330a      	adds	r3, #10
 8008e30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f939 	bl	800a0aa <USB_GetMode>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d01e      	beq.n	8008e7c <USB_SetCurrentMode+0x84>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e42:	d9f0      	bls.n	8008e26 <USB_SetCurrentMode+0x2e>
 8008e44:	e01a      	b.n	8008e7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d115      	bne.n	8008e78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008e58:	200a      	movs	r0, #10
 8008e5a:	f7fa fc1b 	bl	8003694 <HAL_Delay>
      ms += 10U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	330a      	adds	r3, #10
 8008e62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 f920 	bl	800a0aa <USB_GetMode>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <USB_SetCurrentMode+0x84>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2bc7      	cmp	r3, #199	@ 0xc7
 8008e74:	d9f0      	bls.n	8008e58 <USB_SetCurrentMode+0x60>
 8008e76:	e001      	b.n	8008e7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e005      	b.n	8008e88 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008e80:	d101      	bne.n	8008e86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e90:	b084      	sub	sp, #16
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b086      	sub	sp, #24
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	e009      	b.n	8008ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3340      	adds	r3, #64	@ 0x40
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b0e      	cmp	r3, #14
 8008ec8:	d9f2      	bls.n	8008eb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d11c      	bne.n	8008f0c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ee0:	f043 0302 	orr.w	r3, r3, #2
 8008ee4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f0a:	e00b      	b.n	8008f24 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f10:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f30:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d10d      	bne.n	8008f54 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f40:	2100      	movs	r1, #0
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f968 	bl	8009218 <USB_SetDevSpeed>
 8008f48:	e008      	b.n	8008f5c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f963 	bl	8009218 <USB_SetDevSpeed>
 8008f52:	e003      	b.n	8008f5c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f54:	2103      	movs	r1, #3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f95e 	bl	8009218 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f5c:	2110      	movs	r1, #16
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8fa 	bl	8009158 <USB_FlushTxFifo>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f924 	bl	80091bc <USB_FlushRxFifo>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f84:	461a      	mov	r2, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f90:	461a      	mov	r2, r3
 8008f92:	2300      	movs	r3, #0
 8008f94:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	e043      	b.n	8009030 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fbe:	d118      	bne.n	8008ff2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e013      	b.n	8009004 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e008      	b.n	8009004 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ffe:	461a      	mov	r2, r3
 8009000:	2300      	movs	r3, #0
 8009002:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009010:	461a      	mov	r2, r3
 8009012:	2300      	movs	r3, #0
 8009014:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009022:	461a      	mov	r2, r3
 8009024:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009034:	461a      	mov	r2, r3
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	4293      	cmp	r3, r2
 800903a:	d3b5      	bcc.n	8008fa8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800903c:	2300      	movs	r3, #0
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	e043      	b.n	80090ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009058:	d118      	bne.n	800908c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906c:	461a      	mov	r2, r3
 800906e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	e013      	b.n	800909e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009082:	461a      	mov	r2, r3
 8009084:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	e008      	b.n	800909e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009098:	461a      	mov	r2, r3
 800909a:	2300      	movs	r3, #0
 800909c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090aa:	461a      	mov	r2, r3
 80090ac:	2300      	movs	r3, #0
 80090ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090bc:	461a      	mov	r2, r3
 80090be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	3301      	adds	r3, #1
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090ce:	461a      	mov	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d3b5      	bcc.n	8009042 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80090f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d105      	bne.n	800910c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f043 0210 	orr.w	r2, r3, #16
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	4b10      	ldr	r3, [pc, #64]	@ (8009154 <USB_DevInit+0x2c4>)
 8009112:	4313      	orrs	r3, r2
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009118:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f043 0208 	orr.w	r2, r3, #8
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800912c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009130:	2b01      	cmp	r3, #1
 8009132:	d107      	bne.n	8009144 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800913c:	f043 0304 	orr.w	r3, r3, #4
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009150:	b004      	add	sp, #16
 8009152:	4770      	bx	lr
 8009154:	803c3800 	.word	0x803c3800

08009158 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009172:	d901      	bls.n	8009178 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e01b      	b.n	80091b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	daf2      	bge.n	8009166 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	019b      	lsls	r3, r3, #6
 8009188:	f043 0220 	orr.w	r2, r3, #32
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800919c:	d901      	bls.n	80091a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e006      	b.n	80091b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d0f0      	beq.n	8009190 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091d4:	d901      	bls.n	80091da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e018      	b.n	800920c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	daf2      	bge.n	80091c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2210      	movs	r2, #16
 80091ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3301      	adds	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091f8:	d901      	bls.n	80091fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e006      	b.n	800920c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b10      	cmp	r3, #16
 8009208:	d0f0      	beq.n	80091ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009238:	4313      	orrs	r3, r2
 800923a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800924a:	b480      	push	{r7}
 800924c:	b087      	sub	sp, #28
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 0306 	and.w	r3, r3, #6
 8009262:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800926a:	2300      	movs	r3, #0
 800926c:	75fb      	strb	r3, [r7, #23]
 800926e:	e00a      	b.n	8009286 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d002      	beq.n	800927c <USB_GetDevSpeed+0x32>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b06      	cmp	r3, #6
 800927a:	d102      	bne.n	8009282 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800927c:	2302      	movs	r3, #2
 800927e:	75fb      	strb	r3, [r7, #23]
 8009280:	e001      	b.n	8009286 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009282:	230f      	movs	r3, #15
 8009284:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009286:	7dfb      	ldrb	r3, [r7, #23]
}
 8009288:	4618      	mov	r0, r3
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d13a      	bne.n	8009326 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b6:	69da      	ldr	r2, [r3, #28]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	2101      	movs	r1, #1
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	68f9      	ldr	r1, [r7, #12]
 80092ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092ce:	4313      	orrs	r3, r2
 80092d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d155      	bne.n	8009394 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009304:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	059b      	lsls	r3, r3, #22
 800930a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800930c:	4313      	orrs	r3, r2
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800931a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800931e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	e036      	b.n	8009394 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932c:	69da      	ldr	r2, [r3, #28]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	2101      	movs	r1, #1
 8009338:	fa01 f303 	lsl.w	r3, r1, r3
 800933c:	041b      	lsls	r3, r3, #16
 800933e:	68f9      	ldr	r1, [r7, #12]
 8009340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009344:	4313      	orrs	r3, r2
 8009346:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d11a      	bne.n	8009394 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	791b      	ldrb	r3, [r3, #4]
 8009378:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800937a:	430b      	orrs	r3, r1
 800937c:	4313      	orrs	r3, r2
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800938a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800938e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009392:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d161      	bne.n	8009484 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d6:	d11f      	bne.n	8009418 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	0151      	lsls	r1, r2, #5
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	440a      	add	r2, r1
 800940e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800941e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	2101      	movs	r1, #1
 800942a:	fa01 f303 	lsl.w	r3, r1, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	43db      	mvns	r3, r3
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009438:	4013      	ands	r3, r2
 800943a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 030f 	and.w	r3, r3, #15
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f303 	lsl.w	r3, r1, r3
 8009452:	b29b      	uxth	r3, r3
 8009454:	43db      	mvns	r3, r3
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800945c:	4013      	ands	r3, r2
 800945e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	0159      	lsls	r1, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	440b      	add	r3, r1
 8009476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800947a:	4619      	mov	r1, r3
 800947c:	4b35      	ldr	r3, [pc, #212]	@ (8009554 <USB_DeactivateEndpoint+0x1b0>)
 800947e:	4013      	ands	r3, r2
 8009480:	600b      	str	r3, [r1, #0]
 8009482:	e060      	b.n	8009546 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800949a:	d11f      	bne.n	80094dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	2101      	movs	r1, #1
 80094ee:	fa01 f303 	lsl.w	r3, r1, r3
 80094f2:	041b      	lsls	r3, r3, #16
 80094f4:	43db      	mvns	r3, r3
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094fc:	4013      	ands	r3, r2
 80094fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009506:	69da      	ldr	r2, [r3, #28]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	2101      	movs	r1, #1
 8009512:	fa01 f303 	lsl.w	r3, r1, r3
 8009516:	041b      	lsls	r3, r3, #16
 8009518:	43db      	mvns	r3, r3
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009520:	4013      	ands	r3, r2
 8009522:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	0159      	lsls	r1, r3, #5
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	440b      	add	r3, r1
 800953a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953e:	4619      	mov	r1, r3
 8009540:	4b05      	ldr	r3, [pc, #20]	@ (8009558 <USB_DeactivateEndpoint+0x1b4>)
 8009542:	4013      	ands	r3, r2
 8009544:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	ec337800 	.word	0xec337800
 8009558:	eff37800 	.word	0xeff37800

0800955c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af02      	add	r7, sp, #8
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	785b      	ldrb	r3, [r3, #1]
 8009578:	2b01      	cmp	r3, #1
 800957a:	f040 817a 	bne.w	8009872 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d132      	bne.n	80095ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	0151      	lsls	r1, r2, #5
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	440a      	add	r2, r1
 800959c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095a0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80095a4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80095a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e4:	0cdb      	lsrs	r3, r3, #19
 80095e6:	04db      	lsls	r3, r3, #19
 80095e8:	6113      	str	r3, [r2, #16]
 80095ea:	e092      	b.n	8009712 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009606:	0cdb      	lsrs	r3, r3, #19
 8009608:	04db      	lsls	r3, r3, #19
 800960a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	69fa      	ldr	r2, [r7, #28]
 8009620:	440a      	add	r2, r1
 8009622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009626:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800962a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800962e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d11a      	bne.n	800966c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	d903      	bls.n	800964a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009664:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009668:	6113      	str	r3, [r2, #16]
 800966a:	e01b      	b.n	80096a4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6919      	ldr	r1, [r3, #16]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	440b      	add	r3, r1
 8009684:	1e59      	subs	r1, r3, #1
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	fbb1 f3f3 	udiv	r3, r1, r3
 800968e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009690:	4ba2      	ldr	r3, [pc, #648]	@ (800991c <USB_EPStartXfer+0x3c0>)
 8009692:	400b      	ands	r3, r1
 8009694:	69b9      	ldr	r1, [r7, #24]
 8009696:	0148      	lsls	r0, r1, #5
 8009698:	69f9      	ldr	r1, [r7, #28]
 800969a:	4401      	add	r1, r0
 800969c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096a0:	4313      	orrs	r3, r2
 80096a2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b0:	691a      	ldr	r2, [r3, #16]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096ba:	69b9      	ldr	r1, [r7, #24]
 80096bc:	0148      	lsls	r0, r1, #5
 80096be:	69f9      	ldr	r1, [r7, #28]
 80096c0:	4401      	add	r1, r0
 80096c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80096c6:	4313      	orrs	r3, r2
 80096c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	791b      	ldrb	r3, [r3, #4]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d11f      	bne.n	8009712 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ec:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80096f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009710:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d14b      	bne.n	80097b0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	791b      	ldrb	r3, [r3, #4]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d128      	bne.n	800978e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009748:	2b00      	cmp	r3, #0
 800974a:	d110      	bne.n	800976e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	440a      	add	r2, r1
 8009762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009766:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	e00f      	b.n	800978e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	440a      	add	r2, r1
 8009784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800978c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e165      	b.n	8009a7c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80097ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	791b      	ldrb	r3, [r3, #4]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d015      	beq.n	8009804 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 814d 	beq.w	8009a7c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	2101      	movs	r1, #1
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	69f9      	ldr	r1, [r7, #28]
 80097fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097fe:	4313      	orrs	r3, r2
 8009800:	634b      	str	r3, [r1, #52]	@ 0x34
 8009802:	e13b      	b.n	8009a7c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009810:	2b00      	cmp	r3, #0
 8009812:	d110      	bne.n	8009836 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e00f      	b.n	8009856 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	69fa      	ldr	r2, [r7, #28]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009854:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	68d9      	ldr	r1, [r3, #12]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	b298      	uxth	r0, r3
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f9b8 	bl	8009be0 <USB_WritePacket>
 8009870:	e104      	b.n	8009a7c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800988c:	0cdb      	lsrs	r3, r3, #19
 800988e:	04db      	lsls	r3, r3, #19
 8009890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80098b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098b4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d131      	bne.n	8009920 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098ea:	69b9      	ldr	r1, [r7, #24]
 80098ec:	0148      	lsls	r0, r1, #5
 80098ee:	69f9      	ldr	r1, [r7, #28]
 80098f0:	4401      	add	r1, r0
 80098f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80098f6:	4313      	orrs	r3, r2
 80098f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	0151      	lsls	r1, r2, #5
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	440a      	add	r2, r1
 8009910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009914:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009918:	6113      	str	r3, [r2, #16]
 800991a:	e061      	b.n	80099e0 <USB_EPStartXfer+0x484>
 800991c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d123      	bne.n	8009970 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800993e:	69b9      	ldr	r1, [r7, #24]
 8009940:	0148      	lsls	r0, r1, #5
 8009942:	69f9      	ldr	r1, [r7, #28]
 8009944:	4401      	add	r1, r0
 8009946:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800994a:	4313      	orrs	r3, r2
 800994c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	0151      	lsls	r1, r2, #5
 8009960:	69fa      	ldr	r2, [r7, #28]
 8009962:	440a      	add	r2, r1
 8009964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800996c:	6113      	str	r3, [r2, #16]
 800996e:	e037      	b.n	80099e0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	691a      	ldr	r2, [r3, #16]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	4413      	add	r3, r2
 800997a:	1e5a      	subs	r2, r3, #1
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
 8009984:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	8afa      	ldrh	r2, [r7, #22]
 800998c:	fb03 f202 	mul.w	r2, r3, r2
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	8afb      	ldrh	r3, [r7, #22]
 80099a4:	04d9      	lsls	r1, r3, #19
 80099a6:	4b38      	ldr	r3, [pc, #224]	@ (8009a88 <USB_EPStartXfer+0x52c>)
 80099a8:	400b      	ands	r3, r1
 80099aa:	69b9      	ldr	r1, [r7, #24]
 80099ac:	0148      	lsls	r0, r1, #5
 80099ae:	69f9      	ldr	r1, [r7, #28]
 80099b0:	4401      	add	r1, r0
 80099b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099b6:	4313      	orrs	r3, r2
 80099b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d0:	69b9      	ldr	r1, [r7, #24]
 80099d2:	0148      	lsls	r0, r1, #5
 80099d4:	69f9      	ldr	r1, [r7, #28]
 80099d6:	4401      	add	r1, r0
 80099d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80099dc:	4313      	orrs	r3, r2
 80099de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d10d      	bne.n	8009a02 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	68d9      	ldr	r1, [r3, #12]
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fe:	460a      	mov	r2, r1
 8009a00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	791b      	ldrb	r3, [r3, #4]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d128      	bne.n	8009a5c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d110      	bne.n	8009a3c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	e00f      	b.n	8009a5c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3720      	adds	r7, #32
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	1ff80000 	.word	0x1ff80000

08009a8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d14a      	bne.n	8009b40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ac2:	f040 8086 	bne.w	8009bd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	7812      	ldrb	r2, [r2, #0]
 8009ada:	0151      	lsls	r1, r2, #5
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	440a      	add	r2, r1
 8009ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ae4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ae8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d902      	bls.n	8009b24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	75fb      	strb	r3, [r7, #23]
          break;
 8009b22:	e056      	b.n	8009bd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b3c:	d0e7      	beq.n	8009b0e <USB_EPStopXfer+0x82>
 8009b3e:	e048      	b.n	8009bd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b58:	d13b      	bne.n	8009bd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	7812      	ldrb	r2, [r2, #0]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d902      	bls.n	8009bb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8009bb6:	e00c      	b.n	8009bd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bd0:	d0e7      	beq.n	8009ba2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	371c      	adds	r7, #28
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b089      	sub	sp, #36	@ 0x24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4611      	mov	r1, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	460b      	mov	r3, r1
 8009bf0:	71fb      	strb	r3, [r7, #7]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d123      	bne.n	8009c4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c06:	88bb      	ldrh	r3, [r7, #4]
 8009c08:	3303      	adds	r3, #3
 8009c0a:	089b      	lsrs	r3, r3, #2
 8009c0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61bb      	str	r3, [r7, #24]
 8009c12:	e018      	b.n	8009c46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	031a      	lsls	r2, r3, #12
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c20:	461a      	mov	r2, r3
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	3301      	adds	r3, #1
 8009c32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	3301      	adds	r3, #1
 8009c38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	3301      	adds	r3, #1
 8009c44:	61bb      	str	r3, [r7, #24]
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d3e2      	bcc.n	8009c14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3724      	adds	r7, #36	@ 0x24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b08b      	sub	sp, #44	@ 0x2c
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	089b      	lsrs	r3, r3, #2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	f003 0303 	and.w	r3, r3, #3
 8009c80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c82:	2300      	movs	r3, #0
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	e014      	b.n	8009cb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	3301      	adds	r3, #1
 8009c98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	3301      	adds	r3, #1
 8009caa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	623b      	str	r3, [r7, #32]
 8009cb2:	6a3a      	ldr	r2, [r7, #32]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d3e6      	bcc.n	8009c88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009cba:	8bfb      	ldrh	r3, [r7, #30]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01e      	beq.n	8009cfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f107 0310 	add.w	r3, r7, #16
 8009cd0:	6812      	ldr	r2, [r2, #0]
 8009cd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce4:	701a      	strb	r2, [r3, #0]
      i++;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	623b      	str	r3, [r7, #32]
      pDest++;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	3301      	adds	r3, #1
 8009cf0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009cf2:	8bfb      	ldrh	r3, [r7, #30]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009cf8:	8bfb      	ldrh	r3, [r7, #30]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1ea      	bne.n	8009cd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	372c      	adds	r7, #44	@ 0x2c
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d12c      	bne.n	8009d82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	db12      	blt.n	8009d60 <USB_EPSetStall+0x54>
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00f      	beq.n	8009d60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	e02b      	b.n	8009dda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	db12      	blt.n	8009dba <USB_EPSetStall+0xae>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00f      	beq.n	8009dba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	0151      	lsls	r1, r2, #5
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	440a      	add	r2, r1
 8009db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009db8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	0151      	lsls	r1, r2, #5
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	440a      	add	r2, r1
 8009dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009dd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	785b      	ldrb	r3, [r3, #1]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d128      	bne.n	8009e56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	791b      	ldrb	r3, [r3, #4]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d003      	beq.n	8009e34 <USB_EPClearStall+0x4c>
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d138      	bne.n	8009ea6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	e027      	b.n	8009ea6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	0151      	lsls	r1, r2, #5
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	440a      	add	r2, r1
 8009e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d003      	beq.n	8009e86 <USB_EPClearStall+0x9e>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	791b      	ldrb	r3, [r3, #4]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d10f      	bne.n	8009ea6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ea4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ed2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009ed6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009ee8:	68f9      	ldr	r1, [r7, #12]
 8009eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f2e:	f023 0302 	bic.w	r3, r3, #2
 8009f32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f5c:	f023 0303 	bic.w	r3, r3, #3
 8009f60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f70:	f043 0302 	orr.w	r3, r3, #2
 8009f74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	0c1b      	lsrs	r3, r3, #16
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4013      	ands	r3, r2
 800a000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	b29b      	uxth	r3, r3
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4013      	ands	r3, r2
 800a03e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a040:	68bb      	ldr	r3, [r7, #8]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a04e:	b480      	push	{r7}
 800a050:	b087      	sub	sp, #28
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a070:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	fa22 f303 	lsr.w	r3, r2, r3
 800a07e:	01db      	lsls	r3, r3, #7
 800a080:	b2db      	uxtb	r3, r3
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4013      	ands	r3, r2
 800a09a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a09c:	68bb      	ldr	r3, [r7, #8]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0c6:	b480      	push	{r7}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a0e4:	f023 0307 	bic.w	r3, r3, #7
 800a0e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	460b      	mov	r3, r1
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	333c      	adds	r3, #60	@ 0x3c
 800a122:	3304      	adds	r3, #4
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4a26      	ldr	r2, [pc, #152]	@ (800a1c4 <USB_EP0_OutStart+0xb8>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d90a      	bls.n	800a146 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a13c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a140:	d101      	bne.n	800a146 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	e037      	b.n	800a1b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14c:	461a      	mov	r2, r3
 800a14e:	2300      	movs	r3, #0
 800a150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a174:	f043 0318 	orr.w	r3, r3, #24
 800a178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a188:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a18c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d10f      	bne.n	800a1b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19a:	461a      	mov	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a1b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	4f54300a 	.word	0x4f54300a

0800a1c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1e0:	d901      	bls.n	800a1e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e01b      	b.n	800a21e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	daf2      	bge.n	800a1d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f043 0201 	orr.w	r2, r3, #1
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3301      	adds	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a20a:	d901      	bls.n	800a210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e006      	b.n	800a21e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d0f0      	beq.n	800a1fe <USB_CoreReset+0x36>

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a238:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a23c:	f002 fc88 	bl	800cb50 <USBD_static_malloc>
 800a240:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	32b0      	adds	r2, #176	@ 0xb0
 800a252:	2100      	movs	r1, #0
 800a254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a258:	2302      	movs	r3, #2
 800a25a:	e0d4      	b.n	800a406 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a25c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a260:	2100      	movs	r1, #0
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f003 fc79 	bl	800db5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	32b0      	adds	r2, #176	@ 0xb0
 800a272:	68f9      	ldr	r1, [r7, #12]
 800a274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	32b0      	adds	r2, #176	@ 0xb0
 800a282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	7c1b      	ldrb	r3, [r3, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d138      	bne.n	800a306 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a294:	4b5e      	ldr	r3, [pc, #376]	@ (800a410 <USBD_CDC_Init+0x1e4>)
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a29c:	2202      	movs	r2, #2
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f002 fb33 	bl	800c90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a2a4:	4b5a      	ldr	r3, [pc, #360]	@ (800a410 <USBD_CDC_Init+0x1e4>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 020f 	and.w	r2, r3, #15
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3324      	adds	r3, #36	@ 0x24
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a2be:	4b55      	ldr	r3, [pc, #340]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a2c0:	7819      	ldrb	r1, [r3, #0]
 800a2c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f002 fb1e 	bl	800c90a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a2ce:	4b51      	ldr	r3, [pc, #324]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	f003 020f 	and.w	r2, r3, #15
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	440b      	add	r3, r1
 800a2e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a2ea:	4b4b      	ldr	r3, [pc, #300]	@ (800a418 <USBD_CDC_Init+0x1ec>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	f003 020f 	and.w	r2, r3, #15
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	440b      	add	r3, r1
 800a2fe:	3326      	adds	r3, #38	@ 0x26
 800a300:	2210      	movs	r2, #16
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e035      	b.n	800a372 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a306:	4b42      	ldr	r3, [pc, #264]	@ (800a410 <USBD_CDC_Init+0x1e4>)
 800a308:	7819      	ldrb	r1, [r3, #0]
 800a30a:	2340      	movs	r3, #64	@ 0x40
 800a30c:	2202      	movs	r2, #2
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f002 fafb 	bl	800c90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a314:	4b3e      	ldr	r3, [pc, #248]	@ (800a410 <USBD_CDC_Init+0x1e4>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	f003 020f 	and.w	r2, r3, #15
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	3324      	adds	r3, #36	@ 0x24
 800a32a:	2201      	movs	r2, #1
 800a32c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a32e:	4b39      	ldr	r3, [pc, #228]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a330:	7819      	ldrb	r1, [r3, #0]
 800a332:	2340      	movs	r3, #64	@ 0x40
 800a334:	2202      	movs	r2, #2
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f002 fae7 	bl	800c90a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a33c:	4b35      	ldr	r3, [pc, #212]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a354:	2201      	movs	r2, #1
 800a356:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a358:	4b2f      	ldr	r3, [pc, #188]	@ (800a418 <USBD_CDC_Init+0x1ec>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 020f 	and.w	r2, r3, #15
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	440b      	add	r3, r1
 800a36c:	3326      	adds	r3, #38	@ 0x26
 800a36e:	2210      	movs	r2, #16
 800a370:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a372:	4b29      	ldr	r3, [pc, #164]	@ (800a418 <USBD_CDC_Init+0x1ec>)
 800a374:	7819      	ldrb	r1, [r3, #0]
 800a376:	2308      	movs	r3, #8
 800a378:	2203      	movs	r2, #3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f002 fac5 	bl	800c90a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a380:	4b25      	ldr	r3, [pc, #148]	@ (800a418 <USBD_CDC_Init+0x1ec>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 020f 	and.w	r2, r3, #15
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	440b      	add	r3, r1
 800a394:	3324      	adds	r3, #36	@ 0x24
 800a396:	2201      	movs	r2, #1
 800a398:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	33b0      	adds	r3, #176	@ 0xb0
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e018      	b.n	800a406 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	7c1b      	ldrb	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a3de:	7819      	ldrb	r1, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f002 fb7c 	bl	800cae8 <USBD_LL_PrepareReceive>
 800a3f0:	e008      	b.n	800a404 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3f2:	4b08      	ldr	r3, [pc, #32]	@ (800a414 <USBD_CDC_Init+0x1e8>)
 800a3f4:	7819      	ldrb	r1, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3fc:	2340      	movs	r3, #64	@ 0x40
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f002 fb72 	bl	800cae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000097 	.word	0x20000097
 800a414:	20000098 	.word	0x20000098
 800a418:	20000099 	.word	0x20000099

0800a41c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a428:	4b3a      	ldr	r3, [pc, #232]	@ (800a514 <USBD_CDC_DeInit+0xf8>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f002 fa91 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a434:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <USBD_CDC_DeInit+0xf8>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f003 020f 	and.w	r2, r3, #15
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	3324      	adds	r3, #36	@ 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a44e:	4b32      	ldr	r3, [pc, #200]	@ (800a518 <USBD_CDC_DeInit+0xfc>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f002 fa7e 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a45a:	4b2f      	ldr	r3, [pc, #188]	@ (800a518 <USBD_CDC_DeInit+0xfc>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a476:	4b29      	ldr	r3, [pc, #164]	@ (800a51c <USBD_CDC_DeInit+0x100>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f002 fa6a 	bl	800c956 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a482:	4b26      	ldr	r3, [pc, #152]	@ (800a51c <USBD_CDC_DeInit+0x100>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 020f 	and.w	r2, r3, #15
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	3324      	adds	r3, #36	@ 0x24
 800a498:	2200      	movs	r2, #0
 800a49a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a49c:	4b1f      	ldr	r3, [pc, #124]	@ (800a51c <USBD_CDC_DeInit+0x100>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3326      	adds	r3, #38	@ 0x26
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	32b0      	adds	r2, #176	@ 0xb0
 800a4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01f      	beq.n	800a508 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	33b0      	adds	r3, #176	@ 0xb0
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	32b0      	adds	r2, #176	@ 0xb0
 800a4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f002 fb3e 	bl	800cb6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	32b0      	adds	r2, #176	@ 0xb0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000097 	.word	0x20000097
 800a518:	20000098 	.word	0x20000098
 800a51c:	20000099 	.word	0x20000099

0800a520 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	32b0      	adds	r2, #176	@ 0xb0
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e0bf      	b.n	800a6d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d050      	beq.n	800a5fe <USBD_CDC_Setup+0xde>
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	f040 80af 	bne.w	800a6c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	88db      	ldrh	r3, [r3, #6]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d03a      	beq.n	800a5e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	b25b      	sxtb	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	da1b      	bge.n	800a5ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	33b0      	adds	r3, #176	@ 0xb0
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a58a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	88d2      	ldrh	r2, [r2, #6]
 800a590:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	88db      	ldrh	r3, [r3, #6]
 800a596:	2b07      	cmp	r3, #7
 800a598:	bf28      	it	cs
 800a59a:	2307      	movcs	r3, #7
 800a59c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	89fa      	ldrh	r2, [r7, #14]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 fd87 	bl	800c0b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a5aa:	e090      	b.n	800a6ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	785a      	ldrb	r2, [r3, #1]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	88db      	ldrh	r3, [r3, #6]
 800a5ba:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5bc:	d803      	bhi.n	800a5c6 <USBD_CDC_Setup+0xa6>
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	88db      	ldrh	r3, [r3, #6]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	e000      	b.n	800a5c8 <USBD_CDC_Setup+0xa8>
 800a5c6:	2240      	movs	r2, #64	@ 0x40
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a5ce:	6939      	ldr	r1, [r7, #16]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 fd99 	bl	800c110 <USBD_CtlPrepareRx>
      break;
 800a5de:	e076      	b.n	800a6ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	33b0      	adds	r3, #176	@ 0xb0
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	7850      	ldrb	r0, [r2, #1]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	4798      	blx	r3
      break;
 800a5fc:	e067      	b.n	800a6ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	2b0b      	cmp	r3, #11
 800a604:	d851      	bhi.n	800a6aa <USBD_CDC_Setup+0x18a>
 800a606:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <USBD_CDC_Setup+0xec>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a63d 	.word	0x0800a63d
 800a610:	0800a6b9 	.word	0x0800a6b9
 800a614:	0800a6ab 	.word	0x0800a6ab
 800a618:	0800a6ab 	.word	0x0800a6ab
 800a61c:	0800a6ab 	.word	0x0800a6ab
 800a620:	0800a6ab 	.word	0x0800a6ab
 800a624:	0800a6ab 	.word	0x0800a6ab
 800a628:	0800a6ab 	.word	0x0800a6ab
 800a62c:	0800a6ab 	.word	0x0800a6ab
 800a630:	0800a6ab 	.word	0x0800a6ab
 800a634:	0800a667 	.word	0x0800a667
 800a638:	0800a691 	.word	0x0800a691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b03      	cmp	r3, #3
 800a646:	d107      	bne.n	800a658 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a648:	f107 030a 	add.w	r3, r7, #10
 800a64c:	2202      	movs	r2, #2
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 fd31 	bl	800c0b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a656:	e032      	b.n	800a6be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 fcbb 	bl	800bfd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	75fb      	strb	r3, [r7, #23]
          break;
 800a664:	e02b      	b.n	800a6be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d107      	bne.n	800a682 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a672:	f107 030d 	add.w	r3, r7, #13
 800a676:	2201      	movs	r2, #1
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 fd1c 	bl	800c0b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a680:	e01d      	b.n	800a6be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 fca6 	bl	800bfd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	75fb      	strb	r3, [r7, #23]
          break;
 800a68e:	e016      	b.n	800a6be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d00f      	beq.n	800a6bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f001 fc99 	bl	800bfd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a6a8:	e008      	b.n	800a6bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 fc92 	bl	800bfd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6b6:	e002      	b.n	800a6be <USBD_CDC_Setup+0x19e>
          break;
 800a6b8:	bf00      	nop
 800a6ba:	e008      	b.n	800a6ce <USBD_CDC_Setup+0x1ae>
          break;
 800a6bc:	bf00      	nop
      }
      break;
 800a6be:	e006      	b.n	800a6ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fc87 	bl	800bfd6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a6cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	32b0      	adds	r2, #176	@ 0xb0
 800a6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e065      	b.n	800a7ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	32b0      	adds	r2, #176	@ 0xb0
 800a70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a710:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	f003 020f 	and.w	r2, r3, #15
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	440b      	add	r3, r1
 800a724:	3318      	adds	r3, #24
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d02f      	beq.n	800a78c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	f003 020f 	and.w	r2, r3, #15
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	4613      	mov	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	440b      	add	r3, r1
 800a73e:	3318      	adds	r3, #24
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	f003 010f 	and.w	r1, r3, #15
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	460b      	mov	r3, r1
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4403      	add	r3, r0
 800a754:	331c      	adds	r3, #28
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	fbb2 f1f3 	udiv	r1, r2, r3
 800a75c:	fb01 f303 	mul.w	r3, r1, r3
 800a760:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a762:	2b00      	cmp	r3, #0
 800a764:	d112      	bne.n	800a78c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3318      	adds	r3, #24
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a77e:	78f9      	ldrb	r1, [r7, #3]
 800a780:	2300      	movs	r3, #0
 800a782:	2200      	movs	r2, #0
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f002 f98e 	bl	800caa6 <USBD_LL_Transmit>
 800a78a:	e01f      	b.n	800a7cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	33b0      	adds	r3, #176	@ 0xb0
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d010      	beq.n	800a7cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	33b0      	adds	r3, #176	@ 0xb0
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	32b0      	adds	r2, #176	@ 0xb0
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	32b0      	adds	r2, #176	@ 0xb0
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	e01a      	b.n	800a83e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f002 f98c 	bl	800cb2a <USBD_LL_GetRxDataSize>
 800a812:	4602      	mov	r2, r0
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	33b0      	adds	r3, #176	@ 0xb0
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a838:	4611      	mov	r1, r2
 800a83a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	32b0      	adds	r2, #176	@ 0xb0
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a864:	2303      	movs	r3, #3
 800a866:	e024      	b.n	800a8b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	33b0      	adds	r3, #176	@ 0xb0
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d019      	beq.n	800a8b0 <USBD_CDC_EP0_RxReady+0x6a>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a882:	2bff      	cmp	r3, #255	@ 0xff
 800a884:	d014      	beq.n	800a8b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	33b0      	adds	r3, #176	@ 0xb0
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a89e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a8a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	22ff      	movs	r2, #255	@ 0xff
 800a8ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8c4:	2182      	movs	r1, #130	@ 0x82
 800a8c6:	4818      	ldr	r0, [pc, #96]	@ (800a928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8c8:	f000 fd4f 	bl	800b36a <USBD_GetEpDesc>
 800a8cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	4815      	ldr	r0, [pc, #84]	@ (800a928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8d2:	f000 fd4a 	bl	800b36a <USBD_GetEpDesc>
 800a8d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8d8:	2181      	movs	r1, #129	@ 0x81
 800a8da:	4813      	ldr	r0, [pc, #76]	@ (800a928 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a8dc:	f000 fd45 	bl	800b36a <USBD_GetEpDesc>
 800a8e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	2210      	movs	r2, #16
 800a8ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8fc:	711a      	strb	r2, [r3, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d006      	beq.n	800a916 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a910:	711a      	strb	r2, [r3, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2243      	movs	r2, #67	@ 0x43
 800a91a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a91c:	4b02      	ldr	r3, [pc, #8]	@ (800a928 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20000054 	.word	0x20000054

0800a92c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a934:	2182      	movs	r1, #130	@ 0x82
 800a936:	4818      	ldr	r0, [pc, #96]	@ (800a998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a938:	f000 fd17 	bl	800b36a <USBD_GetEpDesc>
 800a93c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a93e:	2101      	movs	r1, #1
 800a940:	4815      	ldr	r0, [pc, #84]	@ (800a998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a942:	f000 fd12 	bl	800b36a <USBD_GetEpDesc>
 800a946:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a948:	2181      	movs	r1, #129	@ 0x81
 800a94a:	4813      	ldr	r0, [pc, #76]	@ (800a998 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a94c:	f000 fd0d 	bl	800b36a <USBD_GetEpDesc>
 800a950:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2210      	movs	r2, #16
 800a95c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d006      	beq.n	800a972 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	2200      	movs	r2, #0
 800a968:	711a      	strb	r2, [r3, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f042 0202 	orr.w	r2, r2, #2
 800a970:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	711a      	strb	r2, [r3, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f042 0202 	orr.w	r2, r2, #2
 800a984:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2243      	movs	r2, #67	@ 0x43
 800a98a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a98c:	4b02      	ldr	r3, [pc, #8]	@ (800a998 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000054 	.word	0x20000054

0800a99c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9a4:	2182      	movs	r1, #130	@ 0x82
 800a9a6:	4818      	ldr	r0, [pc, #96]	@ (800aa08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9a8:	f000 fcdf 	bl	800b36a <USBD_GetEpDesc>
 800a9ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4815      	ldr	r0, [pc, #84]	@ (800aa08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9b2:	f000 fcda 	bl	800b36a <USBD_GetEpDesc>
 800a9b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9b8:	2181      	movs	r1, #129	@ 0x81
 800a9ba:	4813      	ldr	r0, [pc, #76]	@ (800aa08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a9bc:	f000 fcd5 	bl	800b36a <USBD_GetEpDesc>
 800a9c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2210      	movs	r2, #16
 800a9cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d006      	beq.n	800a9e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9dc:	711a      	strb	r2, [r3, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d006      	beq.n	800a9f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9f0:	711a      	strb	r2, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2243      	movs	r2, #67	@ 0x43
 800a9fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9fc:	4b02      	ldr	r3, [pc, #8]	@ (800aa08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000054 	.word	0x20000054

0800aa0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	220a      	movs	r2, #10
 800aa18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa1a:	4b03      	ldr	r3, [pc, #12]	@ (800aa28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	20000010 	.word	0x20000010

0800aa2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e009      	b.n	800aa54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	33b0      	adds	r3, #176	@ 0xb0
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	32b0      	adds	r2, #176	@ 0xb0
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e008      	b.n	800aa98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	32b0      	adds	r2, #176	@ 0xb0
 800aab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aabc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e004      	b.n	800aad2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
	...

0800aae0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	32b0      	adds	r2, #176	@ 0xb0
 800aaf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e025      	b.n	800ab52 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d11f      	bne.n	800ab50 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ab18:	4b10      	ldr	r3, [pc, #64]	@ (800ab5c <USBD_CDC_TransmitPacket+0x7c>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4403      	add	r3, r0
 800ab32:	3318      	adds	r3, #24
 800ab34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ab36:	4b09      	ldr	r3, [pc, #36]	@ (800ab5c <USBD_CDC_TransmitPacket+0x7c>)
 800ab38:	7819      	ldrb	r1, [r3, #0]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 ffad 	bl	800caa6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000097 	.word	0x20000097

0800ab60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32b0      	adds	r2, #176	@ 0xb0
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32b0      	adds	r2, #176	@ 0xb0
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e018      	b.n	800abc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7c1b      	ldrb	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab96:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <USBD_CDC_ReceivePacket+0x68>)
 800ab98:	7819      	ldrb	r1, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 ff9f 	bl	800cae8 <USBD_LL_PrepareReceive>
 800abaa:	e008      	b.n	800abbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abac:	4b06      	ldr	r3, [pc, #24]	@ (800abc8 <USBD_CDC_ReceivePacket+0x68>)
 800abae:	7819      	ldrb	r1, [r3, #0]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abb6:	2340      	movs	r3, #64	@ 0x40
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 ff95 	bl	800cae8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20000098 	.word	0x20000098

0800abcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e01f      	b.n	800ac24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	79fa      	ldrb	r2, [r7, #7]
 800ac16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f001 fe0f 	bl	800c83c <USBD_LL_Init>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e025      	b.n	800ac90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	32ae      	adds	r2, #174	@ 0xae
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00f      	beq.n	800ac80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	32ae      	adds	r2, #174	@ 0xae
 800ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac70:	f107 020e 	add.w	r2, r7, #14
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	4602      	mov	r2, r0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 fe17 	bl	800c8d4 <USBD_LL_Start>
 800aca6:	4603      	mov	r3, r0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	460b      	mov	r3, r1
 800acd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d009      	beq.n	800acf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	78fa      	ldrb	r2, [r7, #3]
 800acea:	4611      	mov	r1, r2
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4798      	blx	r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	78fa      	ldrb	r2, [r7, #3]
 800ad18:	4611      	mov	r1, r2
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	4798      	blx	r3
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 f90c 	bl	800bf62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad66:	f003 031f 	and.w	r3, r3, #31
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d01a      	beq.n	800ada4 <USBD_LL_SetupStage+0x72>
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d822      	bhi.n	800adb8 <USBD_LL_SetupStage+0x86>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <USBD_LL_SetupStage+0x4a>
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d00a      	beq.n	800ad90 <USBD_LL_SetupStage+0x5e>
 800ad7a:	e01d      	b.n	800adb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fb63 	bl	800b450 <USBD_StdDevReq>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8e:	e020      	b.n	800add2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fbcb 	bl	800b534 <USBD_StdItfReq>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
      break;
 800ada2:	e016      	b.n	800add2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fc2d 	bl	800b60c <USBD_StdEPReq>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]
      break;
 800adb6:	e00c      	b.n	800add2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800adbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 fde4 	bl	800c994 <USBD_LL_StallEP>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
      break;
 800add0:	bf00      	nop
  }

  return ret;
 800add2:	7bfb      	ldrb	r3, [r7, #15]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	460b      	mov	r3, r1
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d16e      	bne.n	800aed2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800adfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	f040 8098 	bne.w	800af38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d913      	bls.n	800ae3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	bf28      	it	cs
 800ae2e:	4613      	movcs	r3, r2
 800ae30:	461a      	mov	r2, r3
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f001 f988 	bl	800c14a <USBD_CtlContinueRx>
 800ae3a:	e07d      	b.n	800af38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae42:	f003 031f 	and.w	r3, r3, #31
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d014      	beq.n	800ae74 <USBD_LL_DataOutStage+0x98>
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d81d      	bhi.n	800ae8a <USBD_LL_DataOutStage+0xae>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d002      	beq.n	800ae58 <USBD_LL_DataOutStage+0x7c>
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d003      	beq.n	800ae5e <USBD_LL_DataOutStage+0x82>
 800ae56:	e018      	b.n	800ae8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	75bb      	strb	r3, [r7, #22]
            break;
 800ae5c:	e018      	b.n	800ae90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	4619      	mov	r1, r3
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 fa64 	bl	800b336 <USBD_CoreFindIF>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75bb      	strb	r3, [r7, #22]
            break;
 800ae72:	e00d      	b.n	800ae90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 fa66 	bl	800b350 <USBD_CoreFindEP>
 800ae84:	4603      	mov	r3, r0
 800ae86:	75bb      	strb	r3, [r7, #22]
            break;
 800ae88:	e002      	b.n	800ae90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75bb      	strb	r3, [r7, #22]
            break;
 800ae8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ae90:	7dbb      	ldrb	r3, [r7, #22]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d119      	bne.n	800aeca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d113      	bne.n	800aeca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aea2:	7dba      	ldrb	r2, [r7, #22]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	32ae      	adds	r2, #174	@ 0xae
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00b      	beq.n	800aeca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aeb2:	7dba      	ldrb	r2, [r7, #22]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aeba:	7dba      	ldrb	r2, [r7, #22]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	32ae      	adds	r2, #174	@ 0xae
 800aec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f001 f94e 	bl	800c16c <USBD_CtlSendStatus>
 800aed0:	e032      	b.n	800af38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	4619      	mov	r1, r3
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 fa37 	bl	800b350 <USBD_CoreFindEP>
 800aee2:	4603      	mov	r3, r0
 800aee4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aee6:	7dbb      	ldrb	r3, [r7, #22]
 800aee8:	2bff      	cmp	r3, #255	@ 0xff
 800aeea:	d025      	beq.n	800af38 <USBD_LL_DataOutStage+0x15c>
 800aeec:	7dbb      	ldrb	r3, [r7, #22]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d122      	bne.n	800af38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d117      	bne.n	800af2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aefe:	7dba      	ldrb	r2, [r7, #22]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	32ae      	adds	r2, #174	@ 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00f      	beq.n	800af2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af0e:	7dba      	ldrb	r2, [r7, #22]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af16:	7dba      	ldrb	r2, [r7, #22]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	32ae      	adds	r2, #174	@ 0xae
 800af1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	7afa      	ldrb	r2, [r7, #11]
 800af24:	4611      	mov	r1, r2
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	4798      	blx	r3
 800af2a:	4603      	mov	r3, r0
 800af2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	e000      	b.n	800af3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	460b      	mov	r3, r1
 800af4c:	607a      	str	r2, [r7, #4]
 800af4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d16f      	bne.n	800b036 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3314      	adds	r3, #20
 800af5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af62:	2b02      	cmp	r3, #2
 800af64:	d15a      	bne.n	800b01c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d914      	bls.n	800af9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	689a      	ldr	r2, [r3, #8]
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	461a      	mov	r2, r3
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f001 f8b0 	bl	800c0ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af8e:	2300      	movs	r3, #0
 800af90:	2200      	movs	r2, #0
 800af92:	2100      	movs	r1, #0
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f001 fda7 	bl	800cae8 <USBD_LL_PrepareReceive>
 800af9a:	e03f      	b.n	800b01c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d11c      	bne.n	800afe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d316      	bcc.n	800afe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d20f      	bcs.n	800afe2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afc2:	2200      	movs	r2, #0
 800afc4:	2100      	movs	r1, #0
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f001 f891 	bl	800c0ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f001 fd84 	bl	800cae8 <USBD_LL_PrepareReceive>
 800afe0:	e01c      	b.n	800b01c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b03      	cmp	r3, #3
 800afec:	d10f      	bne.n	800b00e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d009      	beq.n	800b00e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b00e:	2180      	movs	r1, #128	@ 0x80
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f001 fcbf 	bl	800c994 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f001 f8bb 	bl	800c192 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d03a      	beq.n	800b09c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7ff fe42 	bl	800acb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b034:	e032      	b.n	800b09c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b036:	7afb      	ldrb	r3, [r7, #11]
 800b038:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	4619      	mov	r1, r3
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f985 	bl	800b350 <USBD_CoreFindEP>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	2bff      	cmp	r3, #255	@ 0xff
 800b04e:	d025      	beq.n	800b09c <USBD_LL_DataInStage+0x15a>
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d122      	bne.n	800b09c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d11c      	bne.n	800b09c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b062:	7dfa      	ldrb	r2, [r7, #23]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	32ae      	adds	r2, #174	@ 0xae
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d014      	beq.n	800b09c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b072:	7dfa      	ldrb	r2, [r7, #23]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b07a:	7dfa      	ldrb	r2, [r7, #23]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	32ae      	adds	r2, #174	@ 0xae
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	7afa      	ldrb	r2, [r7, #11]
 800b088:	4611      	mov	r1, r2
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	4798      	blx	r3
 800b08e:	4603      	mov	r3, r0
 800b090:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b092:	7dbb      	ldrb	r3, [r7, #22]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b098:	7dbb      	ldrb	r3, [r7, #22]
 800b09a:	e000      	b.n	800b09e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d014      	beq.n	800b10c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00e      	beq.n	800b10c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6852      	ldr	r2, [r2, #4]
 800b0fa:	b2d2      	uxtb	r2, r2
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b10c:	2340      	movs	r3, #64	@ 0x40
 800b10e:	2200      	movs	r2, #0
 800b110:	2100      	movs	r1, #0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fbf9 	bl	800c90a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2240      	movs	r2, #64	@ 0x40
 800b124:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b128:	2340      	movs	r3, #64	@ 0x40
 800b12a:	2200      	movs	r2, #0
 800b12c:	2180      	movs	r1, #128	@ 0x80
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 fbeb 	bl	800c90a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2240      	movs	r2, #64	@ 0x40
 800b13e:	621a      	str	r2, [r3, #32]

  return ret;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	78fa      	ldrb	r2, [r7, #3]
 800b15a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d006      	beq.n	800b18c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b184:	b2da      	uxtb	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2204      	movs	r2, #4
 800b190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d106      	bne.n	800b1c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d110      	bne.n	800b208 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	460b      	mov	r3, r1
 800b21c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	32ae      	adds	r2, #174	@ 0xae
 800b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b230:	2303      	movs	r3, #3
 800b232:	e01c      	b.n	800b26e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d115      	bne.n	800b26c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	32ae      	adds	r2, #174	@ 0xae
 800b24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24e:	6a1b      	ldr	r3, [r3, #32]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00b      	beq.n	800b26c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	32ae      	adds	r2, #174	@ 0xae
 800b25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	4611      	mov	r1, r2
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b082      	sub	sp, #8
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	460b      	mov	r3, r1
 800b280:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	32ae      	adds	r2, #174	@ 0xae
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	e01c      	b.n	800b2d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d115      	bne.n	800b2d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	32ae      	adds	r2, #174	@ 0xae
 800b2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00b      	beq.n	800b2d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	32ae      	adds	r2, #174	@ 0xae
 800b2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c8:	78fa      	ldrb	r2, [r7, #3]
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b083      	sub	sp, #12
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00e      	beq.n	800b32c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	6852      	ldr	r2, [r2, #4]
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	4611      	mov	r1, r2
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b328:	2303      	movs	r3, #3
 800b32a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	460b      	mov	r3, r1
 800b340:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b342:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b35c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b35e:	4618      	mov	r0, r3
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b086      	sub	sp, #24
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	460b      	mov	r3, r1
 800b374:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	885b      	ldrh	r3, [r3, #2]
 800b386:	b29b      	uxth	r3, r3
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	7812      	ldrb	r2, [r2, #0]
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d91f      	bls.n	800b3d0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b396:	e013      	b.n	800b3c0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b398:	f107 030a 	add.w	r3, r7, #10
 800b39c:	4619      	mov	r1, r3
 800b39e:	6978      	ldr	r0, [r7, #20]
 800b3a0:	f000 f81b 	bl	800b3da <USBD_GetNextDesc>
 800b3a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d108      	bne.n	800b3c0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	789b      	ldrb	r3, [r3, #2]
 800b3b6:	78fa      	ldrb	r2, [r7, #3]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d008      	beq.n	800b3ce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	885b      	ldrh	r3, [r3, #2]
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	897b      	ldrh	r3, [r7, #10]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d8e5      	bhi.n	800b398 <USBD_GetEpDesc+0x2e>
 800b3cc:	e000      	b.n	800b3d0 <USBD_GetEpDesc+0x66>
          break;
 800b3ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b3d0:	693b      	ldr	r3, [r7, #16]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3718      	adds	r7, #24
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	7812      	ldrb	r2, [r2, #0]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4413      	add	r3, r2
 800b402:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b412:	b480      	push	{r7}
 800b414:	b087      	sub	sp, #28
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	3301      	adds	r3, #1
 800b428:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b430:	8a3b      	ldrh	r3, [r7, #16]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	b21a      	sxth	r2, r3
 800b436:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b440:	89fb      	ldrh	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b466:	2b40      	cmp	r3, #64	@ 0x40
 800b468:	d005      	beq.n	800b476 <USBD_StdDevReq+0x26>
 800b46a:	2b40      	cmp	r3, #64	@ 0x40
 800b46c:	d857      	bhi.n	800b51e <USBD_StdDevReq+0xce>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00f      	beq.n	800b492 <USBD_StdDevReq+0x42>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d153      	bne.n	800b51e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	32ae      	adds	r2, #174	@ 0xae
 800b480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	4798      	blx	r3
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
      break;
 800b490:	e04a      	b.n	800b528 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	785b      	ldrb	r3, [r3, #1]
 800b496:	2b09      	cmp	r3, #9
 800b498:	d83b      	bhi.n	800b512 <USBD_StdDevReq+0xc2>
 800b49a:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a0 <USBD_StdDevReq+0x50>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4f5 	.word	0x0800b4f5
 800b4a4:	0800b509 	.word	0x0800b509
 800b4a8:	0800b513 	.word	0x0800b513
 800b4ac:	0800b4ff 	.word	0x0800b4ff
 800b4b0:	0800b513 	.word	0x0800b513
 800b4b4:	0800b4d3 	.word	0x0800b4d3
 800b4b8:	0800b4c9 	.word	0x0800b4c9
 800b4bc:	0800b513 	.word	0x0800b513
 800b4c0:	0800b4eb 	.word	0x0800b4eb
 800b4c4:	0800b4dd 	.word	0x0800b4dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fa3c 	bl	800b948 <USBD_GetDescriptor>
          break;
 800b4d0:	e024      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fba1 	bl	800bc1c <USBD_SetAddress>
          break;
 800b4da:	e01f      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fbe0 	bl	800bca4 <USBD_SetConfig>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
          break;
 800b4e8:	e018      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fc83 	bl	800bdf8 <USBD_GetConfig>
          break;
 800b4f2:	e013      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fcb4 	bl	800be64 <USBD_GetStatus>
          break;
 800b4fc:	e00e      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b4fe:	6839      	ldr	r1, [r7, #0]
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fce3 	bl	800becc <USBD_SetFeature>
          break;
 800b506:	e009      	b.n	800b51c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fd07 	bl	800bf1e <USBD_ClrFeature>
          break;
 800b510:	e004      	b.n	800b51c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fd5e 	bl	800bfd6 <USBD_CtlError>
          break;
 800b51a:	bf00      	nop
      }
      break;
 800b51c:	e004      	b.n	800b528 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fd58 	bl	800bfd6 <USBD_CtlError>
      break;
 800b526:	bf00      	nop
  }

  return ret;
 800b528:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop

0800b534 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b54a:	2b40      	cmp	r3, #64	@ 0x40
 800b54c:	d005      	beq.n	800b55a <USBD_StdItfReq+0x26>
 800b54e:	2b40      	cmp	r3, #64	@ 0x40
 800b550:	d852      	bhi.n	800b5f8 <USBD_StdItfReq+0xc4>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <USBD_StdItfReq+0x26>
 800b556:	2b20      	cmp	r3, #32
 800b558:	d14e      	bne.n	800b5f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	3b01      	subs	r3, #1
 800b564:	2b02      	cmp	r3, #2
 800b566:	d840      	bhi.n	800b5ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	889b      	ldrh	r3, [r3, #4]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d836      	bhi.n	800b5e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	889b      	ldrh	r3, [r3, #4]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff fedb 	bl	800b336 <USBD_CoreFindIF>
 800b580:	4603      	mov	r3, r0
 800b582:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2bff      	cmp	r3, #255	@ 0xff
 800b588:	d01d      	beq.n	800b5c6 <USBD_StdItfReq+0x92>
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d11a      	bne.n	800b5c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b590:	7bba      	ldrb	r2, [r7, #14]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	32ae      	adds	r2, #174	@ 0xae
 800b596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00f      	beq.n	800b5c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b5a0:	7bba      	ldrb	r2, [r7, #14]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5a8:	7bba      	ldrb	r2, [r7, #14]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	32ae      	adds	r2, #174	@ 0xae
 800b5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5be:	e004      	b.n	800b5ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5c4:	e001      	b.n	800b5ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	88db      	ldrh	r3, [r3, #6]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d110      	bne.n	800b5f4 <USBD_StdItfReq+0xc0>
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10d      	bne.n	800b5f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fdc7 	bl	800c16c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b5de:	e009      	b.n	800b5f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fcf7 	bl	800bfd6 <USBD_CtlError>
          break;
 800b5e8:	e004      	b.n	800b5f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fcf2 	bl	800bfd6 <USBD_CtlError>
          break;
 800b5f2:	e000      	b.n	800b5f6 <USBD_StdItfReq+0xc2>
          break;
 800b5f4:	bf00      	nop
      }
      break;
 800b5f6:	e004      	b.n	800b602 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fceb 	bl	800bfd6 <USBD_CtlError>
      break;
 800b600:	bf00      	nop
  }

  return ret;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	889b      	ldrh	r3, [r3, #4]
 800b61e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b628:	2b40      	cmp	r3, #64	@ 0x40
 800b62a:	d007      	beq.n	800b63c <USBD_StdEPReq+0x30>
 800b62c:	2b40      	cmp	r3, #64	@ 0x40
 800b62e:	f200 817f 	bhi.w	800b930 <USBD_StdEPReq+0x324>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d02a      	beq.n	800b68c <USBD_StdEPReq+0x80>
 800b636:	2b20      	cmp	r3, #32
 800b638:	f040 817a 	bne.w	800b930 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff fe85 	bl	800b350 <USBD_CoreFindEP>
 800b646:	4603      	mov	r3, r0
 800b648:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b64a:	7b7b      	ldrb	r3, [r7, #13]
 800b64c:	2bff      	cmp	r3, #255	@ 0xff
 800b64e:	f000 8174 	beq.w	800b93a <USBD_StdEPReq+0x32e>
 800b652:	7b7b      	ldrb	r3, [r7, #13]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f040 8170 	bne.w	800b93a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b65a:	7b7a      	ldrb	r2, [r7, #13]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b662:	7b7a      	ldrb	r2, [r7, #13]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	32ae      	adds	r2, #174	@ 0xae
 800b668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 8163 	beq.w	800b93a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b674:	7b7a      	ldrb	r2, [r7, #13]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	32ae      	adds	r2, #174	@ 0xae
 800b67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	4798      	blx	r3
 800b686:	4603      	mov	r3, r0
 800b688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b68a:	e156      	b.n	800b93a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	2b03      	cmp	r3, #3
 800b692:	d008      	beq.n	800b6a6 <USBD_StdEPReq+0x9a>
 800b694:	2b03      	cmp	r3, #3
 800b696:	f300 8145 	bgt.w	800b924 <USBD_StdEPReq+0x318>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 809b 	beq.w	800b7d6 <USBD_StdEPReq+0x1ca>
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d03c      	beq.n	800b71e <USBD_StdEPReq+0x112>
 800b6a4:	e13e      	b.n	800b924 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d002      	beq.n	800b6b8 <USBD_StdEPReq+0xac>
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d016      	beq.n	800b6e4 <USBD_StdEPReq+0xd8>
 800b6b6:	e02c      	b.n	800b712 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <USBD_StdEPReq+0xce>
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
 800b6c0:	2b80      	cmp	r3, #128	@ 0x80
 800b6c2:	d00a      	beq.n	800b6da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b6c4:	7bbb      	ldrb	r3, [r7, #14]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 f963 	bl	800c994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6ce:	2180      	movs	r1, #128	@ 0x80
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 f95f 	bl	800c994 <USBD_LL_StallEP>
 800b6d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b6d8:	e020      	b.n	800b71c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fc7a 	bl	800bfd6 <USBD_CtlError>
              break;
 800b6e2:	e01b      	b.n	800b71c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	885b      	ldrh	r3, [r3, #2]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10e      	bne.n	800b70a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00b      	beq.n	800b70a <USBD_StdEPReq+0xfe>
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	2b80      	cmp	r3, #128	@ 0x80
 800b6f6:	d008      	beq.n	800b70a <USBD_StdEPReq+0xfe>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	88db      	ldrh	r3, [r3, #6]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	4619      	mov	r1, r3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f001 f945 	bl	800c994 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fd2e 	bl	800c16c <USBD_CtlSendStatus>

              break;
 800b710:	e004      	b.n	800b71c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fc5e 	bl	800bfd6 <USBD_CtlError>
              break;
 800b71a:	bf00      	nop
          }
          break;
 800b71c:	e107      	b.n	800b92e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b02      	cmp	r3, #2
 800b728:	d002      	beq.n	800b730 <USBD_StdEPReq+0x124>
 800b72a:	2b03      	cmp	r3, #3
 800b72c:	d016      	beq.n	800b75c <USBD_StdEPReq+0x150>
 800b72e:	e04b      	b.n	800b7c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00d      	beq.n	800b752 <USBD_StdEPReq+0x146>
 800b736:	7bbb      	ldrb	r3, [r7, #14]
 800b738:	2b80      	cmp	r3, #128	@ 0x80
 800b73a:	d00a      	beq.n	800b752 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f927 	bl	800c994 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b746:	2180      	movs	r1, #128	@ 0x80
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f001 f923 	bl	800c994 <USBD_LL_StallEP>
 800b74e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b750:	e040      	b.n	800b7d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fc3e 	bl	800bfd6 <USBD_CtlError>
              break;
 800b75a:	e03b      	b.n	800b7d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	885b      	ldrh	r3, [r3, #2]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d136      	bne.n	800b7d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d004      	beq.n	800b778 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 f92d 	bl	800c9d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fcf7 	bl	800c16c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b77e:	7bbb      	ldrb	r3, [r7, #14]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff fde4 	bl	800b350 <USBD_CoreFindEP>
 800b788:	4603      	mov	r3, r0
 800b78a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b78c:	7b7b      	ldrb	r3, [r7, #13]
 800b78e:	2bff      	cmp	r3, #255	@ 0xff
 800b790:	d01f      	beq.n	800b7d2 <USBD_StdEPReq+0x1c6>
 800b792:	7b7b      	ldrb	r3, [r7, #13]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11c      	bne.n	800b7d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b798:	7b7a      	ldrb	r2, [r7, #13]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b7a0:	7b7a      	ldrb	r2, [r7, #13]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	32ae      	adds	r2, #174	@ 0xae
 800b7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d010      	beq.n	800b7d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7b0:	7b7a      	ldrb	r2, [r7, #13]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	32ae      	adds	r2, #174	@ 0xae
 800b7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b7c6:	e004      	b.n	800b7d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fc03 	bl	800bfd6 <USBD_CtlError>
              break;
 800b7d0:	e000      	b.n	800b7d4 <USBD_StdEPReq+0x1c8>
              break;
 800b7d2:	bf00      	nop
          }
          break;
 800b7d4:	e0ab      	b.n	800b92e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d002      	beq.n	800b7e8 <USBD_StdEPReq+0x1dc>
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d032      	beq.n	800b84c <USBD_StdEPReq+0x240>
 800b7e6:	e097      	b.n	800b918 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d007      	beq.n	800b7fe <USBD_StdEPReq+0x1f2>
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	2b80      	cmp	r3, #128	@ 0x80
 800b7f2:	d004      	beq.n	800b7fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fbed 	bl	800bfd6 <USBD_CtlError>
                break;
 800b7fc:	e091      	b.n	800b922 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b802:	2b00      	cmp	r3, #0
 800b804:	da0b      	bge.n	800b81e <USBD_StdEPReq+0x212>
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	3310      	adds	r3, #16
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	4413      	add	r3, r2
 800b81a:	3304      	adds	r3, #4
 800b81c:	e00b      	b.n	800b836 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	4413      	add	r3, r2
 800b834:	3304      	adds	r3, #4
 800b836:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	2202      	movs	r2, #2
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fc37 	bl	800c0b8 <USBD_CtlSendData>
              break;
 800b84a:	e06a      	b.n	800b922 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b850:	2b00      	cmp	r3, #0
 800b852:	da11      	bge.n	800b878 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b854:	7bbb      	ldrb	r3, [r7, #14]
 800b856:	f003 020f 	and.w	r2, r3, #15
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	440b      	add	r3, r1
 800b866:	3324      	adds	r3, #36	@ 0x24
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d117      	bne.n	800b89e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fbb0 	bl	800bfd6 <USBD_CtlError>
                  break;
 800b876:	e054      	b.n	800b922 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	f003 020f 	and.w	r2, r3, #15
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	440b      	add	r3, r1
 800b88a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fb9d 	bl	800bfd6 <USBD_CtlError>
                  break;
 800b89c:	e041      	b.n	800b922 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b89e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	da0b      	bge.n	800b8be <USBD_StdEPReq+0x2b2>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	e00b      	b.n	800b8d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <USBD_StdEPReq+0x2d8>
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	2b80      	cmp	r3, #128	@ 0x80
 800b8e2:	d103      	bne.n	800b8ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e00e      	b.n	800b90a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 f88d 	bl	800ca10 <USBD_LL_IsStallEP>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2201      	movs	r2, #1
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	e002      	b.n	800b90a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2202      	movs	r2, #2
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fbd1 	bl	800c0b8 <USBD_CtlSendData>
              break;
 800b916:	e004      	b.n	800b922 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fb5b 	bl	800bfd6 <USBD_CtlError>
              break;
 800b920:	bf00      	nop
          }
          break;
 800b922:	e004      	b.n	800b92e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fb55 	bl	800bfd6 <USBD_CtlError>
          break;
 800b92c:	bf00      	nop
      }
      break;
 800b92e:	e005      	b.n	800b93c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fb4f 	bl	800bfd6 <USBD_CtlError>
      break;
 800b938:	e000      	b.n	800b93c <USBD_StdEPReq+0x330>
      break;
 800b93a:	bf00      	nop
  }

  return ret;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b952:	2300      	movs	r3, #0
 800b954:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b95a:	2300      	movs	r3, #0
 800b95c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	0a1b      	lsrs	r3, r3, #8
 800b964:	b29b      	uxth	r3, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	2b06      	cmp	r3, #6
 800b96a:	f200 8128 	bhi.w	800bbbe <USBD_GetDescriptor+0x276>
 800b96e:	a201      	add	r2, pc, #4	@ (adr r2, 800b974 <USBD_GetDescriptor+0x2c>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800b991 	.word	0x0800b991
 800b978:	0800b9a9 	.word	0x0800b9a9
 800b97c:	0800b9e9 	.word	0x0800b9e9
 800b980:	0800bbbf 	.word	0x0800bbbf
 800b984:	0800bbbf 	.word	0x0800bbbf
 800b988:	0800bb5f 	.word	0x0800bb5f
 800b98c:	0800bb8b 	.word	0x0800bb8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	7c12      	ldrb	r2, [r2, #16]
 800b99c:	f107 0108 	add.w	r1, r7, #8
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	4798      	blx	r3
 800b9a4:	60f8      	str	r0, [r7, #12]
      break;
 800b9a6:	e112      	b.n	800bbce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7c1b      	ldrb	r3, [r3, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10d      	bne.n	800b9cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b8:	f107 0208 	add.w	r2, r7, #8
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
 800b9c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b9ca:	e100      	b.n	800bbce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	f107 0208 	add.w	r2, r7, #8
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4798      	blx	r3
 800b9dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	701a      	strb	r2, [r3, #0]
      break;
 800b9e6:	e0f2      	b.n	800bbce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b05      	cmp	r3, #5
 800b9f0:	f200 80ac 	bhi.w	800bb4c <USBD_GetDescriptor+0x204>
 800b9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b9fc <USBD_GetDescriptor+0xb4>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800ba15 	.word	0x0800ba15
 800ba00:	0800ba49 	.word	0x0800ba49
 800ba04:	0800ba7d 	.word	0x0800ba7d
 800ba08:	0800bab1 	.word	0x0800bab1
 800ba0c:	0800bae5 	.word	0x0800bae5
 800ba10:	0800bb19 	.word	0x0800bb19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00b      	beq.n	800ba38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	7c12      	ldrb	r2, [r2, #16]
 800ba2c:	f107 0108 	add.w	r1, r7, #8
 800ba30:	4610      	mov	r0, r2
 800ba32:	4798      	blx	r3
 800ba34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba36:	e091      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 facb 	bl	800bfd6 <USBD_CtlError>
            err++;
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	3301      	adds	r3, #1
 800ba44:	72fb      	strb	r3, [r7, #11]
          break;
 800ba46:	e089      	b.n	800bb5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00b      	beq.n	800ba6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	7c12      	ldrb	r2, [r2, #16]
 800ba60:	f107 0108 	add.w	r1, r7, #8
 800ba64:	4610      	mov	r0, r2
 800ba66:	4798      	blx	r3
 800ba68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba6a:	e077      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fab1 	bl	800bfd6 <USBD_CtlError>
            err++;
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	3301      	adds	r3, #1
 800ba78:	72fb      	strb	r3, [r7, #11]
          break;
 800ba7a:	e06f      	b.n	800bb5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00b      	beq.n	800baa0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	7c12      	ldrb	r2, [r2, #16]
 800ba94:	f107 0108 	add.w	r1, r7, #8
 800ba98:	4610      	mov	r0, r2
 800ba9a:	4798      	blx	r3
 800ba9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba9e:	e05d      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baa0:	6839      	ldr	r1, [r7, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fa97 	bl	800bfd6 <USBD_CtlError>
            err++;
 800baa8:	7afb      	ldrb	r3, [r7, #11]
 800baaa:	3301      	adds	r3, #1
 800baac:	72fb      	strb	r3, [r7, #11]
          break;
 800baae:	e055      	b.n	800bb5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bab6:	691b      	ldr	r3, [r3, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	7c12      	ldrb	r2, [r2, #16]
 800bac8:	f107 0108 	add.w	r1, r7, #8
 800bacc:	4610      	mov	r0, r2
 800bace:	4798      	blx	r3
 800bad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bad2:	e043      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa7d 	bl	800bfd6 <USBD_CtlError>
            err++;
 800badc:	7afb      	ldrb	r3, [r7, #11]
 800bade:	3301      	adds	r3, #1
 800bae0:	72fb      	strb	r3, [r7, #11]
          break;
 800bae2:	e03b      	b.n	800bb5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	7c12      	ldrb	r2, [r2, #16]
 800bafc:	f107 0108 	add.w	r1, r7, #8
 800bb00:	4610      	mov	r0, r2
 800bb02:	4798      	blx	r3
 800bb04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb06:	e029      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa63 	bl	800bfd6 <USBD_CtlError>
            err++;
 800bb10:	7afb      	ldrb	r3, [r7, #11]
 800bb12:	3301      	adds	r3, #1
 800bb14:	72fb      	strb	r3, [r7, #11]
          break;
 800bb16:	e021      	b.n	800bb5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00b      	beq.n	800bb3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	7c12      	ldrb	r2, [r2, #16]
 800bb30:	f107 0108 	add.w	r1, r7, #8
 800bb34:	4610      	mov	r0, r2
 800bb36:	4798      	blx	r3
 800bb38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb3a:	e00f      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb3c:	6839      	ldr	r1, [r7, #0]
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa49 	bl	800bfd6 <USBD_CtlError>
            err++;
 800bb44:	7afb      	ldrb	r3, [r7, #11]
 800bb46:	3301      	adds	r3, #1
 800bb48:	72fb      	strb	r3, [r7, #11]
          break;
 800bb4a:	e007      	b.n	800bb5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fa41 	bl	800bfd6 <USBD_CtlError>
          err++;
 800bb54:	7afb      	ldrb	r3, [r7, #11]
 800bb56:	3301      	adds	r3, #1
 800bb58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bb5a:	bf00      	nop
      }
      break;
 800bb5c:	e037      	b.n	800bbce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	7c1b      	ldrb	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb6e:	f107 0208 	add.w	r2, r7, #8
 800bb72:	4610      	mov	r0, r2
 800bb74:	4798      	blx	r3
 800bb76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb78:	e029      	b.n	800bbce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fa2a 	bl	800bfd6 <USBD_CtlError>
        err++;
 800bb82:	7afb      	ldrb	r3, [r7, #11]
 800bb84:	3301      	adds	r3, #1
 800bb86:	72fb      	strb	r3, [r7, #11]
      break;
 800bb88:	e021      	b.n	800bbce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7c1b      	ldrb	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10d      	bne.n	800bbae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb9a:	f107 0208 	add.w	r2, r7, #8
 800bb9e:	4610      	mov	r0, r2
 800bba0:	4798      	blx	r3
 800bba2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	2207      	movs	r2, #7
 800bbaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbac:	e00f      	b.n	800bbce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bbae:	6839      	ldr	r1, [r7, #0]
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fa10 	bl	800bfd6 <USBD_CtlError>
        err++;
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	72fb      	strb	r3, [r7, #11]
      break;
 800bbbc:	e007      	b.n	800bbce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa08 	bl	800bfd6 <USBD_CtlError>
      err++;
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	72fb      	strb	r3, [r7, #11]
      break;
 800bbcc:	bf00      	nop
  }

  if (err != 0U)
 800bbce:	7afb      	ldrb	r3, [r7, #11]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d11e      	bne.n	800bc12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	88db      	ldrh	r3, [r3, #6]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d016      	beq.n	800bc0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bbdc:	893b      	ldrh	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00e      	beq.n	800bc00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	88da      	ldrh	r2, [r3, #6]
 800bbe6:	893b      	ldrh	r3, [r7, #8]
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	bf28      	it	cs
 800bbec:	4613      	movcs	r3, r2
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bbf2:	893b      	ldrh	r3, [r7, #8]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	68f9      	ldr	r1, [r7, #12]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fa5d 	bl	800c0b8 <USBD_CtlSendData>
 800bbfe:	e009      	b.n	800bc14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f9e7 	bl	800bfd6 <USBD_CtlError>
 800bc08:	e004      	b.n	800bc14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 faae 	bl	800c16c <USBD_CtlSendStatus>
 800bc10:	e000      	b.n	800bc14 <USBD_GetDescriptor+0x2cc>
    return;
 800bc12:	bf00      	nop
  }
}
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop

0800bc1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	889b      	ldrh	r3, [r3, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d131      	bne.n	800bc92 <USBD_SetAddress+0x76>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	88db      	ldrh	r3, [r3, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d12d      	bne.n	800bc92 <USBD_SetAddress+0x76>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	885b      	ldrh	r3, [r3, #2]
 800bc3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc3c:	d829      	bhi.n	800bc92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	885b      	ldrh	r3, [r3, #2]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d104      	bne.n	800bc60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f9bc 	bl	800bfd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5e:	e01d      	b.n	800bc9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	7bfa      	ldrb	r2, [r7, #15]
 800bc64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fefb 	bl	800ca68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fa7a 	bl	800c16c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d004      	beq.n	800bc88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2202      	movs	r2, #2
 800bc82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc86:	e009      	b.n	800bc9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc90:	e004      	b.n	800bc9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f99e 	bl	800bfd6 <USBD_CtlError>
  }
}
 800bc9a:	bf00      	nop
 800bc9c:	bf00      	nop
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	885b      	ldrh	r3, [r3, #2]
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	4b4e      	ldr	r3, [pc, #312]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bcba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bcbc:	4b4d      	ldr	r3, [pc, #308]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d905      	bls.n	800bcd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f985 	bl	800bfd6 <USBD_CtlError>
    return USBD_FAIL;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e08c      	b.n	800bdea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d002      	beq.n	800bce2 <USBD_SetConfig+0x3e>
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d029      	beq.n	800bd34 <USBD_SetConfig+0x90>
 800bce0:	e075      	b.n	800bdce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bce2:	4b44      	ldr	r3, [pc, #272]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d020      	beq.n	800bd2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bcea:	4b42      	ldr	r3, [pc, #264]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bcf4:	4b3f      	ldr	r3, [pc, #252]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7fe ffe3 	bl	800acc6 <USBD_SetClassConfig>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d008      	beq.n	800bd1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f962 	bl	800bfd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2202      	movs	r2, #2
 800bd16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd1a:	e065      	b.n	800bde8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fa25 	bl	800c16c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2203      	movs	r2, #3
 800bd26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bd2a:	e05d      	b.n	800bde8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fa1d 	bl	800c16c <USBD_CtlSendStatus>
      break;
 800bd32:	e059      	b.n	800bde8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bd34:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d112      	bne.n	800bd62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bd44:	4b2b      	ldr	r3, [pc, #172]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd4e:	4b29      	ldr	r3, [pc, #164]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7fe ffd2 	bl	800acfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa06 	bl	800c16c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd60:	e042      	b.n	800bde8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bd62:	4b24      	ldr	r3, [pc, #144]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d02a      	beq.n	800bdc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7fe ffc0 	bl	800acfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bd7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd88:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7fe ff99 	bl	800acc6 <USBD_SetClassConfig>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00f      	beq.n	800bdbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f918 	bl	800bfd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7fe ffa5 	bl	800acfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bdbc:	e014      	b.n	800bde8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f9d4 	bl	800c16c <USBD_CtlSendStatus>
      break;
 800bdc4:	e010      	b.n	800bde8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f9d0 	bl	800c16c <USBD_CtlSendStatus>
      break;
 800bdcc:	e00c      	b.n	800bde8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f900 	bl	800bfd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdd6:	4b07      	ldr	r3, [pc, #28]	@ (800bdf4 <USBD_SetConfig+0x150>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f7fe ff8e 	bl	800acfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bde2:	2303      	movs	r3, #3
 800bde4:	73fb      	strb	r3, [r7, #15]
      break;
 800bde6:	bf00      	nop
  }

  return ret;
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000bb0 	.word	0x20000bb0

0800bdf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	88db      	ldrh	r3, [r3, #6]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d004      	beq.n	800be14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f8e2 	bl	800bfd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be12:	e023      	b.n	800be5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	dc02      	bgt.n	800be26 <USBD_GetConfig+0x2e>
 800be20:	2b00      	cmp	r3, #0
 800be22:	dc03      	bgt.n	800be2c <USBD_GetConfig+0x34>
 800be24:	e015      	b.n	800be52 <USBD_GetConfig+0x5a>
 800be26:	2b03      	cmp	r3, #3
 800be28:	d00b      	beq.n	800be42 <USBD_GetConfig+0x4a>
 800be2a:	e012      	b.n	800be52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	3308      	adds	r3, #8
 800be36:	2201      	movs	r2, #1
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f93c 	bl	800c0b8 <USBD_CtlSendData>
        break;
 800be40:	e00c      	b.n	800be5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3304      	adds	r3, #4
 800be46:	2201      	movs	r2, #1
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f934 	bl	800c0b8 <USBD_CtlSendData>
        break;
 800be50:	e004      	b.n	800be5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f8be 	bl	800bfd6 <USBD_CtlError>
        break;
 800be5a:	bf00      	nop
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be74:	b2db      	uxtb	r3, r3
 800be76:	3b01      	subs	r3, #1
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d81e      	bhi.n	800beba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	88db      	ldrh	r3, [r3, #6]
 800be80:	2b02      	cmp	r3, #2
 800be82:	d004      	beq.n	800be8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f8a5 	bl	800bfd6 <USBD_CtlError>
        break;
 800be8c:	e01a      	b.n	800bec4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	f043 0202 	orr.w	r2, r3, #2
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	330c      	adds	r3, #12
 800beae:	2202      	movs	r2, #2
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f900 	bl	800c0b8 <USBD_CtlSendData>
      break;
 800beb8:	e004      	b.n	800bec4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f88a 	bl	800bfd6 <USBD_CtlError>
      break;
 800bec2:	bf00      	nop
  }
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	885b      	ldrh	r3, [r3, #2]
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d107      	bne.n	800beee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f940 	bl	800c16c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800beec:	e013      	b.n	800bf16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d10b      	bne.n	800bf0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	889b      	ldrh	r3, [r3, #4]
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	b29b      	uxth	r3, r3
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f930 	bl	800c16c <USBD_CtlSendStatus>
}
 800bf0c:	e003      	b.n	800bf16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f860 	bl	800bfd6 <USBD_CtlError>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	3b01      	subs	r3, #1
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d80b      	bhi.n	800bf4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	885b      	ldrh	r3, [r3, #2]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d10c      	bne.n	800bf58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f910 	bl	800c16c <USBD_CtlSendStatus>
      }
      break;
 800bf4c:	e004      	b.n	800bf58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f840 	bl	800bfd6 <USBD_CtlError>
      break;
 800bf56:	e000      	b.n	800bf5a <USBD_ClrFeature+0x3c>
      break;
 800bf58:	bf00      	nop
  }
}
 800bf5a:	bf00      	nop
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff fa40 	bl	800b412 <SWAPBYTE>
 800bf92:	4603      	mov	r3, r0
 800bf94:	461a      	mov	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f7ff fa33 	bl	800b412 <SWAPBYTE>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7ff fa26 	bl	800b412 <SWAPBYTE>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	461a      	mov	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	80da      	strh	r2, [r3, #6]
}
 800bfce:	bf00      	nop
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe0:	2180      	movs	r1, #128	@ 0x80
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fcd6 	bl	800c994 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bfe8:	2100      	movs	r1, #0
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fcd2 	bl	800c994 <USBD_LL_StallEP>
}
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d036      	beq.n	800c07c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c012:	6938      	ldr	r0, [r7, #16]
 800c014:	f000 f836 	bl	800c084 <USBD_GetLen>
 800c018:	4603      	mov	r3, r0
 800c01a:	3301      	adds	r3, #1
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	4413      	add	r3, r2
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	701a      	strb	r2, [r3, #0]
  idx++;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	3301      	adds	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c038:	7dfb      	ldrb	r3, [r7, #23]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	2203      	movs	r2, #3
 800c040:	701a      	strb	r2, [r3, #0]
  idx++;
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	3301      	adds	r3, #1
 800c046:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c048:	e013      	b.n	800c072 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	4413      	add	r3, r2
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	7812      	ldrb	r2, [r2, #0]
 800c054:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3301      	adds	r3, #1
 800c05a:	613b      	str	r3, [r7, #16]
    idx++;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	3301      	adds	r3, #1
 800c060:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	4413      	add	r3, r2
 800c068:	2200      	movs	r2, #0
 800c06a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	3301      	adds	r3, #1
 800c070:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1e7      	bne.n	800c04a <USBD_GetString+0x52>
 800c07a:	e000      	b.n	800c07e <USBD_GetString+0x86>
    return;
 800c07c:	bf00      	nop
  }
}
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c094:	e005      	b.n	800c0a2 <USBD_GetLen+0x1e>
  {
    len++;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	3301      	adds	r3, #1
 800c09a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1f5      	bne.n	800c096 <USBD_GetLen+0x12>
  }

  return len;
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	2100      	movs	r1, #0
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fce1 	bl	800caa6 <USBD_LL_Transmit>

  return USBD_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	2100      	movs	r1, #0
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 fcd0 	bl	800caa6 <USBD_LL_Transmit>

  return USBD_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2203      	movs	r2, #3
 800c120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	2100      	movs	r1, #0
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 fcd4 	bl	800cae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b084      	sub	sp, #16
 800c14e:	af00      	add	r7, sp, #0
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	2100      	movs	r1, #0
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 fcc3 	bl	800cae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2204      	movs	r2, #4
 800c178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c17c:	2300      	movs	r3, #0
 800c17e:	2200      	movs	r2, #0
 800c180:	2100      	movs	r1, #0
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fc8f 	bl	800caa6 <USBD_LL_Transmit>

  return USBD_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2205      	movs	r2, #5
 800c19e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fc9d 	bl	800cae8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	4912      	ldr	r1, [pc, #72]	@ (800c208 <MX_USB_DEVICE_Init+0x50>)
 800c1c0:	4812      	ldr	r0, [pc, #72]	@ (800c20c <MX_USB_DEVICE_Init+0x54>)
 800c1c2:	f7fe fd03 	bl	800abcc <USBD_Init>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d001      	beq.n	800c1d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c1cc:	f7f6 fec4 	bl	8002f58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c1d0:	490f      	ldr	r1, [pc, #60]	@ (800c210 <MX_USB_DEVICE_Init+0x58>)
 800c1d2:	480e      	ldr	r0, [pc, #56]	@ (800c20c <MX_USB_DEVICE_Init+0x54>)
 800c1d4:	f7fe fd2a 	bl	800ac2c <USBD_RegisterClass>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c1de:	f7f6 febb 	bl	8002f58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c1e2:	490c      	ldr	r1, [pc, #48]	@ (800c214 <MX_USB_DEVICE_Init+0x5c>)
 800c1e4:	4809      	ldr	r0, [pc, #36]	@ (800c20c <MX_USB_DEVICE_Init+0x54>)
 800c1e6:	f7fe fc21 	bl	800aa2c <USBD_CDC_RegisterInterface>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c1f0:	f7f6 feb2 	bl	8002f58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c1f4:	4805      	ldr	r0, [pc, #20]	@ (800c20c <MX_USB_DEVICE_Init+0x54>)
 800c1f6:	f7fe fd4f 	bl	800ac98 <USBD_Start>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c200:	f7f6 feaa 	bl	8002f58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c204:	bf00      	nop
 800c206:	bd80      	pop	{r7, pc}
 800c208:	200000b0 	.word	0x200000b0
 800c20c:	20000bb4 	.word	0x20000bb4
 800c210:	2000001c 	.word	0x2000001c
 800c214:	2000009c 	.word	0x2000009c

0800c218 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c21c:	2200      	movs	r2, #0
 800c21e:	4905      	ldr	r1, [pc, #20]	@ (800c234 <CDC_Init_FS+0x1c>)
 800c220:	4805      	ldr	r0, [pc, #20]	@ (800c238 <CDC_Init_FS+0x20>)
 800c222:	f7fe fc1d 	bl	800aa60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c226:	4905      	ldr	r1, [pc, #20]	@ (800c23c <CDC_Init_FS+0x24>)
 800c228:	4803      	ldr	r0, [pc, #12]	@ (800c238 <CDC_Init_FS+0x20>)
 800c22a:	f7fe fc3b 	bl	800aaa4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c22e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c230:	4618      	mov	r0, r3
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20001290 	.word	0x20001290
 800c238:	20000bb4 	.word	0x20000bb4
 800c23c:	20000e90 	.word	0x20000e90

0800c240 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c240:	b480      	push	{r7}
 800c242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c246:	4618      	mov	r0, r3
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	6039      	str	r1, [r7, #0]
 800c25a:	71fb      	strb	r3, [r7, #7]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c260:	79fb      	ldrb	r3, [r7, #7]
 800c262:	2b23      	cmp	r3, #35	@ 0x23
 800c264:	d84a      	bhi.n	800c2fc <CDC_Control_FS+0xac>
 800c266:	a201      	add	r2, pc, #4	@ (adr r2, 800c26c <CDC_Control_FS+0x1c>)
 800c268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26c:	0800c2fd 	.word	0x0800c2fd
 800c270:	0800c2fd 	.word	0x0800c2fd
 800c274:	0800c2fd 	.word	0x0800c2fd
 800c278:	0800c2fd 	.word	0x0800c2fd
 800c27c:	0800c2fd 	.word	0x0800c2fd
 800c280:	0800c2fd 	.word	0x0800c2fd
 800c284:	0800c2fd 	.word	0x0800c2fd
 800c288:	0800c2fd 	.word	0x0800c2fd
 800c28c:	0800c2fd 	.word	0x0800c2fd
 800c290:	0800c2fd 	.word	0x0800c2fd
 800c294:	0800c2fd 	.word	0x0800c2fd
 800c298:	0800c2fd 	.word	0x0800c2fd
 800c29c:	0800c2fd 	.word	0x0800c2fd
 800c2a0:	0800c2fd 	.word	0x0800c2fd
 800c2a4:	0800c2fd 	.word	0x0800c2fd
 800c2a8:	0800c2fd 	.word	0x0800c2fd
 800c2ac:	0800c2fd 	.word	0x0800c2fd
 800c2b0:	0800c2fd 	.word	0x0800c2fd
 800c2b4:	0800c2fd 	.word	0x0800c2fd
 800c2b8:	0800c2fd 	.word	0x0800c2fd
 800c2bc:	0800c2fd 	.word	0x0800c2fd
 800c2c0:	0800c2fd 	.word	0x0800c2fd
 800c2c4:	0800c2fd 	.word	0x0800c2fd
 800c2c8:	0800c2fd 	.word	0x0800c2fd
 800c2cc:	0800c2fd 	.word	0x0800c2fd
 800c2d0:	0800c2fd 	.word	0x0800c2fd
 800c2d4:	0800c2fd 	.word	0x0800c2fd
 800c2d8:	0800c2fd 	.word	0x0800c2fd
 800c2dc:	0800c2fd 	.word	0x0800c2fd
 800c2e0:	0800c2fd 	.word	0x0800c2fd
 800c2e4:	0800c2fd 	.word	0x0800c2fd
 800c2e8:	0800c2fd 	.word	0x0800c2fd
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c2fd 	.word	0x0800c2fd
 800c2f4:	0800c2fd 	.word	0x0800c2fd
 800c2f8:	0800c2fd 	.word	0x0800c2fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c2fc:	bf00      	nop
  }

  return (USBD_OK);
 800c2fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c316:	6879      	ldr	r1, [r7, #4]
 800c318:	4805      	ldr	r0, [pc, #20]	@ (800c330 <CDC_Receive_FS+0x24>)
 800c31a:	f7fe fbc3 	bl	800aaa4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c31e:	4804      	ldr	r0, [pc, #16]	@ (800c330 <CDC_Receive_FS+0x24>)
 800c320:	f7fe fc1e 	bl	800ab60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c324:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000bb4 	.word	0x20000bb4

0800c334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c344:	4b0d      	ldr	r3, [pc, #52]	@ (800c37c <CDC_Transmit_FS+0x48>)
 800c346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c34a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c356:	2301      	movs	r3, #1
 800c358:	e00b      	b.n	800c372 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c35a:	887b      	ldrh	r3, [r7, #2]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	4806      	ldr	r0, [pc, #24]	@ (800c37c <CDC_Transmit_FS+0x48>)
 800c362:	f7fe fb7d 	bl	800aa60 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c366:	4805      	ldr	r0, [pc, #20]	@ (800c37c <CDC_Transmit_FS+0x48>)
 800c368:	f7fe fbba 	bl	800aae0 <USBD_CDC_TransmitPacket>
 800c36c:	4603      	mov	r3, r0
 800c36e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c370:	7bfb      	ldrb	r3, [r7, #15]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000bb4 	.word	0x20000bb4

0800c380 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c380:	b480      	push	{r7}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	4613      	mov	r3, r2
 800c38c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
	...

0800c3a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	6039      	str	r1, [r7, #0]
 800c3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2212      	movs	r2, #18
 800c3b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c3b6:	4b03      	ldr	r3, [pc, #12]	@ (800c3c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	200000cc 	.word	0x200000cc

0800c3c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	6039      	str	r1, [r7, #0]
 800c3d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2204      	movs	r2, #4
 800c3d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c3da:	4b03      	ldr	r3, [pc, #12]	@ (800c3e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	200000e0 	.word	0x200000e0

0800c3ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3f8:	79fb      	ldrb	r3, [r7, #7]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d105      	bne.n	800c40a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	4907      	ldr	r1, [pc, #28]	@ (800c420 <USBD_FS_ProductStrDescriptor+0x34>)
 800c402:	4808      	ldr	r0, [pc, #32]	@ (800c424 <USBD_FS_ProductStrDescriptor+0x38>)
 800c404:	f7ff fdf8 	bl	800bff8 <USBD_GetString>
 800c408:	e004      	b.n	800c414 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	4904      	ldr	r1, [pc, #16]	@ (800c420 <USBD_FS_ProductStrDescriptor+0x34>)
 800c40e:	4805      	ldr	r0, [pc, #20]	@ (800c424 <USBD_FS_ProductStrDescriptor+0x38>)
 800c410:	f7ff fdf2 	bl	800bff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20001690 	.word	0x20001690
 800c424:	0801062c 	.word	0x0801062c

0800c428 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	6039      	str	r1, [r7, #0]
 800c432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	4904      	ldr	r1, [pc, #16]	@ (800c448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c438:	4804      	ldr	r0, [pc, #16]	@ (800c44c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c43a:	f7ff fddd 	bl	800bff8 <USBD_GetString>
  return USBD_StrDesc;
 800c43e:	4b02      	ldr	r3, [pc, #8]	@ (800c448 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20001690 	.word	0x20001690
 800c44c:	08010644 	.word	0x08010644

0800c450 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	6039      	str	r1, [r7, #0]
 800c45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	221a      	movs	r2, #26
 800c460:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c462:	f000 f843 	bl	800c4ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c466:	4b02      	ldr	r3, [pc, #8]	@ (800c470 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200000e4 	.word	0x200000e4

0800c474 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	4603      	mov	r3, r0
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d105      	bne.n	800c492 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	4907      	ldr	r1, [pc, #28]	@ (800c4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c48a:	4808      	ldr	r0, [pc, #32]	@ (800c4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c48c:	f7ff fdb4 	bl	800bff8 <USBD_GetString>
 800c490:	e004      	b.n	800c49c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	4904      	ldr	r1, [pc, #16]	@ (800c4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c496:	4805      	ldr	r0, [pc, #20]	@ (800c4ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800c498:	f7ff fdae 	bl	800bff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c49c:	4b02      	ldr	r3, [pc, #8]	@ (800c4a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20001690 	.word	0x20001690
 800c4ac:	08010658 	.word	0x08010658

0800c4b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	6039      	str	r1, [r7, #0]
 800c4ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d105      	bne.n	800c4ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	4907      	ldr	r1, [pc, #28]	@ (800c4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4c6:	4808      	ldr	r0, [pc, #32]	@ (800c4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4c8:	f7ff fd96 	bl	800bff8 <USBD_GetString>
 800c4cc:	e004      	b.n	800c4d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4904      	ldr	r1, [pc, #16]	@ (800c4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c4d2:	4805      	ldr	r0, [pc, #20]	@ (800c4e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c4d4:	f7ff fd90 	bl	800bff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4d8:	4b02      	ldr	r3, [pc, #8]	@ (800c4e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20001690 	.word	0x20001690
 800c4e8:	08010664 	.word	0x08010664

0800c4ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c530 <Get_SerialNum+0x44>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <Get_SerialNum+0x48>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c538 <Get_SerialNum+0x4c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4413      	add	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d009      	beq.n	800c526 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c512:	2208      	movs	r2, #8
 800c514:	4909      	ldr	r1, [pc, #36]	@ (800c53c <Get_SerialNum+0x50>)
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 f814 	bl	800c544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c51c:	2204      	movs	r2, #4
 800c51e:	4908      	ldr	r1, [pc, #32]	@ (800c540 <Get_SerialNum+0x54>)
 800c520:	68b8      	ldr	r0, [r7, #8]
 800c522:	f000 f80f 	bl	800c544 <IntToUnicode>
  }
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	1fff7a10 	.word	0x1fff7a10
 800c534:	1fff7a14 	.word	0x1fff7a14
 800c538:	1fff7a18 	.word	0x1fff7a18
 800c53c:	200000e6 	.word	0x200000e6
 800c540:	200000f6 	.word	0x200000f6

0800c544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c556:	2300      	movs	r3, #0
 800c558:	75fb      	strb	r3, [r7, #23]
 800c55a:	e027      	b.n	800c5ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	0f1b      	lsrs	r3, r3, #28
 800c560:	2b09      	cmp	r3, #9
 800c562:	d80b      	bhi.n	800c57c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	0f1b      	lsrs	r3, r3, #28
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4619      	mov	r1, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	440b      	add	r3, r1
 800c574:	3230      	adds	r2, #48	@ 0x30
 800c576:	b2d2      	uxtb	r2, r2
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	e00a      	b.n	800c592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	0f1b      	lsrs	r3, r3, #28
 800c580:	b2da      	uxtb	r2, r3
 800c582:	7dfb      	ldrb	r3, [r7, #23]
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4619      	mov	r1, r3
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	440b      	add	r3, r1
 800c58c:	3237      	adds	r2, #55	@ 0x37
 800c58e:	b2d2      	uxtb	r2, r2
 800c590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	011b      	lsls	r3, r3, #4
 800c596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	3301      	adds	r3, #1
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	75fb      	strb	r3, [r7, #23]
 800c5ac:	7dfa      	ldrb	r2, [r7, #23]
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d3d3      	bcc.n	800c55c <IntToUnicode+0x18>
  }
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
	...

0800c5c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08a      	sub	sp, #40	@ 0x28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5cc:	f107 0314 	add.w	r3, r7, #20
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	609a      	str	r2, [r3, #8]
 800c5d8:	60da      	str	r2, [r3, #12]
 800c5da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5e4:	d13a      	bne.n	800c65c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	613b      	str	r3, [r7, #16]
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c5f0:	f043 0301 	orr.w	r3, r3, #1
 800c5f4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	613b      	str	r3, [r7, #16]
 800c600:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c602:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c608:	2302      	movs	r3, #2
 800c60a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c610:	2303      	movs	r3, #3
 800c612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c614:	230a      	movs	r3, #10
 800c616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c618:	f107 0314 	add.w	r3, r7, #20
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	@ (800c668 <HAL_PCD_MspInit+0xa4>)
 800c620:	f7f8 f958 	bl	80048d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c624:	4b0f      	ldr	r3, [pc, #60]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c628:	4a0e      	ldr	r2, [pc, #56]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c62e:	6353      	str	r3, [r2, #52]	@ 0x34
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	4b0b      	ldr	r3, [pc, #44]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c638:	4a0a      	ldr	r2, [pc, #40]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c63a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c63e:	6453      	str	r3, [r2, #68]	@ 0x44
 800c640:	4b08      	ldr	r3, [pc, #32]	@ (800c664 <HAL_PCD_MspInit+0xa0>)
 800c642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c64c:	2200      	movs	r2, #0
 800c64e:	2100      	movs	r1, #0
 800c650:	2043      	movs	r0, #67	@ 0x43
 800c652:	f7f7 fd06 	bl	8004062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c656:	2043      	movs	r0, #67	@ 0x43
 800c658:	f7f7 fd1f 	bl	800409a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c65c:	bf00      	nop
 800c65e:	3728      	adds	r7, #40	@ 0x28
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	40023800 	.word	0x40023800
 800c668:	40020000 	.word	0x40020000

0800c66c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c680:	4619      	mov	r1, r3
 800c682:	4610      	mov	r0, r2
 800c684:	f7fe fb55 	bl	800ad32 <USBD_LL_SetupStage>
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6a2:	78fa      	ldrb	r2, [r7, #3]
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	440b      	add	r3, r1
 800c6b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	78fb      	ldrb	r3, [r7, #3]
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f7fe fb8f 	bl	800addc <USBD_LL_DataOutStage>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c6d8:	78fa      	ldrb	r2, [r7, #3]
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	00db      	lsls	r3, r3, #3
 800c6e0:	4413      	add	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	440b      	add	r3, r1
 800c6e6:	3320      	adds	r3, #32
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	78fb      	ldrb	r3, [r7, #3]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7fe fc28 	bl	800af42 <USBD_LL_DataInStage>
}
 800c6f2:	bf00      	nop
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fd62 	bl	800b1d2 <USBD_LL_SOF>
}
 800c70e:	bf00      	nop
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c71e:	2301      	movs	r3, #1
 800c720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	79db      	ldrb	r3, [r3, #7]
 800c726:	2b02      	cmp	r3, #2
 800c728:	d001      	beq.n	800c72e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c72a:	f7f6 fc15 	bl	8002f58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c734:	7bfa      	ldrb	r2, [r7, #15]
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fd06 	bl	800b14a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fcae 	bl	800b0a6 <USBD_LL_Reset>
}
 800c74a:	bf00      	nop
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fd01 	bl	800b16a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6812      	ldr	r2, [r2, #0]
 800c776:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c77a:	f043 0301 	orr.w	r3, r3, #1
 800c77e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7adb      	ldrb	r3, [r3, #11]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d005      	beq.n	800c794 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <HAL_PCD_SuspendCallback+0x48>)
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	4a03      	ldr	r2, [pc, #12]	@ (800c79c <HAL_PCD_SuspendCallback+0x48>)
 800c78e:	f043 0306 	orr.w	r3, r3, #6
 800c792:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	e000ed00 	.word	0xe000ed00

0800c7a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fcf7 	bl	800b1a2 <USBD_LL_Resume>
}
 800c7b4:	bf00      	nop
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7ce:	78fa      	ldrb	r2, [r7, #3]
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fd4f 	bl	800b276 <USBD_LL_IsoOUTIncomplete>
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c7f2:	78fa      	ldrb	r2, [r7, #3]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fd0b 	bl	800b212 <USBD_LL_IsoINIncomplete>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fd61 	bl	800b2da <USBD_LL_DevConnected>
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fd5e 	bl	800b2f0 <USBD_LL_DevDisconnected>
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d13c      	bne.n	800c8c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c84c:	4a20      	ldr	r2, [pc, #128]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a1e      	ldr	r2, [pc, #120]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c858:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c85c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c85e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c862:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c864:	4b1a      	ldr	r3, [pc, #104]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c866:	2204      	movs	r2, #4
 800c868:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c86a:	4b19      	ldr	r3, [pc, #100]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c86c:	2202      	movs	r2, #2
 800c86e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c870:	4b17      	ldr	r3, [pc, #92]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c872:	2200      	movs	r2, #0
 800c874:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c876:	4b16      	ldr	r3, [pc, #88]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c878:	2202      	movs	r2, #2
 800c87a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c87c:	4b14      	ldr	r3, [pc, #80]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c87e:	2200      	movs	r2, #0
 800c880:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c882:	4b13      	ldr	r3, [pc, #76]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c884:	2200      	movs	r2, #0
 800c886:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c888:	4b11      	ldr	r3, [pc, #68]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c88e:	4b10      	ldr	r3, [pc, #64]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c890:	2200      	movs	r2, #0
 800c892:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c894:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c896:	2200      	movs	r2, #0
 800c898:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c89a:	480d      	ldr	r0, [pc, #52]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c89c:	f7f8 fb2e 	bl	8004efc <HAL_PCD_Init>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c8a6:	f7f6 fb57 	bl	8002f58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c8aa:	2180      	movs	r1, #128	@ 0x80
 800c8ac:	4808      	ldr	r0, [pc, #32]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c8ae:	f7f9 fd58 	bl	8006362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c8b2:	2240      	movs	r2, #64	@ 0x40
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4806      	ldr	r0, [pc, #24]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c8b8:	f7f9 fd0c 	bl	80062d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c8bc:	2280      	movs	r2, #128	@ 0x80
 800c8be:	2101      	movs	r1, #1
 800c8c0:	4803      	ldr	r0, [pc, #12]	@ (800c8d0 <USBD_LL_Init+0x94>)
 800c8c2:	f7f9 fd07 	bl	80062d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20001890 	.word	0x20001890

0800c8d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7f8 fc15 	bl	800511a <HAL_PCD_Start>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f942 	bl	800cb80 <USBD_Get_USB_Status>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c900:	7bbb      	ldrb	r3, [r7, #14]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	4608      	mov	r0, r1
 800c914:	4611      	mov	r1, r2
 800c916:	461a      	mov	r2, r3
 800c918:	4603      	mov	r3, r0
 800c91a:	70fb      	strb	r3, [r7, #3]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70bb      	strb	r3, [r7, #2]
 800c920:	4613      	mov	r3, r2
 800c922:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c928:	2300      	movs	r3, #0
 800c92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c932:	78bb      	ldrb	r3, [r7, #2]
 800c934:	883a      	ldrh	r2, [r7, #0]
 800c936:	78f9      	ldrb	r1, [r7, #3]
 800c938:	f7f9 f8e9 	bl	8005b0e <HAL_PCD_EP_Open>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	4618      	mov	r0, r3
 800c944:	f000 f91c 	bl	800cb80 <USBD_Get_USB_Status>
 800c948:	4603      	mov	r3, r0
 800c94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	460b      	mov	r3, r1
 800c960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c970:	78fa      	ldrb	r2, [r7, #3]
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f7f9 f932 	bl	8005bde <HAL_PCD_EP_Close>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
 800c980:	4618      	mov	r0, r3
 800c982:	f000 f8fd 	bl	800cb80 <USBD_Get_USB_Status>
 800c986:	4603      	mov	r3, r0
 800c988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f9 f9ea 	bl	8005d8c <HAL_PCD_EP_SetStall>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f8de 	bl	800cb80 <USBD_Get_USB_Status>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	460b      	mov	r3, r1
 800c9dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c9ec:	78fa      	ldrb	r2, [r7, #3]
 800c9ee:	4611      	mov	r1, r2
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f9 fa2e 	bl	8005e52 <HAL_PCD_EP_ClrStall>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f000 f8bf 	bl	800cb80 <USBD_Get_USB_Status>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ca24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	da0b      	bge.n	800ca44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca32:	68f9      	ldr	r1, [r7, #12]
 800ca34:	4613      	mov	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3316      	adds	r3, #22
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	e00b      	b.n	800ca5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca4a:	68f9      	ldr	r1, [r7, #12]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	4413      	add	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	440b      	add	r3, r1
 800ca56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ca5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca82:	78fa      	ldrb	r2, [r7, #3]
 800ca84:	4611      	mov	r1, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7f9 f81d 	bl	8005ac6 <HAL_PCD_SetAddress>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 f874 	bl	800cb80 <USBD_Get_USB_Status>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b086      	sub	sp, #24
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	603b      	str	r3, [r7, #0]
 800cab2:	460b      	mov	r3, r1
 800cab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caba:	2300      	movs	r3, #0
 800cabc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cac4:	7af9      	ldrb	r1, [r7, #11]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	f7f9 f925 	bl	8005d18 <HAL_PCD_EP_Transmit>
 800cace:	4603      	mov	r3, r0
 800cad0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad2:	7dfb      	ldrb	r3, [r7, #23]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 f853 	bl	800cb80 <USBD_Get_USB_Status>
 800cada:	4603      	mov	r3, r0
 800cadc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cade:	7dbb      	ldrb	r3, [r7, #22]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	460b      	mov	r3, r1
 800caf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cb06:	7af9      	ldrb	r1, [r7, #11]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	f7f9 f8b1 	bl	8005c72 <HAL_PCD_EP_Receive>
 800cb10:	4603      	mov	r3, r0
 800cb12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 f832 	bl	800cb80 <USBD_Get_USB_Status>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb20:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f9 f8d1 	bl	8005ce8 <HAL_PCD_EP_GetRxCount>
 800cb46:	4603      	mov	r3, r0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb58:	4b03      	ldr	r3, [pc, #12]	@ (800cb68 <USBD_static_malloc+0x18>)
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	20001d74 	.word	0x20001d74

0800cb6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]

}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d817      	bhi.n	800cbc4 <USBD_Get_USB_Status+0x44>
 800cb94:	a201      	add	r2, pc, #4	@ (adr r2, 800cb9c <USBD_Get_USB_Status+0x1c>)
 800cb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9a:	bf00      	nop
 800cb9c:	0800cbad 	.word	0x0800cbad
 800cba0:	0800cbb3 	.word	0x0800cbb3
 800cba4:	0800cbb9 	.word	0x0800cbb9
 800cba8:	0800cbbf 	.word	0x0800cbbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	e00b      	b.n	800cbca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb6:	e008      	b.n	800cbca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbc:	e005      	b.n	800cbca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc2:	e002      	b.n	800cbca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc8:	bf00      	nop
  }
  return usb_status;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <atof>:
 800cbd8:	2100      	movs	r1, #0
 800cbda:	f000 be09 	b.w	800d7f0 <strtod>

0800cbde <atoi>:
 800cbde:	220a      	movs	r2, #10
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	f000 be8b 	b.w	800d8fc <strtol>

0800cbe6 <sulp>:
 800cbe6:	b570      	push	{r4, r5, r6, lr}
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	ec45 4b10 	vmov	d0, r4, r5
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	f002 f825 	bl	800ec40 <__ulp>
 800cbf6:	ec51 0b10 	vmov	r0, r1, d0
 800cbfa:	b17e      	cbz	r6, 800cc1c <sulp+0x36>
 800cbfc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dd09      	ble.n	800cc1c <sulp+0x36>
 800cc08:	051b      	lsls	r3, r3, #20
 800cc0a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cc0e:	2400      	movs	r4, #0
 800cc10:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cc14:	4622      	mov	r2, r4
 800cc16:	462b      	mov	r3, r5
 800cc18:	f7f3 fcf6 	bl	8000608 <__aeabi_dmul>
 800cc1c:	ec41 0b10 	vmov	d0, r0, r1
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
 800cc22:	0000      	movs	r0, r0
 800cc24:	0000      	movs	r0, r0
	...

0800cc28 <_strtod_l>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b09f      	sub	sp, #124	@ 0x7c
 800cc2e:	460c      	mov	r4, r1
 800cc30:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc32:	2200      	movs	r2, #0
 800cc34:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc36:	9005      	str	r0, [sp, #20]
 800cc38:	f04f 0a00 	mov.w	sl, #0
 800cc3c:	f04f 0b00 	mov.w	fp, #0
 800cc40:	460a      	mov	r2, r1
 800cc42:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc44:	7811      	ldrb	r1, [r2, #0]
 800cc46:	292b      	cmp	r1, #43	@ 0x2b
 800cc48:	d04a      	beq.n	800cce0 <_strtod_l+0xb8>
 800cc4a:	d838      	bhi.n	800ccbe <_strtod_l+0x96>
 800cc4c:	290d      	cmp	r1, #13
 800cc4e:	d832      	bhi.n	800ccb6 <_strtod_l+0x8e>
 800cc50:	2908      	cmp	r1, #8
 800cc52:	d832      	bhi.n	800ccba <_strtod_l+0x92>
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d03b      	beq.n	800ccd0 <_strtod_l+0xa8>
 800cc58:	2200      	movs	r2, #0
 800cc5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cc5e:	782a      	ldrb	r2, [r5, #0]
 800cc60:	2a30      	cmp	r2, #48	@ 0x30
 800cc62:	f040 80b3 	bne.w	800cdcc <_strtod_l+0x1a4>
 800cc66:	786a      	ldrb	r2, [r5, #1]
 800cc68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc6c:	2a58      	cmp	r2, #88	@ 0x58
 800cc6e:	d16e      	bne.n	800cd4e <_strtod_l+0x126>
 800cc70:	9302      	str	r3, [sp, #8]
 800cc72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	4a8e      	ldr	r2, [pc, #568]	@ (800ceb4 <_strtod_l+0x28c>)
 800cc7c:	9805      	ldr	r0, [sp, #20]
 800cc7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc80:	a919      	add	r1, sp, #100	@ 0x64
 800cc82:	f001 f8d7 	bl	800de34 <__gethex>
 800cc86:	f010 060f 	ands.w	r6, r0, #15
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	d005      	beq.n	800cc9a <_strtod_l+0x72>
 800cc8e:	2e06      	cmp	r6, #6
 800cc90:	d128      	bne.n	800cce4 <_strtod_l+0xbc>
 800cc92:	3501      	adds	r5, #1
 800cc94:	2300      	movs	r3, #0
 800cc96:	9519      	str	r5, [sp, #100]	@ 0x64
 800cc98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f040 858e 	bne.w	800d7be <_strtod_l+0xb96>
 800cca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cca4:	b1cb      	cbz	r3, 800ccda <_strtod_l+0xb2>
 800cca6:	4652      	mov	r2, sl
 800cca8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ccac:	ec43 2b10 	vmov	d0, r2, r3
 800ccb0:	b01f      	add	sp, #124	@ 0x7c
 800ccb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb6:	2920      	cmp	r1, #32
 800ccb8:	d1ce      	bne.n	800cc58 <_strtod_l+0x30>
 800ccba:	3201      	adds	r2, #1
 800ccbc:	e7c1      	b.n	800cc42 <_strtod_l+0x1a>
 800ccbe:	292d      	cmp	r1, #45	@ 0x2d
 800ccc0:	d1ca      	bne.n	800cc58 <_strtod_l+0x30>
 800ccc2:	2101      	movs	r1, #1
 800ccc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ccc6:	1c51      	adds	r1, r2, #1
 800ccc8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccca:	7852      	ldrb	r2, [r2, #1]
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	d1c5      	bne.n	800cc5c <_strtod_l+0x34>
 800ccd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccd2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 8570 	bne.w	800d7ba <_strtod_l+0xb92>
 800ccda:	4652      	mov	r2, sl
 800ccdc:	465b      	mov	r3, fp
 800ccde:	e7e5      	b.n	800ccac <_strtod_l+0x84>
 800cce0:	2100      	movs	r1, #0
 800cce2:	e7ef      	b.n	800ccc4 <_strtod_l+0x9c>
 800cce4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cce6:	b13a      	cbz	r2, 800ccf8 <_strtod_l+0xd0>
 800cce8:	2135      	movs	r1, #53	@ 0x35
 800ccea:	a81c      	add	r0, sp, #112	@ 0x70
 800ccec:	f002 f8a2 	bl	800ee34 <__copybits>
 800ccf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccf2:	9805      	ldr	r0, [sp, #20]
 800ccf4:	f001 fc70 	bl	800e5d8 <_Bfree>
 800ccf8:	3e01      	subs	r6, #1
 800ccfa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ccfc:	2e04      	cmp	r6, #4
 800ccfe:	d806      	bhi.n	800cd0e <_strtod_l+0xe6>
 800cd00:	e8df f006 	tbb	[pc, r6]
 800cd04:	201d0314 	.word	0x201d0314
 800cd08:	14          	.byte	0x14
 800cd09:	00          	.byte	0x00
 800cd0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cd0e:	05e1      	lsls	r1, r4, #23
 800cd10:	bf48      	it	mi
 800cd12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cd16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd1a:	0d1b      	lsrs	r3, r3, #20
 800cd1c:	051b      	lsls	r3, r3, #20
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1bb      	bne.n	800cc9a <_strtod_l+0x72>
 800cd22:	f000 ff91 	bl	800dc48 <__errno>
 800cd26:	2322      	movs	r3, #34	@ 0x22
 800cd28:	6003      	str	r3, [r0, #0]
 800cd2a:	e7b6      	b.n	800cc9a <_strtod_l+0x72>
 800cd2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd3c:	e7e7      	b.n	800cd0e <_strtod_l+0xe6>
 800cd3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cebc <_strtod_l+0x294>
 800cd42:	e7e4      	b.n	800cd0e <_strtod_l+0xe6>
 800cd44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd48:	f04f 3aff 	mov.w	sl, #4294967295
 800cd4c:	e7df      	b.n	800cd0e <_strtod_l+0xe6>
 800cd4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd54:	785b      	ldrb	r3, [r3, #1]
 800cd56:	2b30      	cmp	r3, #48	@ 0x30
 800cd58:	d0f9      	beq.n	800cd4e <_strtod_l+0x126>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d09d      	beq.n	800cc9a <_strtod_l+0x72>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd64:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd66:	2300      	movs	r3, #0
 800cd68:	9308      	str	r3, [sp, #32]
 800cd6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd6c:	461f      	mov	r7, r3
 800cd6e:	220a      	movs	r2, #10
 800cd70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cd72:	7805      	ldrb	r5, [r0, #0]
 800cd74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cd78:	b2d9      	uxtb	r1, r3
 800cd7a:	2909      	cmp	r1, #9
 800cd7c:	d928      	bls.n	800cdd0 <_strtod_l+0x1a8>
 800cd7e:	494e      	ldr	r1, [pc, #312]	@ (800ceb8 <_strtod_l+0x290>)
 800cd80:	2201      	movs	r2, #1
 800cd82:	f000 fef2 	bl	800db6a <strncmp>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d032      	beq.n	800cdf0 <_strtod_l+0x1c8>
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	4681      	mov	r9, r0
 800cd90:	463d      	mov	r5, r7
 800cd92:	4603      	mov	r3, r0
 800cd94:	2a65      	cmp	r2, #101	@ 0x65
 800cd96:	d001      	beq.n	800cd9c <_strtod_l+0x174>
 800cd98:	2a45      	cmp	r2, #69	@ 0x45
 800cd9a:	d114      	bne.n	800cdc6 <_strtod_l+0x19e>
 800cd9c:	b91d      	cbnz	r5, 800cda6 <_strtod_l+0x17e>
 800cd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda0:	4302      	orrs	r2, r0
 800cda2:	d095      	beq.n	800ccd0 <_strtod_l+0xa8>
 800cda4:	2500      	movs	r5, #0
 800cda6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cda8:	1c62      	adds	r2, r4, #1
 800cdaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdac:	7862      	ldrb	r2, [r4, #1]
 800cdae:	2a2b      	cmp	r2, #43	@ 0x2b
 800cdb0:	d077      	beq.n	800cea2 <_strtod_l+0x27a>
 800cdb2:	2a2d      	cmp	r2, #45	@ 0x2d
 800cdb4:	d07b      	beq.n	800ceae <_strtod_l+0x286>
 800cdb6:	f04f 0c00 	mov.w	ip, #0
 800cdba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cdbe:	2909      	cmp	r1, #9
 800cdc0:	f240 8082 	bls.w	800cec8 <_strtod_l+0x2a0>
 800cdc4:	9419      	str	r4, [sp, #100]	@ 0x64
 800cdc6:	f04f 0800 	mov.w	r8, #0
 800cdca:	e0a2      	b.n	800cf12 <_strtod_l+0x2ea>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e7c7      	b.n	800cd60 <_strtod_l+0x138>
 800cdd0:	2f08      	cmp	r7, #8
 800cdd2:	bfd5      	itete	le
 800cdd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cdd6:	9908      	ldrgt	r1, [sp, #32]
 800cdd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cddc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cde0:	f100 0001 	add.w	r0, r0, #1
 800cde4:	bfd4      	ite	le
 800cde6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cde8:	9308      	strgt	r3, [sp, #32]
 800cdea:	3701      	adds	r7, #1
 800cdec:	9019      	str	r0, [sp, #100]	@ 0x64
 800cdee:	e7bf      	b.n	800cd70 <_strtod_l+0x148>
 800cdf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdf2:	1c5a      	adds	r2, r3, #1
 800cdf4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdf6:	785a      	ldrb	r2, [r3, #1]
 800cdf8:	b37f      	cbz	r7, 800ce5a <_strtod_l+0x232>
 800cdfa:	4681      	mov	r9, r0
 800cdfc:	463d      	mov	r5, r7
 800cdfe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ce02:	2b09      	cmp	r3, #9
 800ce04:	d912      	bls.n	800ce2c <_strtod_l+0x204>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e7c4      	b.n	800cd94 <_strtod_l+0x16c>
 800ce0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce10:	785a      	ldrb	r2, [r3, #1]
 800ce12:	3001      	adds	r0, #1
 800ce14:	2a30      	cmp	r2, #48	@ 0x30
 800ce16:	d0f8      	beq.n	800ce0a <_strtod_l+0x1e2>
 800ce18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ce1c:	2b08      	cmp	r3, #8
 800ce1e:	f200 84d3 	bhi.w	800d7c8 <_strtod_l+0xba0>
 800ce22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce26:	4681      	mov	r9, r0
 800ce28:	2000      	movs	r0, #0
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	3a30      	subs	r2, #48	@ 0x30
 800ce2e:	f100 0301 	add.w	r3, r0, #1
 800ce32:	d02a      	beq.n	800ce8a <_strtod_l+0x262>
 800ce34:	4499      	add	r9, r3
 800ce36:	eb00 0c05 	add.w	ip, r0, r5
 800ce3a:	462b      	mov	r3, r5
 800ce3c:	210a      	movs	r1, #10
 800ce3e:	4563      	cmp	r3, ip
 800ce40:	d10d      	bne.n	800ce5e <_strtod_l+0x236>
 800ce42:	1c69      	adds	r1, r5, #1
 800ce44:	4401      	add	r1, r0
 800ce46:	4428      	add	r0, r5
 800ce48:	2808      	cmp	r0, #8
 800ce4a:	dc16      	bgt.n	800ce7a <_strtod_l+0x252>
 800ce4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce4e:	230a      	movs	r3, #10
 800ce50:	fb03 2300 	mla	r3, r3, r0, r2
 800ce54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce56:	2300      	movs	r3, #0
 800ce58:	e018      	b.n	800ce8c <_strtod_l+0x264>
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	e7da      	b.n	800ce14 <_strtod_l+0x1ec>
 800ce5e:	2b08      	cmp	r3, #8
 800ce60:	f103 0301 	add.w	r3, r3, #1
 800ce64:	dc03      	bgt.n	800ce6e <_strtod_l+0x246>
 800ce66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ce68:	434e      	muls	r6, r1
 800ce6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ce6c:	e7e7      	b.n	800ce3e <_strtod_l+0x216>
 800ce6e:	2b10      	cmp	r3, #16
 800ce70:	bfde      	ittt	le
 800ce72:	9e08      	ldrle	r6, [sp, #32]
 800ce74:	434e      	mulle	r6, r1
 800ce76:	9608      	strle	r6, [sp, #32]
 800ce78:	e7e1      	b.n	800ce3e <_strtod_l+0x216>
 800ce7a:	280f      	cmp	r0, #15
 800ce7c:	dceb      	bgt.n	800ce56 <_strtod_l+0x22e>
 800ce7e:	9808      	ldr	r0, [sp, #32]
 800ce80:	230a      	movs	r3, #10
 800ce82:	fb03 2300 	mla	r3, r3, r0, r2
 800ce86:	9308      	str	r3, [sp, #32]
 800ce88:	e7e5      	b.n	800ce56 <_strtod_l+0x22e>
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce8e:	1c50      	adds	r0, r2, #1
 800ce90:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce92:	7852      	ldrb	r2, [r2, #1]
 800ce94:	4618      	mov	r0, r3
 800ce96:	460d      	mov	r5, r1
 800ce98:	e7b1      	b.n	800cdfe <_strtod_l+0x1d6>
 800ce9a:	f04f 0900 	mov.w	r9, #0
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e77d      	b.n	800cd9e <_strtod_l+0x176>
 800cea2:	f04f 0c00 	mov.w	ip, #0
 800cea6:	1ca2      	adds	r2, r4, #2
 800cea8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ceaa:	78a2      	ldrb	r2, [r4, #2]
 800ceac:	e785      	b.n	800cdba <_strtod_l+0x192>
 800ceae:	f04f 0c01 	mov.w	ip, #1
 800ceb2:	e7f8      	b.n	800cea6 <_strtod_l+0x27e>
 800ceb4:	080106b8 	.word	0x080106b8
 800ceb8:	08010694 	.word	0x08010694
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cec2:	1c51      	adds	r1, r2, #1
 800cec4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cec6:	7852      	ldrb	r2, [r2, #1]
 800cec8:	2a30      	cmp	r2, #48	@ 0x30
 800ceca:	d0f9      	beq.n	800cec0 <_strtod_l+0x298>
 800cecc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ced0:	2908      	cmp	r1, #8
 800ced2:	f63f af78 	bhi.w	800cdc6 <_strtod_l+0x19e>
 800ced6:	3a30      	subs	r2, #48	@ 0x30
 800ced8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ceda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cedc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cede:	f04f 080a 	mov.w	r8, #10
 800cee2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cee4:	1c56      	adds	r6, r2, #1
 800cee6:	9619      	str	r6, [sp, #100]	@ 0x64
 800cee8:	7852      	ldrb	r2, [r2, #1]
 800ceea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ceee:	f1be 0f09 	cmp.w	lr, #9
 800cef2:	d939      	bls.n	800cf68 <_strtod_l+0x340>
 800cef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cef6:	1a76      	subs	r6, r6, r1
 800cef8:	2e08      	cmp	r6, #8
 800cefa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cefe:	dc03      	bgt.n	800cf08 <_strtod_l+0x2e0>
 800cf00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf02:	4588      	cmp	r8, r1
 800cf04:	bfa8      	it	ge
 800cf06:	4688      	movge	r8, r1
 800cf08:	f1bc 0f00 	cmp.w	ip, #0
 800cf0c:	d001      	beq.n	800cf12 <_strtod_l+0x2ea>
 800cf0e:	f1c8 0800 	rsb	r8, r8, #0
 800cf12:	2d00      	cmp	r5, #0
 800cf14:	d14e      	bne.n	800cfb4 <_strtod_l+0x38c>
 800cf16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf18:	4308      	orrs	r0, r1
 800cf1a:	f47f aebe 	bne.w	800cc9a <_strtod_l+0x72>
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f47f aed6 	bne.w	800ccd0 <_strtod_l+0xa8>
 800cf24:	2a69      	cmp	r2, #105	@ 0x69
 800cf26:	d028      	beq.n	800cf7a <_strtod_l+0x352>
 800cf28:	dc25      	bgt.n	800cf76 <_strtod_l+0x34e>
 800cf2a:	2a49      	cmp	r2, #73	@ 0x49
 800cf2c:	d025      	beq.n	800cf7a <_strtod_l+0x352>
 800cf2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf30:	f47f aece 	bne.w	800ccd0 <_strtod_l+0xa8>
 800cf34:	499b      	ldr	r1, [pc, #620]	@ (800d1a4 <_strtod_l+0x57c>)
 800cf36:	a819      	add	r0, sp, #100	@ 0x64
 800cf38:	f001 f99e 	bl	800e278 <__match>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f43f aec7 	beq.w	800ccd0 <_strtod_l+0xa8>
 800cf42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b28      	cmp	r3, #40	@ 0x28
 800cf48:	d12e      	bne.n	800cfa8 <_strtod_l+0x380>
 800cf4a:	4997      	ldr	r1, [pc, #604]	@ (800d1a8 <_strtod_l+0x580>)
 800cf4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf4e:	a819      	add	r0, sp, #100	@ 0x64
 800cf50:	f001 f9a6 	bl	800e2a0 <__hexnan>
 800cf54:	2805      	cmp	r0, #5
 800cf56:	d127      	bne.n	800cfa8 <_strtod_l+0x380>
 800cf58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cf5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cf62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cf66:	e698      	b.n	800cc9a <_strtod_l+0x72>
 800cf68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf6a:	fb08 2101 	mla	r1, r8, r1, r2
 800cf6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cf72:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf74:	e7b5      	b.n	800cee2 <_strtod_l+0x2ba>
 800cf76:	2a6e      	cmp	r2, #110	@ 0x6e
 800cf78:	e7da      	b.n	800cf30 <_strtod_l+0x308>
 800cf7a:	498c      	ldr	r1, [pc, #560]	@ (800d1ac <_strtod_l+0x584>)
 800cf7c:	a819      	add	r0, sp, #100	@ 0x64
 800cf7e:	f001 f97b 	bl	800e278 <__match>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	f43f aea4 	beq.w	800ccd0 <_strtod_l+0xa8>
 800cf88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf8a:	4989      	ldr	r1, [pc, #548]	@ (800d1b0 <_strtod_l+0x588>)
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	a819      	add	r0, sp, #100	@ 0x64
 800cf90:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf92:	f001 f971 	bl	800e278 <__match>
 800cf96:	b910      	cbnz	r0, 800cf9e <_strtod_l+0x376>
 800cf98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d1c0 <_strtod_l+0x598>
 800cfa2:	f04f 0a00 	mov.w	sl, #0
 800cfa6:	e678      	b.n	800cc9a <_strtod_l+0x72>
 800cfa8:	4882      	ldr	r0, [pc, #520]	@ (800d1b4 <_strtod_l+0x58c>)
 800cfaa:	f000 fe89 	bl	800dcc0 <nan>
 800cfae:	ec5b ab10 	vmov	sl, fp, d0
 800cfb2:	e672      	b.n	800cc9a <_strtod_l+0x72>
 800cfb4:	eba8 0309 	sub.w	r3, r8, r9
 800cfb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfbc:	2f00      	cmp	r7, #0
 800cfbe:	bf08      	it	eq
 800cfc0:	462f      	moveq	r7, r5
 800cfc2:	2d10      	cmp	r5, #16
 800cfc4:	462c      	mov	r4, r5
 800cfc6:	bfa8      	it	ge
 800cfc8:	2410      	movge	r4, #16
 800cfca:	f7f3 faa3 	bl	8000514 <__aeabi_ui2d>
 800cfce:	2d09      	cmp	r5, #9
 800cfd0:	4682      	mov	sl, r0
 800cfd2:	468b      	mov	fp, r1
 800cfd4:	dc13      	bgt.n	800cffe <_strtod_l+0x3d6>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f43f ae5e 	beq.w	800cc9a <_strtod_l+0x72>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	dd78      	ble.n	800d0d4 <_strtod_l+0x4ac>
 800cfe2:	2b16      	cmp	r3, #22
 800cfe4:	dc5f      	bgt.n	800d0a6 <_strtod_l+0x47e>
 800cfe6:	4974      	ldr	r1, [pc, #464]	@ (800d1b8 <_strtod_l+0x590>)
 800cfe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cff0:	4652      	mov	r2, sl
 800cff2:	465b      	mov	r3, fp
 800cff4:	f7f3 fb08 	bl	8000608 <__aeabi_dmul>
 800cff8:	4682      	mov	sl, r0
 800cffa:	468b      	mov	fp, r1
 800cffc:	e64d      	b.n	800cc9a <_strtod_l+0x72>
 800cffe:	4b6e      	ldr	r3, [pc, #440]	@ (800d1b8 <_strtod_l+0x590>)
 800d000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d004:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d008:	f7f3 fafe 	bl	8000608 <__aeabi_dmul>
 800d00c:	4682      	mov	sl, r0
 800d00e:	9808      	ldr	r0, [sp, #32]
 800d010:	468b      	mov	fp, r1
 800d012:	f7f3 fa7f 	bl	8000514 <__aeabi_ui2d>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4650      	mov	r0, sl
 800d01c:	4659      	mov	r1, fp
 800d01e:	f7f3 f93d 	bl	800029c <__adddf3>
 800d022:	2d0f      	cmp	r5, #15
 800d024:	4682      	mov	sl, r0
 800d026:	468b      	mov	fp, r1
 800d028:	ddd5      	ble.n	800cfd6 <_strtod_l+0x3ae>
 800d02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d02c:	1b2c      	subs	r4, r5, r4
 800d02e:	441c      	add	r4, r3
 800d030:	2c00      	cmp	r4, #0
 800d032:	f340 8096 	ble.w	800d162 <_strtod_l+0x53a>
 800d036:	f014 030f 	ands.w	r3, r4, #15
 800d03a:	d00a      	beq.n	800d052 <_strtod_l+0x42a>
 800d03c:	495e      	ldr	r1, [pc, #376]	@ (800d1b8 <_strtod_l+0x590>)
 800d03e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d042:	4652      	mov	r2, sl
 800d044:	465b      	mov	r3, fp
 800d046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d04a:	f7f3 fadd 	bl	8000608 <__aeabi_dmul>
 800d04e:	4682      	mov	sl, r0
 800d050:	468b      	mov	fp, r1
 800d052:	f034 040f 	bics.w	r4, r4, #15
 800d056:	d073      	beq.n	800d140 <_strtod_l+0x518>
 800d058:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d05c:	dd48      	ble.n	800d0f0 <_strtod_l+0x4c8>
 800d05e:	2400      	movs	r4, #0
 800d060:	46a0      	mov	r8, r4
 800d062:	940a      	str	r4, [sp, #40]	@ 0x28
 800d064:	46a1      	mov	r9, r4
 800d066:	9a05      	ldr	r2, [sp, #20]
 800d068:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d1c0 <_strtod_l+0x598>
 800d06c:	2322      	movs	r3, #34	@ 0x22
 800d06e:	6013      	str	r3, [r2, #0]
 800d070:	f04f 0a00 	mov.w	sl, #0
 800d074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d076:	2b00      	cmp	r3, #0
 800d078:	f43f ae0f 	beq.w	800cc9a <_strtod_l+0x72>
 800d07c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d07e:	9805      	ldr	r0, [sp, #20]
 800d080:	f001 faaa 	bl	800e5d8 <_Bfree>
 800d084:	9805      	ldr	r0, [sp, #20]
 800d086:	4649      	mov	r1, r9
 800d088:	f001 faa6 	bl	800e5d8 <_Bfree>
 800d08c:	9805      	ldr	r0, [sp, #20]
 800d08e:	4641      	mov	r1, r8
 800d090:	f001 faa2 	bl	800e5d8 <_Bfree>
 800d094:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d096:	9805      	ldr	r0, [sp, #20]
 800d098:	f001 fa9e 	bl	800e5d8 <_Bfree>
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	4621      	mov	r1, r4
 800d0a0:	f001 fa9a 	bl	800e5d8 <_Bfree>
 800d0a4:	e5f9      	b.n	800cc9a <_strtod_l+0x72>
 800d0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	dbbc      	blt.n	800d02a <_strtod_l+0x402>
 800d0b0:	4c41      	ldr	r4, [pc, #260]	@ (800d1b8 <_strtod_l+0x590>)
 800d0b2:	f1c5 050f 	rsb	r5, r5, #15
 800d0b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0ba:	4652      	mov	r2, sl
 800d0bc:	465b      	mov	r3, fp
 800d0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c2:	f7f3 faa1 	bl	8000608 <__aeabi_dmul>
 800d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c8:	1b5d      	subs	r5, r3, r5
 800d0ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0d2:	e78f      	b.n	800cff4 <_strtod_l+0x3cc>
 800d0d4:	3316      	adds	r3, #22
 800d0d6:	dba8      	blt.n	800d02a <_strtod_l+0x402>
 800d0d8:	4b37      	ldr	r3, [pc, #220]	@ (800d1b8 <_strtod_l+0x590>)
 800d0da:	eba9 0808 	sub.w	r8, r9, r8
 800d0de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d0e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d0e6:	4650      	mov	r0, sl
 800d0e8:	4659      	mov	r1, fp
 800d0ea:	f7f3 fbb7 	bl	800085c <__aeabi_ddiv>
 800d0ee:	e783      	b.n	800cff8 <_strtod_l+0x3d0>
 800d0f0:	4b32      	ldr	r3, [pc, #200]	@ (800d1bc <_strtod_l+0x594>)
 800d0f2:	9308      	str	r3, [sp, #32]
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	1124      	asrs	r4, r4, #4
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	4659      	mov	r1, fp
 800d0fc:	461e      	mov	r6, r3
 800d0fe:	2c01      	cmp	r4, #1
 800d100:	dc21      	bgt.n	800d146 <_strtod_l+0x51e>
 800d102:	b10b      	cbz	r3, 800d108 <_strtod_l+0x4e0>
 800d104:	4682      	mov	sl, r0
 800d106:	468b      	mov	fp, r1
 800d108:	492c      	ldr	r1, [pc, #176]	@ (800d1bc <_strtod_l+0x594>)
 800d10a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d10e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d112:	4652      	mov	r2, sl
 800d114:	465b      	mov	r3, fp
 800d116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d11a:	f7f3 fa75 	bl	8000608 <__aeabi_dmul>
 800d11e:	4b28      	ldr	r3, [pc, #160]	@ (800d1c0 <_strtod_l+0x598>)
 800d120:	460a      	mov	r2, r1
 800d122:	400b      	ands	r3, r1
 800d124:	4927      	ldr	r1, [pc, #156]	@ (800d1c4 <_strtod_l+0x59c>)
 800d126:	428b      	cmp	r3, r1
 800d128:	4682      	mov	sl, r0
 800d12a:	d898      	bhi.n	800d05e <_strtod_l+0x436>
 800d12c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d130:	428b      	cmp	r3, r1
 800d132:	bf86      	itte	hi
 800d134:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d1c8 <_strtod_l+0x5a0>
 800d138:	f04f 3aff 	movhi.w	sl, #4294967295
 800d13c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d140:	2300      	movs	r3, #0
 800d142:	9308      	str	r3, [sp, #32]
 800d144:	e07a      	b.n	800d23c <_strtod_l+0x614>
 800d146:	07e2      	lsls	r2, r4, #31
 800d148:	d505      	bpl.n	800d156 <_strtod_l+0x52e>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	f7f3 fa5a 	bl	8000608 <__aeabi_dmul>
 800d154:	2301      	movs	r3, #1
 800d156:	9a08      	ldr	r2, [sp, #32]
 800d158:	3208      	adds	r2, #8
 800d15a:	3601      	adds	r6, #1
 800d15c:	1064      	asrs	r4, r4, #1
 800d15e:	9208      	str	r2, [sp, #32]
 800d160:	e7cd      	b.n	800d0fe <_strtod_l+0x4d6>
 800d162:	d0ed      	beq.n	800d140 <_strtod_l+0x518>
 800d164:	4264      	negs	r4, r4
 800d166:	f014 020f 	ands.w	r2, r4, #15
 800d16a:	d00a      	beq.n	800d182 <_strtod_l+0x55a>
 800d16c:	4b12      	ldr	r3, [pc, #72]	@ (800d1b8 <_strtod_l+0x590>)
 800d16e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d172:	4650      	mov	r0, sl
 800d174:	4659      	mov	r1, fp
 800d176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17a:	f7f3 fb6f 	bl	800085c <__aeabi_ddiv>
 800d17e:	4682      	mov	sl, r0
 800d180:	468b      	mov	fp, r1
 800d182:	1124      	asrs	r4, r4, #4
 800d184:	d0dc      	beq.n	800d140 <_strtod_l+0x518>
 800d186:	2c1f      	cmp	r4, #31
 800d188:	dd20      	ble.n	800d1cc <_strtod_l+0x5a4>
 800d18a:	2400      	movs	r4, #0
 800d18c:	46a0      	mov	r8, r4
 800d18e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d190:	46a1      	mov	r9, r4
 800d192:	9a05      	ldr	r2, [sp, #20]
 800d194:	2322      	movs	r3, #34	@ 0x22
 800d196:	f04f 0a00 	mov.w	sl, #0
 800d19a:	f04f 0b00 	mov.w	fp, #0
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	e768      	b.n	800d074 <_strtod_l+0x44c>
 800d1a2:	bf00      	nop
 800d1a4:	0801069f 	.word	0x0801069f
 800d1a8:	080106a4 	.word	0x080106a4
 800d1ac:	08010696 	.word	0x08010696
 800d1b0:	08010699 	.word	0x08010699
 800d1b4:	08010a4e 	.word	0x08010a4e
 800d1b8:	08010918 	.word	0x08010918
 800d1bc:	080108f0 	.word	0x080108f0
 800d1c0:	7ff00000 	.word	0x7ff00000
 800d1c4:	7ca00000 	.word	0x7ca00000
 800d1c8:	7fefffff 	.word	0x7fefffff
 800d1cc:	f014 0310 	ands.w	r3, r4, #16
 800d1d0:	bf18      	it	ne
 800d1d2:	236a      	movne	r3, #106	@ 0x6a
 800d1d4:	4ea9      	ldr	r6, [pc, #676]	@ (800d47c <_strtod_l+0x854>)
 800d1d6:	9308      	str	r3, [sp, #32]
 800d1d8:	4650      	mov	r0, sl
 800d1da:	4659      	mov	r1, fp
 800d1dc:	2300      	movs	r3, #0
 800d1de:	07e2      	lsls	r2, r4, #31
 800d1e0:	d504      	bpl.n	800d1ec <_strtod_l+0x5c4>
 800d1e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1e6:	f7f3 fa0f 	bl	8000608 <__aeabi_dmul>
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	1064      	asrs	r4, r4, #1
 800d1ee:	f106 0608 	add.w	r6, r6, #8
 800d1f2:	d1f4      	bne.n	800d1de <_strtod_l+0x5b6>
 800d1f4:	b10b      	cbz	r3, 800d1fa <_strtod_l+0x5d2>
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	468b      	mov	fp, r1
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	b1b3      	cbz	r3, 800d22c <_strtod_l+0x604>
 800d1fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d202:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d206:	2b00      	cmp	r3, #0
 800d208:	4659      	mov	r1, fp
 800d20a:	dd0f      	ble.n	800d22c <_strtod_l+0x604>
 800d20c:	2b1f      	cmp	r3, #31
 800d20e:	dd55      	ble.n	800d2bc <_strtod_l+0x694>
 800d210:	2b34      	cmp	r3, #52	@ 0x34
 800d212:	bfde      	ittt	le
 800d214:	f04f 33ff 	movle.w	r3, #4294967295
 800d218:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d21c:	4093      	lslle	r3, r2
 800d21e:	f04f 0a00 	mov.w	sl, #0
 800d222:	bfcc      	ite	gt
 800d224:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d228:	ea03 0b01 	andle.w	fp, r3, r1
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	4650      	mov	r0, sl
 800d232:	4659      	mov	r1, fp
 800d234:	f7f3 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 800d238:	2800      	cmp	r0, #0
 800d23a:	d1a6      	bne.n	800d18a <_strtod_l+0x562>
 800d23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d242:	9805      	ldr	r0, [sp, #20]
 800d244:	462b      	mov	r3, r5
 800d246:	463a      	mov	r2, r7
 800d248:	f001 fa2e 	bl	800e6a8 <__s2b>
 800d24c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d24e:	2800      	cmp	r0, #0
 800d250:	f43f af05 	beq.w	800d05e <_strtod_l+0x436>
 800d254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d256:	2a00      	cmp	r2, #0
 800d258:	eba9 0308 	sub.w	r3, r9, r8
 800d25c:	bfa8      	it	ge
 800d25e:	2300      	movge	r3, #0
 800d260:	9312      	str	r3, [sp, #72]	@ 0x48
 800d262:	2400      	movs	r4, #0
 800d264:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d268:	9316      	str	r3, [sp, #88]	@ 0x58
 800d26a:	46a0      	mov	r8, r4
 800d26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d26e:	9805      	ldr	r0, [sp, #20]
 800d270:	6859      	ldr	r1, [r3, #4]
 800d272:	f001 f971 	bl	800e558 <_Balloc>
 800d276:	4681      	mov	r9, r0
 800d278:	2800      	cmp	r0, #0
 800d27a:	f43f aef4 	beq.w	800d066 <_strtod_l+0x43e>
 800d27e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d280:	691a      	ldr	r2, [r3, #16]
 800d282:	3202      	adds	r2, #2
 800d284:	f103 010c 	add.w	r1, r3, #12
 800d288:	0092      	lsls	r2, r2, #2
 800d28a:	300c      	adds	r0, #12
 800d28c:	f000 fd09 	bl	800dca2 <memcpy>
 800d290:	ec4b ab10 	vmov	d0, sl, fp
 800d294:	9805      	ldr	r0, [sp, #20]
 800d296:	aa1c      	add	r2, sp, #112	@ 0x70
 800d298:	a91b      	add	r1, sp, #108	@ 0x6c
 800d29a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d29e:	f001 fd3f 	bl	800ed20 <__d2b>
 800d2a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	f43f aede 	beq.w	800d066 <_strtod_l+0x43e>
 800d2aa:	9805      	ldr	r0, [sp, #20]
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	f001 fa91 	bl	800e7d4 <__i2b>
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	b948      	cbnz	r0, 800d2ca <_strtod_l+0x6a2>
 800d2b6:	f04f 0800 	mov.w	r8, #0
 800d2ba:	e6d4      	b.n	800d066 <_strtod_l+0x43e>
 800d2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c4:	ea03 0a0a 	and.w	sl, r3, sl
 800d2c8:	e7b0      	b.n	800d22c <_strtod_l+0x604>
 800d2ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d2cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d2ce:	2d00      	cmp	r5, #0
 800d2d0:	bfab      	itete	ge
 800d2d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d2d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d2d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d2d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d2da:	bfac      	ite	ge
 800d2dc:	18ef      	addge	r7, r5, r3
 800d2de:	1b5e      	sublt	r6, r3, r5
 800d2e0:	9b08      	ldr	r3, [sp, #32]
 800d2e2:	1aed      	subs	r5, r5, r3
 800d2e4:	4415      	add	r5, r2
 800d2e6:	4b66      	ldr	r3, [pc, #408]	@ (800d480 <_strtod_l+0x858>)
 800d2e8:	3d01      	subs	r5, #1
 800d2ea:	429d      	cmp	r5, r3
 800d2ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d2f0:	da50      	bge.n	800d394 <_strtod_l+0x76c>
 800d2f2:	1b5b      	subs	r3, r3, r5
 800d2f4:	2b1f      	cmp	r3, #31
 800d2f6:	eba2 0203 	sub.w	r2, r2, r3
 800d2fa:	f04f 0101 	mov.w	r1, #1
 800d2fe:	dc3d      	bgt.n	800d37c <_strtod_l+0x754>
 800d300:	fa01 f303 	lsl.w	r3, r1, r3
 800d304:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d306:	2300      	movs	r3, #0
 800d308:	9310      	str	r3, [sp, #64]	@ 0x40
 800d30a:	18bd      	adds	r5, r7, r2
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	42af      	cmp	r7, r5
 800d310:	4416      	add	r6, r2
 800d312:	441e      	add	r6, r3
 800d314:	463b      	mov	r3, r7
 800d316:	bfa8      	it	ge
 800d318:	462b      	movge	r3, r5
 800d31a:	42b3      	cmp	r3, r6
 800d31c:	bfa8      	it	ge
 800d31e:	4633      	movge	r3, r6
 800d320:	2b00      	cmp	r3, #0
 800d322:	bfc2      	ittt	gt
 800d324:	1aed      	subgt	r5, r5, r3
 800d326:	1af6      	subgt	r6, r6, r3
 800d328:	1aff      	subgt	r7, r7, r3
 800d32a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dd16      	ble.n	800d35e <_strtod_l+0x736>
 800d330:	4641      	mov	r1, r8
 800d332:	9805      	ldr	r0, [sp, #20]
 800d334:	461a      	mov	r2, r3
 800d336:	f001 fb0d 	bl	800e954 <__pow5mult>
 800d33a:	4680      	mov	r8, r0
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d0ba      	beq.n	800d2b6 <_strtod_l+0x68e>
 800d340:	4601      	mov	r1, r0
 800d342:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d344:	9805      	ldr	r0, [sp, #20]
 800d346:	f001 fa5b 	bl	800e800 <__multiply>
 800d34a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f43f ae8a 	beq.w	800d066 <_strtod_l+0x43e>
 800d352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d354:	9805      	ldr	r0, [sp, #20]
 800d356:	f001 f93f 	bl	800e5d8 <_Bfree>
 800d35a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d35c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d35e:	2d00      	cmp	r5, #0
 800d360:	dc1d      	bgt.n	800d39e <_strtod_l+0x776>
 800d362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	dd23      	ble.n	800d3b0 <_strtod_l+0x788>
 800d368:	4649      	mov	r1, r9
 800d36a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d36c:	9805      	ldr	r0, [sp, #20]
 800d36e:	f001 faf1 	bl	800e954 <__pow5mult>
 800d372:	4681      	mov	r9, r0
 800d374:	b9e0      	cbnz	r0, 800d3b0 <_strtod_l+0x788>
 800d376:	f04f 0900 	mov.w	r9, #0
 800d37a:	e674      	b.n	800d066 <_strtod_l+0x43e>
 800d37c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d380:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d384:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d388:	35e2      	adds	r5, #226	@ 0xe2
 800d38a:	fa01 f305 	lsl.w	r3, r1, r5
 800d38e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d390:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d392:	e7ba      	b.n	800d30a <_strtod_l+0x6e2>
 800d394:	2300      	movs	r3, #0
 800d396:	9310      	str	r3, [sp, #64]	@ 0x40
 800d398:	2301      	movs	r3, #1
 800d39a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d39c:	e7b5      	b.n	800d30a <_strtod_l+0x6e2>
 800d39e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3a0:	9805      	ldr	r0, [sp, #20]
 800d3a2:	462a      	mov	r2, r5
 800d3a4:	f001 fb30 	bl	800ea08 <__lshift>
 800d3a8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d1d9      	bne.n	800d362 <_strtod_l+0x73a>
 800d3ae:	e65a      	b.n	800d066 <_strtod_l+0x43e>
 800d3b0:	2e00      	cmp	r6, #0
 800d3b2:	dd07      	ble.n	800d3c4 <_strtod_l+0x79c>
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	9805      	ldr	r0, [sp, #20]
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	f001 fb25 	bl	800ea08 <__lshift>
 800d3be:	4681      	mov	r9, r0
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d0d8      	beq.n	800d376 <_strtod_l+0x74e>
 800d3c4:	2f00      	cmp	r7, #0
 800d3c6:	dd08      	ble.n	800d3da <_strtod_l+0x7b2>
 800d3c8:	4641      	mov	r1, r8
 800d3ca:	9805      	ldr	r0, [sp, #20]
 800d3cc:	463a      	mov	r2, r7
 800d3ce:	f001 fb1b 	bl	800ea08 <__lshift>
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	f43f ae46 	beq.w	800d066 <_strtod_l+0x43e>
 800d3da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	464a      	mov	r2, r9
 800d3e0:	f001 fb9a 	bl	800eb18 <__mdiff>
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	f43f ae3d 	beq.w	800d066 <_strtod_l+0x43e>
 800d3ec:	68c3      	ldr	r3, [r0, #12]
 800d3ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60c3      	str	r3, [r0, #12]
 800d3f4:	4641      	mov	r1, r8
 800d3f6:	f001 fb73 	bl	800eae0 <__mcmp>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	da46      	bge.n	800d48c <_strtod_l+0x864>
 800d3fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d400:	ea53 030a 	orrs.w	r3, r3, sl
 800d404:	d16c      	bne.n	800d4e0 <_strtod_l+0x8b8>
 800d406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d168      	bne.n	800d4e0 <_strtod_l+0x8b8>
 800d40e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d412:	0d1b      	lsrs	r3, r3, #20
 800d414:	051b      	lsls	r3, r3, #20
 800d416:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d41a:	d961      	bls.n	800d4e0 <_strtod_l+0x8b8>
 800d41c:	6963      	ldr	r3, [r4, #20]
 800d41e:	b913      	cbnz	r3, 800d426 <_strtod_l+0x7fe>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	2b01      	cmp	r3, #1
 800d424:	dd5c      	ble.n	800d4e0 <_strtod_l+0x8b8>
 800d426:	4621      	mov	r1, r4
 800d428:	2201      	movs	r2, #1
 800d42a:	9805      	ldr	r0, [sp, #20]
 800d42c:	f001 faec 	bl	800ea08 <__lshift>
 800d430:	4641      	mov	r1, r8
 800d432:	4604      	mov	r4, r0
 800d434:	f001 fb54 	bl	800eae0 <__mcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	dd51      	ble.n	800d4e0 <_strtod_l+0x8b8>
 800d43c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d440:	9a08      	ldr	r2, [sp, #32]
 800d442:	0d1b      	lsrs	r3, r3, #20
 800d444:	051b      	lsls	r3, r3, #20
 800d446:	2a00      	cmp	r2, #0
 800d448:	d06b      	beq.n	800d522 <_strtod_l+0x8fa>
 800d44a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d44e:	d868      	bhi.n	800d522 <_strtod_l+0x8fa>
 800d450:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d454:	f67f ae9d 	bls.w	800d192 <_strtod_l+0x56a>
 800d458:	4b0a      	ldr	r3, [pc, #40]	@ (800d484 <_strtod_l+0x85c>)
 800d45a:	4650      	mov	r0, sl
 800d45c:	4659      	mov	r1, fp
 800d45e:	2200      	movs	r2, #0
 800d460:	f7f3 f8d2 	bl	8000608 <__aeabi_dmul>
 800d464:	4b08      	ldr	r3, [pc, #32]	@ (800d488 <_strtod_l+0x860>)
 800d466:	400b      	ands	r3, r1
 800d468:	4682      	mov	sl, r0
 800d46a:	468b      	mov	fp, r1
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f47f ae05 	bne.w	800d07c <_strtod_l+0x454>
 800d472:	9a05      	ldr	r2, [sp, #20]
 800d474:	2322      	movs	r3, #34	@ 0x22
 800d476:	6013      	str	r3, [r2, #0]
 800d478:	e600      	b.n	800d07c <_strtod_l+0x454>
 800d47a:	bf00      	nop
 800d47c:	080106d0 	.word	0x080106d0
 800d480:	fffffc02 	.word	0xfffffc02
 800d484:	39500000 	.word	0x39500000
 800d488:	7ff00000 	.word	0x7ff00000
 800d48c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d490:	d165      	bne.n	800d55e <_strtod_l+0x936>
 800d492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d498:	b35a      	cbz	r2, 800d4f2 <_strtod_l+0x8ca>
 800d49a:	4a9f      	ldr	r2, [pc, #636]	@ (800d718 <_strtod_l+0xaf0>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d12b      	bne.n	800d4f8 <_strtod_l+0x8d0>
 800d4a0:	9b08      	ldr	r3, [sp, #32]
 800d4a2:	4651      	mov	r1, sl
 800d4a4:	b303      	cbz	r3, 800d4e8 <_strtod_l+0x8c0>
 800d4a6:	4b9d      	ldr	r3, [pc, #628]	@ (800d71c <_strtod_l+0xaf4>)
 800d4a8:	465a      	mov	r2, fp
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b4:	d81b      	bhi.n	800d4ee <_strtod_l+0x8c6>
 800d4b6:	0d1b      	lsrs	r3, r3, #20
 800d4b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c0:	4299      	cmp	r1, r3
 800d4c2:	d119      	bne.n	800d4f8 <_strtod_l+0x8d0>
 800d4c4:	4b96      	ldr	r3, [pc, #600]	@ (800d720 <_strtod_l+0xaf8>)
 800d4c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d102      	bne.n	800d4d2 <_strtod_l+0x8aa>
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	f43f adca 	beq.w	800d066 <_strtod_l+0x43e>
 800d4d2:	4b92      	ldr	r3, [pc, #584]	@ (800d71c <_strtod_l+0xaf4>)
 800d4d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4d6:	401a      	ands	r2, r3
 800d4d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d4dc:	f04f 0a00 	mov.w	sl, #0
 800d4e0:	9b08      	ldr	r3, [sp, #32]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1b8      	bne.n	800d458 <_strtod_l+0x830>
 800d4e6:	e5c9      	b.n	800d07c <_strtod_l+0x454>
 800d4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ec:	e7e8      	b.n	800d4c0 <_strtod_l+0x898>
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	e7e6      	b.n	800d4c0 <_strtod_l+0x898>
 800d4f2:	ea53 030a 	orrs.w	r3, r3, sl
 800d4f6:	d0a1      	beq.n	800d43c <_strtod_l+0x814>
 800d4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4fa:	b1db      	cbz	r3, 800d534 <_strtod_l+0x90c>
 800d4fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4fe:	4213      	tst	r3, r2
 800d500:	d0ee      	beq.n	800d4e0 <_strtod_l+0x8b8>
 800d502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d504:	9a08      	ldr	r2, [sp, #32]
 800d506:	4650      	mov	r0, sl
 800d508:	4659      	mov	r1, fp
 800d50a:	b1bb      	cbz	r3, 800d53c <_strtod_l+0x914>
 800d50c:	f7ff fb6b 	bl	800cbe6 <sulp>
 800d510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d514:	ec53 2b10 	vmov	r2, r3, d0
 800d518:	f7f2 fec0 	bl	800029c <__adddf3>
 800d51c:	4682      	mov	sl, r0
 800d51e:	468b      	mov	fp, r1
 800d520:	e7de      	b.n	800d4e0 <_strtod_l+0x8b8>
 800d522:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d526:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d52a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d52e:	f04f 3aff 	mov.w	sl, #4294967295
 800d532:	e7d5      	b.n	800d4e0 <_strtod_l+0x8b8>
 800d534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d536:	ea13 0f0a 	tst.w	r3, sl
 800d53a:	e7e1      	b.n	800d500 <_strtod_l+0x8d8>
 800d53c:	f7ff fb53 	bl	800cbe6 <sulp>
 800d540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d544:	ec53 2b10 	vmov	r2, r3, d0
 800d548:	f7f2 fea6 	bl	8000298 <__aeabi_dsub>
 800d54c:	2200      	movs	r2, #0
 800d54e:	2300      	movs	r3, #0
 800d550:	4682      	mov	sl, r0
 800d552:	468b      	mov	fp, r1
 800d554:	f7f3 fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d0c1      	beq.n	800d4e0 <_strtod_l+0x8b8>
 800d55c:	e619      	b.n	800d192 <_strtod_l+0x56a>
 800d55e:	4641      	mov	r1, r8
 800d560:	4620      	mov	r0, r4
 800d562:	f001 fc35 	bl	800edd0 <__ratio>
 800d566:	ec57 6b10 	vmov	r6, r7, d0
 800d56a:	2200      	movs	r2, #0
 800d56c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d570:	4630      	mov	r0, r6
 800d572:	4639      	mov	r1, r7
 800d574:	f7f3 fac4 	bl	8000b00 <__aeabi_dcmple>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d06f      	beq.n	800d65c <_strtod_l+0xa34>
 800d57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d17a      	bne.n	800d678 <_strtod_l+0xa50>
 800d582:	f1ba 0f00 	cmp.w	sl, #0
 800d586:	d158      	bne.n	800d63a <_strtod_l+0xa12>
 800d588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d58a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d15a      	bne.n	800d648 <_strtod_l+0xa20>
 800d592:	4b64      	ldr	r3, [pc, #400]	@ (800d724 <_strtod_l+0xafc>)
 800d594:	2200      	movs	r2, #0
 800d596:	4630      	mov	r0, r6
 800d598:	4639      	mov	r1, r7
 800d59a:	f7f3 faa7 	bl	8000aec <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d159      	bne.n	800d656 <_strtod_l+0xa2e>
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	4b60      	ldr	r3, [pc, #384]	@ (800d728 <_strtod_l+0xb00>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f7f3 f82d 	bl	8000608 <__aeabi_dmul>
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	460f      	mov	r7, r1
 800d5b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d5b6:	9606      	str	r6, [sp, #24]
 800d5b8:	9307      	str	r3, [sp, #28]
 800d5ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5be:	4d57      	ldr	r5, [pc, #348]	@ (800d71c <_strtod_l+0xaf4>)
 800d5c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5c6:	401d      	ands	r5, r3
 800d5c8:	4b58      	ldr	r3, [pc, #352]	@ (800d72c <_strtod_l+0xb04>)
 800d5ca:	429d      	cmp	r5, r3
 800d5cc:	f040 80b2 	bne.w	800d734 <_strtod_l+0xb0c>
 800d5d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d5d6:	ec4b ab10 	vmov	d0, sl, fp
 800d5da:	f001 fb31 	bl	800ec40 <__ulp>
 800d5de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5e2:	ec51 0b10 	vmov	r0, r1, d0
 800d5e6:	f7f3 f80f 	bl	8000608 <__aeabi_dmul>
 800d5ea:	4652      	mov	r2, sl
 800d5ec:	465b      	mov	r3, fp
 800d5ee:	f7f2 fe55 	bl	800029c <__adddf3>
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4949      	ldr	r1, [pc, #292]	@ (800d71c <_strtod_l+0xaf4>)
 800d5f6:	4a4e      	ldr	r2, [pc, #312]	@ (800d730 <_strtod_l+0xb08>)
 800d5f8:	4019      	ands	r1, r3
 800d5fa:	4291      	cmp	r1, r2
 800d5fc:	4682      	mov	sl, r0
 800d5fe:	d942      	bls.n	800d686 <_strtod_l+0xa5e>
 800d600:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d602:	4b47      	ldr	r3, [pc, #284]	@ (800d720 <_strtod_l+0xaf8>)
 800d604:	429a      	cmp	r2, r3
 800d606:	d103      	bne.n	800d610 <_strtod_l+0x9e8>
 800d608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d60a:	3301      	adds	r3, #1
 800d60c:	f43f ad2b 	beq.w	800d066 <_strtod_l+0x43e>
 800d610:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d720 <_strtod_l+0xaf8>
 800d614:	f04f 3aff 	mov.w	sl, #4294967295
 800d618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d61a:	9805      	ldr	r0, [sp, #20]
 800d61c:	f000 ffdc 	bl	800e5d8 <_Bfree>
 800d620:	9805      	ldr	r0, [sp, #20]
 800d622:	4649      	mov	r1, r9
 800d624:	f000 ffd8 	bl	800e5d8 <_Bfree>
 800d628:	9805      	ldr	r0, [sp, #20]
 800d62a:	4641      	mov	r1, r8
 800d62c:	f000 ffd4 	bl	800e5d8 <_Bfree>
 800d630:	9805      	ldr	r0, [sp, #20]
 800d632:	4621      	mov	r1, r4
 800d634:	f000 ffd0 	bl	800e5d8 <_Bfree>
 800d638:	e618      	b.n	800d26c <_strtod_l+0x644>
 800d63a:	f1ba 0f01 	cmp.w	sl, #1
 800d63e:	d103      	bne.n	800d648 <_strtod_l+0xa20>
 800d640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d642:	2b00      	cmp	r3, #0
 800d644:	f43f ada5 	beq.w	800d192 <_strtod_l+0x56a>
 800d648:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d6f8 <_strtod_l+0xad0>
 800d64c:	4f35      	ldr	r7, [pc, #212]	@ (800d724 <_strtod_l+0xafc>)
 800d64e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d652:	2600      	movs	r6, #0
 800d654:	e7b1      	b.n	800d5ba <_strtod_l+0x992>
 800d656:	4f34      	ldr	r7, [pc, #208]	@ (800d728 <_strtod_l+0xb00>)
 800d658:	2600      	movs	r6, #0
 800d65a:	e7aa      	b.n	800d5b2 <_strtod_l+0x98a>
 800d65c:	4b32      	ldr	r3, [pc, #200]	@ (800d728 <_strtod_l+0xb00>)
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	2200      	movs	r2, #0
 800d664:	f7f2 ffd0 	bl	8000608 <__aeabi_dmul>
 800d668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d66a:	4606      	mov	r6, r0
 800d66c:	460f      	mov	r7, r1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d09f      	beq.n	800d5b2 <_strtod_l+0x98a>
 800d672:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d676:	e7a0      	b.n	800d5ba <_strtod_l+0x992>
 800d678:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d700 <_strtod_l+0xad8>
 800d67c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d680:	ec57 6b17 	vmov	r6, r7, d7
 800d684:	e799      	b.n	800d5ba <_strtod_l+0x992>
 800d686:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1c1      	bne.n	800d618 <_strtod_l+0x9f0>
 800d694:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d698:	0d1b      	lsrs	r3, r3, #20
 800d69a:	051b      	lsls	r3, r3, #20
 800d69c:	429d      	cmp	r5, r3
 800d69e:	d1bb      	bne.n	800d618 <_strtod_l+0x9f0>
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	f7f3 fac0 	bl	8000c28 <__aeabi_d2lz>
 800d6a8:	f7f2 ff80 	bl	80005ac <__aeabi_l2d>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f2 fdf0 	bl	8000298 <__aeabi_dsub>
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d6c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6c6:	ea46 060a 	orr.w	r6, r6, sl
 800d6ca:	431e      	orrs	r6, r3
 800d6cc:	d06f      	beq.n	800d7ae <_strtod_l+0xb86>
 800d6ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800d708 <_strtod_l+0xae0>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f3 fa0a 	bl	8000aec <__aeabi_dcmplt>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	f47f accf 	bne.w	800d07c <_strtod_l+0x454>
 800d6de:	a30c      	add	r3, pc, #48	@ (adr r3, 800d710 <_strtod_l+0xae8>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6e8:	f7f3 fa1e 	bl	8000b28 <__aeabi_dcmpgt>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d093      	beq.n	800d618 <_strtod_l+0x9f0>
 800d6f0:	e4c4      	b.n	800d07c <_strtod_l+0x454>
 800d6f2:	bf00      	nop
 800d6f4:	f3af 8000 	nop.w
 800d6f8:	00000000 	.word	0x00000000
 800d6fc:	bff00000 	.word	0xbff00000
 800d700:	00000000 	.word	0x00000000
 800d704:	3ff00000 	.word	0x3ff00000
 800d708:	94a03595 	.word	0x94a03595
 800d70c:	3fdfffff 	.word	0x3fdfffff
 800d710:	35afe535 	.word	0x35afe535
 800d714:	3fe00000 	.word	0x3fe00000
 800d718:	000fffff 	.word	0x000fffff
 800d71c:	7ff00000 	.word	0x7ff00000
 800d720:	7fefffff 	.word	0x7fefffff
 800d724:	3ff00000 	.word	0x3ff00000
 800d728:	3fe00000 	.word	0x3fe00000
 800d72c:	7fe00000 	.word	0x7fe00000
 800d730:	7c9fffff 	.word	0x7c9fffff
 800d734:	9b08      	ldr	r3, [sp, #32]
 800d736:	b323      	cbz	r3, 800d782 <_strtod_l+0xb5a>
 800d738:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d73c:	d821      	bhi.n	800d782 <_strtod_l+0xb5a>
 800d73e:	a328      	add	r3, pc, #160	@ (adr r3, 800d7e0 <_strtod_l+0xbb8>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	f7f3 f9da 	bl	8000b00 <__aeabi_dcmple>
 800d74c:	b1a0      	cbz	r0, 800d778 <_strtod_l+0xb50>
 800d74e:	4639      	mov	r1, r7
 800d750:	4630      	mov	r0, r6
 800d752:	f7f3 fa31 	bl	8000bb8 <__aeabi_d2uiz>
 800d756:	2801      	cmp	r0, #1
 800d758:	bf38      	it	cc
 800d75a:	2001      	movcc	r0, #1
 800d75c:	f7f2 feda 	bl	8000514 <__aeabi_ui2d>
 800d760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d762:	4606      	mov	r6, r0
 800d764:	460f      	mov	r7, r1
 800d766:	b9fb      	cbnz	r3, 800d7a8 <_strtod_l+0xb80>
 800d768:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d76c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d76e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d770:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d774:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d778:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d77a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d77e:	1b5b      	subs	r3, r3, r5
 800d780:	9311      	str	r3, [sp, #68]	@ 0x44
 800d782:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d786:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d78a:	f001 fa59 	bl	800ec40 <__ulp>
 800d78e:	4650      	mov	r0, sl
 800d790:	ec53 2b10 	vmov	r2, r3, d0
 800d794:	4659      	mov	r1, fp
 800d796:	f7f2 ff37 	bl	8000608 <__aeabi_dmul>
 800d79a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d79e:	f7f2 fd7d 	bl	800029c <__adddf3>
 800d7a2:	4682      	mov	sl, r0
 800d7a4:	468b      	mov	fp, r1
 800d7a6:	e770      	b.n	800d68a <_strtod_l+0xa62>
 800d7a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d7ac:	e7e0      	b.n	800d770 <_strtod_l+0xb48>
 800d7ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7e8 <_strtod_l+0xbc0>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	f7f3 f99a 	bl	8000aec <__aeabi_dcmplt>
 800d7b8:	e798      	b.n	800d6ec <_strtod_l+0xac4>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	f7ff ba6d 	b.w	800cca2 <_strtod_l+0x7a>
 800d7c8:	2a65      	cmp	r2, #101	@ 0x65
 800d7ca:	f43f ab66 	beq.w	800ce9a <_strtod_l+0x272>
 800d7ce:	2a45      	cmp	r2, #69	@ 0x45
 800d7d0:	f43f ab63 	beq.w	800ce9a <_strtod_l+0x272>
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	f7ff bb9e 	b.w	800cf16 <_strtod_l+0x2ee>
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	ffc00000 	.word	0xffc00000
 800d7e4:	41dfffff 	.word	0x41dfffff
 800d7e8:	94a03595 	.word	0x94a03595
 800d7ec:	3fcfffff 	.word	0x3fcfffff

0800d7f0 <strtod>:
 800d7f0:	460a      	mov	r2, r1
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	4802      	ldr	r0, [pc, #8]	@ (800d800 <strtod+0x10>)
 800d7f6:	4b03      	ldr	r3, [pc, #12]	@ (800d804 <strtod+0x14>)
 800d7f8:	6800      	ldr	r0, [r0, #0]
 800d7fa:	f7ff ba15 	b.w	800cc28 <_strtod_l>
 800d7fe:	bf00      	nop
 800d800:	20000278 	.word	0x20000278
 800d804:	2000010c 	.word	0x2000010c

0800d808 <_strtol_l.constprop.0>:
 800d808:	2b24      	cmp	r3, #36	@ 0x24
 800d80a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d80e:	4686      	mov	lr, r0
 800d810:	4690      	mov	r8, r2
 800d812:	d801      	bhi.n	800d818 <_strtol_l.constprop.0+0x10>
 800d814:	2b01      	cmp	r3, #1
 800d816:	d106      	bne.n	800d826 <_strtol_l.constprop.0+0x1e>
 800d818:	f000 fa16 	bl	800dc48 <__errno>
 800d81c:	2316      	movs	r3, #22
 800d81e:	6003      	str	r3, [r0, #0]
 800d820:	2000      	movs	r0, #0
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d826:	4834      	ldr	r0, [pc, #208]	@ (800d8f8 <_strtol_l.constprop.0+0xf0>)
 800d828:	460d      	mov	r5, r1
 800d82a:	462a      	mov	r2, r5
 800d82c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d830:	5d06      	ldrb	r6, [r0, r4]
 800d832:	f016 0608 	ands.w	r6, r6, #8
 800d836:	d1f8      	bne.n	800d82a <_strtol_l.constprop.0+0x22>
 800d838:	2c2d      	cmp	r4, #45	@ 0x2d
 800d83a:	d12d      	bne.n	800d898 <_strtol_l.constprop.0+0x90>
 800d83c:	782c      	ldrb	r4, [r5, #0]
 800d83e:	2601      	movs	r6, #1
 800d840:	1c95      	adds	r5, r2, #2
 800d842:	f033 0210 	bics.w	r2, r3, #16
 800d846:	d109      	bne.n	800d85c <_strtol_l.constprop.0+0x54>
 800d848:	2c30      	cmp	r4, #48	@ 0x30
 800d84a:	d12a      	bne.n	800d8a2 <_strtol_l.constprop.0+0x9a>
 800d84c:	782a      	ldrb	r2, [r5, #0]
 800d84e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d852:	2a58      	cmp	r2, #88	@ 0x58
 800d854:	d125      	bne.n	800d8a2 <_strtol_l.constprop.0+0x9a>
 800d856:	786c      	ldrb	r4, [r5, #1]
 800d858:	2310      	movs	r3, #16
 800d85a:	3502      	adds	r5, #2
 800d85c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d860:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d864:	2200      	movs	r2, #0
 800d866:	fbbc f9f3 	udiv	r9, ip, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	fb03 ca19 	mls	sl, r3, r9, ip
 800d870:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d874:	2f09      	cmp	r7, #9
 800d876:	d81b      	bhi.n	800d8b0 <_strtol_l.constprop.0+0xa8>
 800d878:	463c      	mov	r4, r7
 800d87a:	42a3      	cmp	r3, r4
 800d87c:	dd27      	ble.n	800d8ce <_strtol_l.constprop.0+0xc6>
 800d87e:	1c57      	adds	r7, r2, #1
 800d880:	d007      	beq.n	800d892 <_strtol_l.constprop.0+0x8a>
 800d882:	4581      	cmp	r9, r0
 800d884:	d320      	bcc.n	800d8c8 <_strtol_l.constprop.0+0xc0>
 800d886:	d101      	bne.n	800d88c <_strtol_l.constprop.0+0x84>
 800d888:	45a2      	cmp	sl, r4
 800d88a:	db1d      	blt.n	800d8c8 <_strtol_l.constprop.0+0xc0>
 800d88c:	fb00 4003 	mla	r0, r0, r3, r4
 800d890:	2201      	movs	r2, #1
 800d892:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d896:	e7eb      	b.n	800d870 <_strtol_l.constprop.0+0x68>
 800d898:	2c2b      	cmp	r4, #43	@ 0x2b
 800d89a:	bf04      	itt	eq
 800d89c:	782c      	ldrbeq	r4, [r5, #0]
 800d89e:	1c95      	addeq	r5, r2, #2
 800d8a0:	e7cf      	b.n	800d842 <_strtol_l.constprop.0+0x3a>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1da      	bne.n	800d85c <_strtol_l.constprop.0+0x54>
 800d8a6:	2c30      	cmp	r4, #48	@ 0x30
 800d8a8:	bf0c      	ite	eq
 800d8aa:	2308      	moveq	r3, #8
 800d8ac:	230a      	movne	r3, #10
 800d8ae:	e7d5      	b.n	800d85c <_strtol_l.constprop.0+0x54>
 800d8b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d8b4:	2f19      	cmp	r7, #25
 800d8b6:	d801      	bhi.n	800d8bc <_strtol_l.constprop.0+0xb4>
 800d8b8:	3c37      	subs	r4, #55	@ 0x37
 800d8ba:	e7de      	b.n	800d87a <_strtol_l.constprop.0+0x72>
 800d8bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d8c0:	2f19      	cmp	r7, #25
 800d8c2:	d804      	bhi.n	800d8ce <_strtol_l.constprop.0+0xc6>
 800d8c4:	3c57      	subs	r4, #87	@ 0x57
 800d8c6:	e7d8      	b.n	800d87a <_strtol_l.constprop.0+0x72>
 800d8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8cc:	e7e1      	b.n	800d892 <_strtol_l.constprop.0+0x8a>
 800d8ce:	1c53      	adds	r3, r2, #1
 800d8d0:	d108      	bne.n	800d8e4 <_strtol_l.constprop.0+0xdc>
 800d8d2:	2322      	movs	r3, #34	@ 0x22
 800d8d4:	f8ce 3000 	str.w	r3, [lr]
 800d8d8:	4660      	mov	r0, ip
 800d8da:	f1b8 0f00 	cmp.w	r8, #0
 800d8de:	d0a0      	beq.n	800d822 <_strtol_l.constprop.0+0x1a>
 800d8e0:	1e69      	subs	r1, r5, #1
 800d8e2:	e006      	b.n	800d8f2 <_strtol_l.constprop.0+0xea>
 800d8e4:	b106      	cbz	r6, 800d8e8 <_strtol_l.constprop.0+0xe0>
 800d8e6:	4240      	negs	r0, r0
 800d8e8:	f1b8 0f00 	cmp.w	r8, #0
 800d8ec:	d099      	beq.n	800d822 <_strtol_l.constprop.0+0x1a>
 800d8ee:	2a00      	cmp	r2, #0
 800d8f0:	d1f6      	bne.n	800d8e0 <_strtol_l.constprop.0+0xd8>
 800d8f2:	f8c8 1000 	str.w	r1, [r8]
 800d8f6:	e794      	b.n	800d822 <_strtol_l.constprop.0+0x1a>
 800d8f8:	080106f9 	.word	0x080106f9

0800d8fc <strtol>:
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	460a      	mov	r2, r1
 800d900:	4601      	mov	r1, r0
 800d902:	4802      	ldr	r0, [pc, #8]	@ (800d90c <strtol+0x10>)
 800d904:	6800      	ldr	r0, [r0, #0]
 800d906:	f7ff bf7f 	b.w	800d808 <_strtol_l.constprop.0>
 800d90a:	bf00      	nop
 800d90c:	20000278 	.word	0x20000278

0800d910 <std>:
 800d910:	2300      	movs	r3, #0
 800d912:	b510      	push	{r4, lr}
 800d914:	4604      	mov	r4, r0
 800d916:	e9c0 3300 	strd	r3, r3, [r0]
 800d91a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d91e:	6083      	str	r3, [r0, #8]
 800d920:	8181      	strh	r1, [r0, #12]
 800d922:	6643      	str	r3, [r0, #100]	@ 0x64
 800d924:	81c2      	strh	r2, [r0, #14]
 800d926:	6183      	str	r3, [r0, #24]
 800d928:	4619      	mov	r1, r3
 800d92a:	2208      	movs	r2, #8
 800d92c:	305c      	adds	r0, #92	@ 0x5c
 800d92e:	f000 f914 	bl	800db5a <memset>
 800d932:	4b0d      	ldr	r3, [pc, #52]	@ (800d968 <std+0x58>)
 800d934:	6263      	str	r3, [r4, #36]	@ 0x24
 800d936:	4b0d      	ldr	r3, [pc, #52]	@ (800d96c <std+0x5c>)
 800d938:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d93a:	4b0d      	ldr	r3, [pc, #52]	@ (800d970 <std+0x60>)
 800d93c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d93e:	4b0d      	ldr	r3, [pc, #52]	@ (800d974 <std+0x64>)
 800d940:	6323      	str	r3, [r4, #48]	@ 0x30
 800d942:	4b0d      	ldr	r3, [pc, #52]	@ (800d978 <std+0x68>)
 800d944:	6224      	str	r4, [r4, #32]
 800d946:	429c      	cmp	r4, r3
 800d948:	d006      	beq.n	800d958 <std+0x48>
 800d94a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d94e:	4294      	cmp	r4, r2
 800d950:	d002      	beq.n	800d958 <std+0x48>
 800d952:	33d0      	adds	r3, #208	@ 0xd0
 800d954:	429c      	cmp	r4, r3
 800d956:	d105      	bne.n	800d964 <std+0x54>
 800d958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d960:	f000 b99c 	b.w	800dc9c <__retarget_lock_init_recursive>
 800d964:	bd10      	pop	{r4, pc}
 800d966:	bf00      	nop
 800d968:	0800dad5 	.word	0x0800dad5
 800d96c:	0800daf7 	.word	0x0800daf7
 800d970:	0800db2f 	.word	0x0800db2f
 800d974:	0800db53 	.word	0x0800db53
 800d978:	20001f94 	.word	0x20001f94

0800d97c <stdio_exit_handler>:
 800d97c:	4a02      	ldr	r2, [pc, #8]	@ (800d988 <stdio_exit_handler+0xc>)
 800d97e:	4903      	ldr	r1, [pc, #12]	@ (800d98c <stdio_exit_handler+0x10>)
 800d980:	4803      	ldr	r0, [pc, #12]	@ (800d990 <stdio_exit_handler+0x14>)
 800d982:	f000 b869 	b.w	800da58 <_fwalk_sglue>
 800d986:	bf00      	nop
 800d988:	20000100 	.word	0x20000100
 800d98c:	0800f5a9 	.word	0x0800f5a9
 800d990:	2000027c 	.word	0x2000027c

0800d994 <cleanup_stdio>:
 800d994:	6841      	ldr	r1, [r0, #4]
 800d996:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c8 <cleanup_stdio+0x34>)
 800d998:	4299      	cmp	r1, r3
 800d99a:	b510      	push	{r4, lr}
 800d99c:	4604      	mov	r4, r0
 800d99e:	d001      	beq.n	800d9a4 <cleanup_stdio+0x10>
 800d9a0:	f001 fe02 	bl	800f5a8 <_fflush_r>
 800d9a4:	68a1      	ldr	r1, [r4, #8]
 800d9a6:	4b09      	ldr	r3, [pc, #36]	@ (800d9cc <cleanup_stdio+0x38>)
 800d9a8:	4299      	cmp	r1, r3
 800d9aa:	d002      	beq.n	800d9b2 <cleanup_stdio+0x1e>
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f001 fdfb 	bl	800f5a8 <_fflush_r>
 800d9b2:	68e1      	ldr	r1, [r4, #12]
 800d9b4:	4b06      	ldr	r3, [pc, #24]	@ (800d9d0 <cleanup_stdio+0x3c>)
 800d9b6:	4299      	cmp	r1, r3
 800d9b8:	d004      	beq.n	800d9c4 <cleanup_stdio+0x30>
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c0:	f001 bdf2 	b.w	800f5a8 <_fflush_r>
 800d9c4:	bd10      	pop	{r4, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20001f94 	.word	0x20001f94
 800d9cc:	20001ffc 	.word	0x20001ffc
 800d9d0:	20002064 	.word	0x20002064

0800d9d4 <global_stdio_init.part.0>:
 800d9d4:	b510      	push	{r4, lr}
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800da04 <global_stdio_init.part.0+0x30>)
 800d9d8:	4c0b      	ldr	r4, [pc, #44]	@ (800da08 <global_stdio_init.part.0+0x34>)
 800d9da:	4a0c      	ldr	r2, [pc, #48]	@ (800da0c <global_stdio_init.part.0+0x38>)
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	4620      	mov	r0, r4
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	f7ff ff94 	bl	800d910 <std>
 800d9e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	2109      	movs	r1, #9
 800d9f0:	f7ff ff8e 	bl	800d910 <std>
 800d9f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fe:	2112      	movs	r1, #18
 800da00:	f7ff bf86 	b.w	800d910 <std>
 800da04:	200020cc 	.word	0x200020cc
 800da08:	20001f94 	.word	0x20001f94
 800da0c:	0800d97d 	.word	0x0800d97d

0800da10 <__sfp_lock_acquire>:
 800da10:	4801      	ldr	r0, [pc, #4]	@ (800da18 <__sfp_lock_acquire+0x8>)
 800da12:	f000 b944 	b.w	800dc9e <__retarget_lock_acquire_recursive>
 800da16:	bf00      	nop
 800da18:	200020d5 	.word	0x200020d5

0800da1c <__sfp_lock_release>:
 800da1c:	4801      	ldr	r0, [pc, #4]	@ (800da24 <__sfp_lock_release+0x8>)
 800da1e:	f000 b93f 	b.w	800dca0 <__retarget_lock_release_recursive>
 800da22:	bf00      	nop
 800da24:	200020d5 	.word	0x200020d5

0800da28 <__sinit>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	4604      	mov	r4, r0
 800da2c:	f7ff fff0 	bl	800da10 <__sfp_lock_acquire>
 800da30:	6a23      	ldr	r3, [r4, #32]
 800da32:	b11b      	cbz	r3, 800da3c <__sinit+0x14>
 800da34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da38:	f7ff bff0 	b.w	800da1c <__sfp_lock_release>
 800da3c:	4b04      	ldr	r3, [pc, #16]	@ (800da50 <__sinit+0x28>)
 800da3e:	6223      	str	r3, [r4, #32]
 800da40:	4b04      	ldr	r3, [pc, #16]	@ (800da54 <__sinit+0x2c>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1f5      	bne.n	800da34 <__sinit+0xc>
 800da48:	f7ff ffc4 	bl	800d9d4 <global_stdio_init.part.0>
 800da4c:	e7f2      	b.n	800da34 <__sinit+0xc>
 800da4e:	bf00      	nop
 800da50:	0800d995 	.word	0x0800d995
 800da54:	200020cc 	.word	0x200020cc

0800da58 <_fwalk_sglue>:
 800da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da5c:	4607      	mov	r7, r0
 800da5e:	4688      	mov	r8, r1
 800da60:	4614      	mov	r4, r2
 800da62:	2600      	movs	r6, #0
 800da64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da68:	f1b9 0901 	subs.w	r9, r9, #1
 800da6c:	d505      	bpl.n	800da7a <_fwalk_sglue+0x22>
 800da6e:	6824      	ldr	r4, [r4, #0]
 800da70:	2c00      	cmp	r4, #0
 800da72:	d1f7      	bne.n	800da64 <_fwalk_sglue+0xc>
 800da74:	4630      	mov	r0, r6
 800da76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d907      	bls.n	800da90 <_fwalk_sglue+0x38>
 800da80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da84:	3301      	adds	r3, #1
 800da86:	d003      	beq.n	800da90 <_fwalk_sglue+0x38>
 800da88:	4629      	mov	r1, r5
 800da8a:	4638      	mov	r0, r7
 800da8c:	47c0      	blx	r8
 800da8e:	4306      	orrs	r6, r0
 800da90:	3568      	adds	r5, #104	@ 0x68
 800da92:	e7e9      	b.n	800da68 <_fwalk_sglue+0x10>

0800da94 <siprintf>:
 800da94:	b40e      	push	{r1, r2, r3}
 800da96:	b500      	push	{lr}
 800da98:	b09c      	sub	sp, #112	@ 0x70
 800da9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800da9c:	9002      	str	r0, [sp, #8]
 800da9e:	9006      	str	r0, [sp, #24]
 800daa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800daa4:	4809      	ldr	r0, [pc, #36]	@ (800dacc <siprintf+0x38>)
 800daa6:	9107      	str	r1, [sp, #28]
 800daa8:	9104      	str	r1, [sp, #16]
 800daaa:	4909      	ldr	r1, [pc, #36]	@ (800dad0 <siprintf+0x3c>)
 800daac:	f853 2b04 	ldr.w	r2, [r3], #4
 800dab0:	9105      	str	r1, [sp, #20]
 800dab2:	6800      	ldr	r0, [r0, #0]
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	a902      	add	r1, sp, #8
 800dab8:	f001 fa68 	bl	800ef8c <_svfiprintf_r>
 800dabc:	9b02      	ldr	r3, [sp, #8]
 800dabe:	2200      	movs	r2, #0
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	b01c      	add	sp, #112	@ 0x70
 800dac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dac8:	b003      	add	sp, #12
 800daca:	4770      	bx	lr
 800dacc:	20000278 	.word	0x20000278
 800dad0:	ffff0208 	.word	0xffff0208

0800dad4 <__sread>:
 800dad4:	b510      	push	{r4, lr}
 800dad6:	460c      	mov	r4, r1
 800dad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dadc:	f000 f890 	bl	800dc00 <_read_r>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	bfab      	itete	ge
 800dae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dae6:	89a3      	ldrhlt	r3, [r4, #12]
 800dae8:	181b      	addge	r3, r3, r0
 800daea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800daee:	bfac      	ite	ge
 800daf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800daf2:	81a3      	strhlt	r3, [r4, #12]
 800daf4:	bd10      	pop	{r4, pc}

0800daf6 <__swrite>:
 800daf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dafa:	461f      	mov	r7, r3
 800dafc:	898b      	ldrh	r3, [r1, #12]
 800dafe:	05db      	lsls	r3, r3, #23
 800db00:	4605      	mov	r5, r0
 800db02:	460c      	mov	r4, r1
 800db04:	4616      	mov	r6, r2
 800db06:	d505      	bpl.n	800db14 <__swrite+0x1e>
 800db08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0c:	2302      	movs	r3, #2
 800db0e:	2200      	movs	r2, #0
 800db10:	f000 f864 	bl	800dbdc <_lseek_r>
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	4632      	mov	r2, r6
 800db22:	463b      	mov	r3, r7
 800db24:	4628      	mov	r0, r5
 800db26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db2a:	f000 b87b 	b.w	800dc24 <_write_r>

0800db2e <__sseek>:
 800db2e:	b510      	push	{r4, lr}
 800db30:	460c      	mov	r4, r1
 800db32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db36:	f000 f851 	bl	800dbdc <_lseek_r>
 800db3a:	1c43      	adds	r3, r0, #1
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	bf15      	itete	ne
 800db40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db4a:	81a3      	strheq	r3, [r4, #12]
 800db4c:	bf18      	it	ne
 800db4e:	81a3      	strhne	r3, [r4, #12]
 800db50:	bd10      	pop	{r4, pc}

0800db52 <__sclose>:
 800db52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db56:	f000 b831 	b.w	800dbbc <_close_r>

0800db5a <memset>:
 800db5a:	4402      	add	r2, r0
 800db5c:	4603      	mov	r3, r0
 800db5e:	4293      	cmp	r3, r2
 800db60:	d100      	bne.n	800db64 <memset+0xa>
 800db62:	4770      	bx	lr
 800db64:	f803 1b01 	strb.w	r1, [r3], #1
 800db68:	e7f9      	b.n	800db5e <memset+0x4>

0800db6a <strncmp>:
 800db6a:	b510      	push	{r4, lr}
 800db6c:	b16a      	cbz	r2, 800db8a <strncmp+0x20>
 800db6e:	3901      	subs	r1, #1
 800db70:	1884      	adds	r4, r0, r2
 800db72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d103      	bne.n	800db86 <strncmp+0x1c>
 800db7e:	42a0      	cmp	r0, r4
 800db80:	d001      	beq.n	800db86 <strncmp+0x1c>
 800db82:	2a00      	cmp	r2, #0
 800db84:	d1f5      	bne.n	800db72 <strncmp+0x8>
 800db86:	1ad0      	subs	r0, r2, r3
 800db88:	bd10      	pop	{r4, pc}
 800db8a:	4610      	mov	r0, r2
 800db8c:	e7fc      	b.n	800db88 <strncmp+0x1e>

0800db8e <strstr>:
 800db8e:	780a      	ldrb	r2, [r1, #0]
 800db90:	b570      	push	{r4, r5, r6, lr}
 800db92:	b96a      	cbnz	r2, 800dbb0 <strstr+0x22>
 800db94:	bd70      	pop	{r4, r5, r6, pc}
 800db96:	429a      	cmp	r2, r3
 800db98:	d109      	bne.n	800dbae <strstr+0x20>
 800db9a:	460c      	mov	r4, r1
 800db9c:	4605      	mov	r5, r0
 800db9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0f6      	beq.n	800db94 <strstr+0x6>
 800dba6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dbaa:	429e      	cmp	r6, r3
 800dbac:	d0f7      	beq.n	800db9e <strstr+0x10>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	7803      	ldrb	r3, [r0, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1ef      	bne.n	800db96 <strstr+0x8>
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	e7ec      	b.n	800db94 <strstr+0x6>
	...

0800dbbc <_close_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d06      	ldr	r5, [pc, #24]	@ (800dbd8 <_close_r+0x1c>)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	602b      	str	r3, [r5, #0]
 800dbc8:	f7f5 fc4c 	bl	8003464 <_close>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d102      	bne.n	800dbd6 <_close_r+0x1a>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	b103      	cbz	r3, 800dbd6 <_close_r+0x1a>
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	bd38      	pop	{r3, r4, r5, pc}
 800dbd8:	200020d0 	.word	0x200020d0

0800dbdc <_lseek_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	@ (800dbfc <_lseek_r+0x20>)
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	602a      	str	r2, [r5, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f7f5 fc61 	bl	80034b2 <_lseek>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_lseek_r+0x1e>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_lseek_r+0x1e>
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	200020d0 	.word	0x200020d0

0800dc00 <_read_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	@ (800dc20 <_read_r+0x20>)
 800dc04:	4604      	mov	r4, r0
 800dc06:	4608      	mov	r0, r1
 800dc08:	4611      	mov	r1, r2
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	602a      	str	r2, [r5, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f7f5 fbef 	bl	80033f2 <_read>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_read_r+0x1e>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_read_r+0x1e>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	200020d0 	.word	0x200020d0

0800dc24 <_write_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d07      	ldr	r5, [pc, #28]	@ (800dc44 <_write_r+0x20>)
 800dc28:	4604      	mov	r4, r0
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	2200      	movs	r2, #0
 800dc30:	602a      	str	r2, [r5, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	f7f5 fbfa 	bl	800342c <_write>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d102      	bne.n	800dc42 <_write_r+0x1e>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	b103      	cbz	r3, 800dc42 <_write_r+0x1e>
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	200020d0 	.word	0x200020d0

0800dc48 <__errno>:
 800dc48:	4b01      	ldr	r3, [pc, #4]	@ (800dc50 <__errno+0x8>)
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20000278 	.word	0x20000278

0800dc54 <__libc_init_array>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4d0d      	ldr	r5, [pc, #52]	@ (800dc8c <__libc_init_array+0x38>)
 800dc58:	4c0d      	ldr	r4, [pc, #52]	@ (800dc90 <__libc_init_array+0x3c>)
 800dc5a:	1b64      	subs	r4, r4, r5
 800dc5c:	10a4      	asrs	r4, r4, #2
 800dc5e:	2600      	movs	r6, #0
 800dc60:	42a6      	cmp	r6, r4
 800dc62:	d109      	bne.n	800dc78 <__libc_init_array+0x24>
 800dc64:	4d0b      	ldr	r5, [pc, #44]	@ (800dc94 <__libc_init_array+0x40>)
 800dc66:	4c0c      	ldr	r4, [pc, #48]	@ (800dc98 <__libc_init_array+0x44>)
 800dc68:	f002 fb1e 	bl	80102a8 <_init>
 800dc6c:	1b64      	subs	r4, r4, r5
 800dc6e:	10a4      	asrs	r4, r4, #2
 800dc70:	2600      	movs	r6, #0
 800dc72:	42a6      	cmp	r6, r4
 800dc74:	d105      	bne.n	800dc82 <__libc_init_array+0x2e>
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7c:	4798      	blx	r3
 800dc7e:	3601      	adds	r6, #1
 800dc80:	e7ee      	b.n	800dc60 <__libc_init_array+0xc>
 800dc82:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc86:	4798      	blx	r3
 800dc88:	3601      	adds	r6, #1
 800dc8a:	e7f2      	b.n	800dc72 <__libc_init_array+0x1e>
 800dc8c:	08010aa8 	.word	0x08010aa8
 800dc90:	08010aa8 	.word	0x08010aa8
 800dc94:	08010aa8 	.word	0x08010aa8
 800dc98:	08010aac 	.word	0x08010aac

0800dc9c <__retarget_lock_init_recursive>:
 800dc9c:	4770      	bx	lr

0800dc9e <__retarget_lock_acquire_recursive>:
 800dc9e:	4770      	bx	lr

0800dca0 <__retarget_lock_release_recursive>:
 800dca0:	4770      	bx	lr

0800dca2 <memcpy>:
 800dca2:	440a      	add	r2, r1
 800dca4:	4291      	cmp	r1, r2
 800dca6:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcaa:	d100      	bne.n	800dcae <memcpy+0xc>
 800dcac:	4770      	bx	lr
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcb8:	4291      	cmp	r1, r2
 800dcba:	d1f9      	bne.n	800dcb0 <memcpy+0xe>
 800dcbc:	bd10      	pop	{r4, pc}
	...

0800dcc0 <nan>:
 800dcc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dcc8 <nan+0x8>
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	00000000 	.word	0x00000000
 800dccc:	7ff80000 	.word	0x7ff80000

0800dcd0 <_free_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4605      	mov	r5, r0
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	d041      	beq.n	800dd5c <_free_r+0x8c>
 800dcd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcdc:	1f0c      	subs	r4, r1, #4
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bfb8      	it	lt
 800dce2:	18e4      	addlt	r4, r4, r3
 800dce4:	f000 fc2c 	bl	800e540 <__malloc_lock>
 800dce8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd60 <_free_r+0x90>)
 800dcea:	6813      	ldr	r3, [r2, #0]
 800dcec:	b933      	cbnz	r3, 800dcfc <_free_r+0x2c>
 800dcee:	6063      	str	r3, [r4, #4]
 800dcf0:	6014      	str	r4, [r2, #0]
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf8:	f000 bc28 	b.w	800e54c <__malloc_unlock>
 800dcfc:	42a3      	cmp	r3, r4
 800dcfe:	d908      	bls.n	800dd12 <_free_r+0x42>
 800dd00:	6820      	ldr	r0, [r4, #0]
 800dd02:	1821      	adds	r1, r4, r0
 800dd04:	428b      	cmp	r3, r1
 800dd06:	bf01      	itttt	eq
 800dd08:	6819      	ldreq	r1, [r3, #0]
 800dd0a:	685b      	ldreq	r3, [r3, #4]
 800dd0c:	1809      	addeq	r1, r1, r0
 800dd0e:	6021      	streq	r1, [r4, #0]
 800dd10:	e7ed      	b.n	800dcee <_free_r+0x1e>
 800dd12:	461a      	mov	r2, r3
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	b10b      	cbz	r3, 800dd1c <_free_r+0x4c>
 800dd18:	42a3      	cmp	r3, r4
 800dd1a:	d9fa      	bls.n	800dd12 <_free_r+0x42>
 800dd1c:	6811      	ldr	r1, [r2, #0]
 800dd1e:	1850      	adds	r0, r2, r1
 800dd20:	42a0      	cmp	r0, r4
 800dd22:	d10b      	bne.n	800dd3c <_free_r+0x6c>
 800dd24:	6820      	ldr	r0, [r4, #0]
 800dd26:	4401      	add	r1, r0
 800dd28:	1850      	adds	r0, r2, r1
 800dd2a:	4283      	cmp	r3, r0
 800dd2c:	6011      	str	r1, [r2, #0]
 800dd2e:	d1e0      	bne.n	800dcf2 <_free_r+0x22>
 800dd30:	6818      	ldr	r0, [r3, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	6053      	str	r3, [r2, #4]
 800dd36:	4408      	add	r0, r1
 800dd38:	6010      	str	r0, [r2, #0]
 800dd3a:	e7da      	b.n	800dcf2 <_free_r+0x22>
 800dd3c:	d902      	bls.n	800dd44 <_free_r+0x74>
 800dd3e:	230c      	movs	r3, #12
 800dd40:	602b      	str	r3, [r5, #0]
 800dd42:	e7d6      	b.n	800dcf2 <_free_r+0x22>
 800dd44:	6820      	ldr	r0, [r4, #0]
 800dd46:	1821      	adds	r1, r4, r0
 800dd48:	428b      	cmp	r3, r1
 800dd4a:	bf04      	itt	eq
 800dd4c:	6819      	ldreq	r1, [r3, #0]
 800dd4e:	685b      	ldreq	r3, [r3, #4]
 800dd50:	6063      	str	r3, [r4, #4]
 800dd52:	bf04      	itt	eq
 800dd54:	1809      	addeq	r1, r1, r0
 800dd56:	6021      	streq	r1, [r4, #0]
 800dd58:	6054      	str	r4, [r2, #4]
 800dd5a:	e7ca      	b.n	800dcf2 <_free_r+0x22>
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}
 800dd5e:	bf00      	nop
 800dd60:	200020dc 	.word	0x200020dc

0800dd64 <rshift>:
 800dd64:	6903      	ldr	r3, [r0, #16]
 800dd66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd72:	f100 0414 	add.w	r4, r0, #20
 800dd76:	dd45      	ble.n	800de04 <rshift+0xa0>
 800dd78:	f011 011f 	ands.w	r1, r1, #31
 800dd7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd84:	d10c      	bne.n	800dda0 <rshift+0x3c>
 800dd86:	f100 0710 	add.w	r7, r0, #16
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	42b1      	cmp	r1, r6
 800dd8e:	d334      	bcc.n	800ddfa <rshift+0x96>
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	1eea      	subs	r2, r5, #3
 800dd96:	4296      	cmp	r6, r2
 800dd98:	bf38      	it	cc
 800dd9a:	2300      	movcc	r3, #0
 800dd9c:	4423      	add	r3, r4
 800dd9e:	e015      	b.n	800ddcc <rshift+0x68>
 800dda0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dda4:	f1c1 0820 	rsb	r8, r1, #32
 800dda8:	40cf      	lsrs	r7, r1
 800ddaa:	f105 0e04 	add.w	lr, r5, #4
 800ddae:	46a1      	mov	r9, r4
 800ddb0:	4576      	cmp	r6, lr
 800ddb2:	46f4      	mov	ip, lr
 800ddb4:	d815      	bhi.n	800dde2 <rshift+0x7e>
 800ddb6:	1a9a      	subs	r2, r3, r2
 800ddb8:	0092      	lsls	r2, r2, #2
 800ddba:	3a04      	subs	r2, #4
 800ddbc:	3501      	adds	r5, #1
 800ddbe:	42ae      	cmp	r6, r5
 800ddc0:	bf38      	it	cc
 800ddc2:	2200      	movcc	r2, #0
 800ddc4:	18a3      	adds	r3, r4, r2
 800ddc6:	50a7      	str	r7, [r4, r2]
 800ddc8:	b107      	cbz	r7, 800ddcc <rshift+0x68>
 800ddca:	3304      	adds	r3, #4
 800ddcc:	1b1a      	subs	r2, r3, r4
 800ddce:	42a3      	cmp	r3, r4
 800ddd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddd4:	bf08      	it	eq
 800ddd6:	2300      	moveq	r3, #0
 800ddd8:	6102      	str	r2, [r0, #16]
 800ddda:	bf08      	it	eq
 800dddc:	6143      	streq	r3, [r0, #20]
 800ddde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde2:	f8dc c000 	ldr.w	ip, [ip]
 800dde6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddea:	ea4c 0707 	orr.w	r7, ip, r7
 800ddee:	f849 7b04 	str.w	r7, [r9], #4
 800ddf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddf6:	40cf      	lsrs	r7, r1
 800ddf8:	e7da      	b.n	800ddb0 <rshift+0x4c>
 800ddfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800de02:	e7c3      	b.n	800dd8c <rshift+0x28>
 800de04:	4623      	mov	r3, r4
 800de06:	e7e1      	b.n	800ddcc <rshift+0x68>

0800de08 <__hexdig_fun>:
 800de08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de0c:	2b09      	cmp	r3, #9
 800de0e:	d802      	bhi.n	800de16 <__hexdig_fun+0xe>
 800de10:	3820      	subs	r0, #32
 800de12:	b2c0      	uxtb	r0, r0
 800de14:	4770      	bx	lr
 800de16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de1a:	2b05      	cmp	r3, #5
 800de1c:	d801      	bhi.n	800de22 <__hexdig_fun+0x1a>
 800de1e:	3847      	subs	r0, #71	@ 0x47
 800de20:	e7f7      	b.n	800de12 <__hexdig_fun+0xa>
 800de22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de26:	2b05      	cmp	r3, #5
 800de28:	d801      	bhi.n	800de2e <__hexdig_fun+0x26>
 800de2a:	3827      	subs	r0, #39	@ 0x27
 800de2c:	e7f1      	b.n	800de12 <__hexdig_fun+0xa>
 800de2e:	2000      	movs	r0, #0
 800de30:	4770      	bx	lr
	...

0800de34 <__gethex>:
 800de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	b085      	sub	sp, #20
 800de3a:	468a      	mov	sl, r1
 800de3c:	9302      	str	r3, [sp, #8]
 800de3e:	680b      	ldr	r3, [r1, #0]
 800de40:	9001      	str	r0, [sp, #4]
 800de42:	4690      	mov	r8, r2
 800de44:	1c9c      	adds	r4, r3, #2
 800de46:	46a1      	mov	r9, r4
 800de48:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de4c:	2830      	cmp	r0, #48	@ 0x30
 800de4e:	d0fa      	beq.n	800de46 <__gethex+0x12>
 800de50:	eba9 0303 	sub.w	r3, r9, r3
 800de54:	f1a3 0b02 	sub.w	fp, r3, #2
 800de58:	f7ff ffd6 	bl	800de08 <__hexdig_fun>
 800de5c:	4605      	mov	r5, r0
 800de5e:	2800      	cmp	r0, #0
 800de60:	d168      	bne.n	800df34 <__gethex+0x100>
 800de62:	49a0      	ldr	r1, [pc, #640]	@ (800e0e4 <__gethex+0x2b0>)
 800de64:	2201      	movs	r2, #1
 800de66:	4648      	mov	r0, r9
 800de68:	f7ff fe7f 	bl	800db6a <strncmp>
 800de6c:	4607      	mov	r7, r0
 800de6e:	2800      	cmp	r0, #0
 800de70:	d167      	bne.n	800df42 <__gethex+0x10e>
 800de72:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de76:	4626      	mov	r6, r4
 800de78:	f7ff ffc6 	bl	800de08 <__hexdig_fun>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d062      	beq.n	800df46 <__gethex+0x112>
 800de80:	4623      	mov	r3, r4
 800de82:	7818      	ldrb	r0, [r3, #0]
 800de84:	2830      	cmp	r0, #48	@ 0x30
 800de86:	4699      	mov	r9, r3
 800de88:	f103 0301 	add.w	r3, r3, #1
 800de8c:	d0f9      	beq.n	800de82 <__gethex+0x4e>
 800de8e:	f7ff ffbb 	bl	800de08 <__hexdig_fun>
 800de92:	fab0 f580 	clz	r5, r0
 800de96:	096d      	lsrs	r5, r5, #5
 800de98:	f04f 0b01 	mov.w	fp, #1
 800de9c:	464a      	mov	r2, r9
 800de9e:	4616      	mov	r6, r2
 800dea0:	3201      	adds	r2, #1
 800dea2:	7830      	ldrb	r0, [r6, #0]
 800dea4:	f7ff ffb0 	bl	800de08 <__hexdig_fun>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d1f8      	bne.n	800de9e <__gethex+0x6a>
 800deac:	498d      	ldr	r1, [pc, #564]	@ (800e0e4 <__gethex+0x2b0>)
 800deae:	2201      	movs	r2, #1
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7ff fe5a 	bl	800db6a <strncmp>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d13f      	bne.n	800df3a <__gethex+0x106>
 800deba:	b944      	cbnz	r4, 800dece <__gethex+0x9a>
 800debc:	1c74      	adds	r4, r6, #1
 800debe:	4622      	mov	r2, r4
 800dec0:	4616      	mov	r6, r2
 800dec2:	3201      	adds	r2, #1
 800dec4:	7830      	ldrb	r0, [r6, #0]
 800dec6:	f7ff ff9f 	bl	800de08 <__hexdig_fun>
 800deca:	2800      	cmp	r0, #0
 800decc:	d1f8      	bne.n	800dec0 <__gethex+0x8c>
 800dece:	1ba4      	subs	r4, r4, r6
 800ded0:	00a7      	lsls	r7, r4, #2
 800ded2:	7833      	ldrb	r3, [r6, #0]
 800ded4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ded8:	2b50      	cmp	r3, #80	@ 0x50
 800deda:	d13e      	bne.n	800df5a <__gethex+0x126>
 800dedc:	7873      	ldrb	r3, [r6, #1]
 800dede:	2b2b      	cmp	r3, #43	@ 0x2b
 800dee0:	d033      	beq.n	800df4a <__gethex+0x116>
 800dee2:	2b2d      	cmp	r3, #45	@ 0x2d
 800dee4:	d034      	beq.n	800df50 <__gethex+0x11c>
 800dee6:	1c71      	adds	r1, r6, #1
 800dee8:	2400      	movs	r4, #0
 800deea:	7808      	ldrb	r0, [r1, #0]
 800deec:	f7ff ff8c 	bl	800de08 <__hexdig_fun>
 800def0:	1e43      	subs	r3, r0, #1
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b18      	cmp	r3, #24
 800def6:	d830      	bhi.n	800df5a <__gethex+0x126>
 800def8:	f1a0 0210 	sub.w	r2, r0, #16
 800defc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df00:	f7ff ff82 	bl	800de08 <__hexdig_fun>
 800df04:	f100 3cff 	add.w	ip, r0, #4294967295
 800df08:	fa5f fc8c 	uxtb.w	ip, ip
 800df0c:	f1bc 0f18 	cmp.w	ip, #24
 800df10:	f04f 030a 	mov.w	r3, #10
 800df14:	d91e      	bls.n	800df54 <__gethex+0x120>
 800df16:	b104      	cbz	r4, 800df1a <__gethex+0xe6>
 800df18:	4252      	negs	r2, r2
 800df1a:	4417      	add	r7, r2
 800df1c:	f8ca 1000 	str.w	r1, [sl]
 800df20:	b1ed      	cbz	r5, 800df5e <__gethex+0x12a>
 800df22:	f1bb 0f00 	cmp.w	fp, #0
 800df26:	bf0c      	ite	eq
 800df28:	2506      	moveq	r5, #6
 800df2a:	2500      	movne	r5, #0
 800df2c:	4628      	mov	r0, r5
 800df2e:	b005      	add	sp, #20
 800df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df34:	2500      	movs	r5, #0
 800df36:	462c      	mov	r4, r5
 800df38:	e7b0      	b.n	800de9c <__gethex+0x68>
 800df3a:	2c00      	cmp	r4, #0
 800df3c:	d1c7      	bne.n	800dece <__gethex+0x9a>
 800df3e:	4627      	mov	r7, r4
 800df40:	e7c7      	b.n	800ded2 <__gethex+0x9e>
 800df42:	464e      	mov	r6, r9
 800df44:	462f      	mov	r7, r5
 800df46:	2501      	movs	r5, #1
 800df48:	e7c3      	b.n	800ded2 <__gethex+0x9e>
 800df4a:	2400      	movs	r4, #0
 800df4c:	1cb1      	adds	r1, r6, #2
 800df4e:	e7cc      	b.n	800deea <__gethex+0xb6>
 800df50:	2401      	movs	r4, #1
 800df52:	e7fb      	b.n	800df4c <__gethex+0x118>
 800df54:	fb03 0002 	mla	r0, r3, r2, r0
 800df58:	e7ce      	b.n	800def8 <__gethex+0xc4>
 800df5a:	4631      	mov	r1, r6
 800df5c:	e7de      	b.n	800df1c <__gethex+0xe8>
 800df5e:	eba6 0309 	sub.w	r3, r6, r9
 800df62:	3b01      	subs	r3, #1
 800df64:	4629      	mov	r1, r5
 800df66:	2b07      	cmp	r3, #7
 800df68:	dc0a      	bgt.n	800df80 <__gethex+0x14c>
 800df6a:	9801      	ldr	r0, [sp, #4]
 800df6c:	f000 faf4 	bl	800e558 <_Balloc>
 800df70:	4604      	mov	r4, r0
 800df72:	b940      	cbnz	r0, 800df86 <__gethex+0x152>
 800df74:	4b5c      	ldr	r3, [pc, #368]	@ (800e0e8 <__gethex+0x2b4>)
 800df76:	4602      	mov	r2, r0
 800df78:	21e4      	movs	r1, #228	@ 0xe4
 800df7a:	485c      	ldr	r0, [pc, #368]	@ (800e0ec <__gethex+0x2b8>)
 800df7c:	f001 fb66 	bl	800f64c <__assert_func>
 800df80:	3101      	adds	r1, #1
 800df82:	105b      	asrs	r3, r3, #1
 800df84:	e7ef      	b.n	800df66 <__gethex+0x132>
 800df86:	f100 0a14 	add.w	sl, r0, #20
 800df8a:	2300      	movs	r3, #0
 800df8c:	4655      	mov	r5, sl
 800df8e:	469b      	mov	fp, r3
 800df90:	45b1      	cmp	r9, r6
 800df92:	d337      	bcc.n	800e004 <__gethex+0x1d0>
 800df94:	f845 bb04 	str.w	fp, [r5], #4
 800df98:	eba5 050a 	sub.w	r5, r5, sl
 800df9c:	10ad      	asrs	r5, r5, #2
 800df9e:	6125      	str	r5, [r4, #16]
 800dfa0:	4658      	mov	r0, fp
 800dfa2:	f000 fbcb 	bl	800e73c <__hi0bits>
 800dfa6:	016d      	lsls	r5, r5, #5
 800dfa8:	f8d8 6000 	ldr.w	r6, [r8]
 800dfac:	1a2d      	subs	r5, r5, r0
 800dfae:	42b5      	cmp	r5, r6
 800dfb0:	dd54      	ble.n	800e05c <__gethex+0x228>
 800dfb2:	1bad      	subs	r5, r5, r6
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 ff5f 	bl	800ee7a <__any_on>
 800dfbc:	4681      	mov	r9, r0
 800dfbe:	b178      	cbz	r0, 800dfe0 <__gethex+0x1ac>
 800dfc0:	1e6b      	subs	r3, r5, #1
 800dfc2:	1159      	asrs	r1, r3, #5
 800dfc4:	f003 021f 	and.w	r2, r3, #31
 800dfc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dfcc:	f04f 0901 	mov.w	r9, #1
 800dfd0:	fa09 f202 	lsl.w	r2, r9, r2
 800dfd4:	420a      	tst	r2, r1
 800dfd6:	d003      	beq.n	800dfe0 <__gethex+0x1ac>
 800dfd8:	454b      	cmp	r3, r9
 800dfda:	dc36      	bgt.n	800e04a <__gethex+0x216>
 800dfdc:	f04f 0902 	mov.w	r9, #2
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f7ff febe 	bl	800dd64 <rshift>
 800dfe8:	442f      	add	r7, r5
 800dfea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfee:	42bb      	cmp	r3, r7
 800dff0:	da42      	bge.n	800e078 <__gethex+0x244>
 800dff2:	9801      	ldr	r0, [sp, #4]
 800dff4:	4621      	mov	r1, r4
 800dff6:	f000 faef 	bl	800e5d8 <_Bfree>
 800dffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dffc:	2300      	movs	r3, #0
 800dffe:	6013      	str	r3, [r2, #0]
 800e000:	25a3      	movs	r5, #163	@ 0xa3
 800e002:	e793      	b.n	800df2c <__gethex+0xf8>
 800e004:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e008:	2a2e      	cmp	r2, #46	@ 0x2e
 800e00a:	d012      	beq.n	800e032 <__gethex+0x1fe>
 800e00c:	2b20      	cmp	r3, #32
 800e00e:	d104      	bne.n	800e01a <__gethex+0x1e6>
 800e010:	f845 bb04 	str.w	fp, [r5], #4
 800e014:	f04f 0b00 	mov.w	fp, #0
 800e018:	465b      	mov	r3, fp
 800e01a:	7830      	ldrb	r0, [r6, #0]
 800e01c:	9303      	str	r3, [sp, #12]
 800e01e:	f7ff fef3 	bl	800de08 <__hexdig_fun>
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	f000 000f 	and.w	r0, r0, #15
 800e028:	4098      	lsls	r0, r3
 800e02a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e02e:	3304      	adds	r3, #4
 800e030:	e7ae      	b.n	800df90 <__gethex+0x15c>
 800e032:	45b1      	cmp	r9, r6
 800e034:	d8ea      	bhi.n	800e00c <__gethex+0x1d8>
 800e036:	492b      	ldr	r1, [pc, #172]	@ (800e0e4 <__gethex+0x2b0>)
 800e038:	9303      	str	r3, [sp, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7ff fd94 	bl	800db6a <strncmp>
 800e042:	9b03      	ldr	r3, [sp, #12]
 800e044:	2800      	cmp	r0, #0
 800e046:	d1e1      	bne.n	800e00c <__gethex+0x1d8>
 800e048:	e7a2      	b.n	800df90 <__gethex+0x15c>
 800e04a:	1ea9      	subs	r1, r5, #2
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 ff14 	bl	800ee7a <__any_on>
 800e052:	2800      	cmp	r0, #0
 800e054:	d0c2      	beq.n	800dfdc <__gethex+0x1a8>
 800e056:	f04f 0903 	mov.w	r9, #3
 800e05a:	e7c1      	b.n	800dfe0 <__gethex+0x1ac>
 800e05c:	da09      	bge.n	800e072 <__gethex+0x23e>
 800e05e:	1b75      	subs	r5, r6, r5
 800e060:	4621      	mov	r1, r4
 800e062:	9801      	ldr	r0, [sp, #4]
 800e064:	462a      	mov	r2, r5
 800e066:	f000 fccf 	bl	800ea08 <__lshift>
 800e06a:	1b7f      	subs	r7, r7, r5
 800e06c:	4604      	mov	r4, r0
 800e06e:	f100 0a14 	add.w	sl, r0, #20
 800e072:	f04f 0900 	mov.w	r9, #0
 800e076:	e7b8      	b.n	800dfea <__gethex+0x1b6>
 800e078:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e07c:	42bd      	cmp	r5, r7
 800e07e:	dd6f      	ble.n	800e160 <__gethex+0x32c>
 800e080:	1bed      	subs	r5, r5, r7
 800e082:	42ae      	cmp	r6, r5
 800e084:	dc34      	bgt.n	800e0f0 <__gethex+0x2bc>
 800e086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d022      	beq.n	800e0d4 <__gethex+0x2a0>
 800e08e:	2b03      	cmp	r3, #3
 800e090:	d024      	beq.n	800e0dc <__gethex+0x2a8>
 800e092:	2b01      	cmp	r3, #1
 800e094:	d115      	bne.n	800e0c2 <__gethex+0x28e>
 800e096:	42ae      	cmp	r6, r5
 800e098:	d113      	bne.n	800e0c2 <__gethex+0x28e>
 800e09a:	2e01      	cmp	r6, #1
 800e09c:	d10b      	bne.n	800e0b6 <__gethex+0x282>
 800e09e:	9a02      	ldr	r2, [sp, #8]
 800e0a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0a4:	6013      	str	r3, [r2, #0]
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	6123      	str	r3, [r4, #16]
 800e0aa:	f8ca 3000 	str.w	r3, [sl]
 800e0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b0:	2562      	movs	r5, #98	@ 0x62
 800e0b2:	601c      	str	r4, [r3, #0]
 800e0b4:	e73a      	b.n	800df2c <__gethex+0xf8>
 800e0b6:	1e71      	subs	r1, r6, #1
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f000 fede 	bl	800ee7a <__any_on>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d1ed      	bne.n	800e09e <__gethex+0x26a>
 800e0c2:	9801      	ldr	r0, [sp, #4]
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	f000 fa87 	bl	800e5d8 <_Bfree>
 800e0ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6013      	str	r3, [r2, #0]
 800e0d0:	2550      	movs	r5, #80	@ 0x50
 800e0d2:	e72b      	b.n	800df2c <__gethex+0xf8>
 800e0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1f3      	bne.n	800e0c2 <__gethex+0x28e>
 800e0da:	e7e0      	b.n	800e09e <__gethex+0x26a>
 800e0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1dd      	bne.n	800e09e <__gethex+0x26a>
 800e0e2:	e7ee      	b.n	800e0c2 <__gethex+0x28e>
 800e0e4:	08010694 	.word	0x08010694
 800e0e8:	08010801 	.word	0x08010801
 800e0ec:	08010812 	.word	0x08010812
 800e0f0:	1e6f      	subs	r7, r5, #1
 800e0f2:	f1b9 0f00 	cmp.w	r9, #0
 800e0f6:	d130      	bne.n	800e15a <__gethex+0x326>
 800e0f8:	b127      	cbz	r7, 800e104 <__gethex+0x2d0>
 800e0fa:	4639      	mov	r1, r7
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 febc 	bl	800ee7a <__any_on>
 800e102:	4681      	mov	r9, r0
 800e104:	117a      	asrs	r2, r7, #5
 800e106:	2301      	movs	r3, #1
 800e108:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e10c:	f007 071f 	and.w	r7, r7, #31
 800e110:	40bb      	lsls	r3, r7
 800e112:	4213      	tst	r3, r2
 800e114:	4629      	mov	r1, r5
 800e116:	4620      	mov	r0, r4
 800e118:	bf18      	it	ne
 800e11a:	f049 0902 	orrne.w	r9, r9, #2
 800e11e:	f7ff fe21 	bl	800dd64 <rshift>
 800e122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e126:	1b76      	subs	r6, r6, r5
 800e128:	2502      	movs	r5, #2
 800e12a:	f1b9 0f00 	cmp.w	r9, #0
 800e12e:	d047      	beq.n	800e1c0 <__gethex+0x38c>
 800e130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d015      	beq.n	800e164 <__gethex+0x330>
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d017      	beq.n	800e16c <__gethex+0x338>
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d109      	bne.n	800e154 <__gethex+0x320>
 800e140:	f019 0f02 	tst.w	r9, #2
 800e144:	d006      	beq.n	800e154 <__gethex+0x320>
 800e146:	f8da 3000 	ldr.w	r3, [sl]
 800e14a:	ea49 0903 	orr.w	r9, r9, r3
 800e14e:	f019 0f01 	tst.w	r9, #1
 800e152:	d10e      	bne.n	800e172 <__gethex+0x33e>
 800e154:	f045 0510 	orr.w	r5, r5, #16
 800e158:	e032      	b.n	800e1c0 <__gethex+0x38c>
 800e15a:	f04f 0901 	mov.w	r9, #1
 800e15e:	e7d1      	b.n	800e104 <__gethex+0x2d0>
 800e160:	2501      	movs	r5, #1
 800e162:	e7e2      	b.n	800e12a <__gethex+0x2f6>
 800e164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e166:	f1c3 0301 	rsb	r3, r3, #1
 800e16a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0f0      	beq.n	800e154 <__gethex+0x320>
 800e172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e176:	f104 0314 	add.w	r3, r4, #20
 800e17a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e17e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e182:	f04f 0c00 	mov.w	ip, #0
 800e186:	4618      	mov	r0, r3
 800e188:	f853 2b04 	ldr.w	r2, [r3], #4
 800e18c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e190:	d01b      	beq.n	800e1ca <__gethex+0x396>
 800e192:	3201      	adds	r2, #1
 800e194:	6002      	str	r2, [r0, #0]
 800e196:	2d02      	cmp	r5, #2
 800e198:	f104 0314 	add.w	r3, r4, #20
 800e19c:	d13c      	bne.n	800e218 <__gethex+0x3e4>
 800e19e:	f8d8 2000 	ldr.w	r2, [r8]
 800e1a2:	3a01      	subs	r2, #1
 800e1a4:	42b2      	cmp	r2, r6
 800e1a6:	d109      	bne.n	800e1bc <__gethex+0x388>
 800e1a8:	1171      	asrs	r1, r6, #5
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1b0:	f006 061f 	and.w	r6, r6, #31
 800e1b4:	fa02 f606 	lsl.w	r6, r2, r6
 800e1b8:	421e      	tst	r6, r3
 800e1ba:	d13a      	bne.n	800e232 <__gethex+0x3fe>
 800e1bc:	f045 0520 	orr.w	r5, r5, #32
 800e1c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1c2:	601c      	str	r4, [r3, #0]
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	601f      	str	r7, [r3, #0]
 800e1c8:	e6b0      	b.n	800df2c <__gethex+0xf8>
 800e1ca:	4299      	cmp	r1, r3
 800e1cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1d0:	d8d9      	bhi.n	800e186 <__gethex+0x352>
 800e1d2:	68a3      	ldr	r3, [r4, #8]
 800e1d4:	459b      	cmp	fp, r3
 800e1d6:	db17      	blt.n	800e208 <__gethex+0x3d4>
 800e1d8:	6861      	ldr	r1, [r4, #4]
 800e1da:	9801      	ldr	r0, [sp, #4]
 800e1dc:	3101      	adds	r1, #1
 800e1de:	f000 f9bb 	bl	800e558 <_Balloc>
 800e1e2:	4681      	mov	r9, r0
 800e1e4:	b918      	cbnz	r0, 800e1ee <__gethex+0x3ba>
 800e1e6:	4b1a      	ldr	r3, [pc, #104]	@ (800e250 <__gethex+0x41c>)
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	2184      	movs	r1, #132	@ 0x84
 800e1ec:	e6c5      	b.n	800df7a <__gethex+0x146>
 800e1ee:	6922      	ldr	r2, [r4, #16]
 800e1f0:	3202      	adds	r2, #2
 800e1f2:	f104 010c 	add.w	r1, r4, #12
 800e1f6:	0092      	lsls	r2, r2, #2
 800e1f8:	300c      	adds	r0, #12
 800e1fa:	f7ff fd52 	bl	800dca2 <memcpy>
 800e1fe:	4621      	mov	r1, r4
 800e200:	9801      	ldr	r0, [sp, #4]
 800e202:	f000 f9e9 	bl	800e5d8 <_Bfree>
 800e206:	464c      	mov	r4, r9
 800e208:	6923      	ldr	r3, [r4, #16]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e210:	6122      	str	r2, [r4, #16]
 800e212:	2201      	movs	r2, #1
 800e214:	615a      	str	r2, [r3, #20]
 800e216:	e7be      	b.n	800e196 <__gethex+0x362>
 800e218:	6922      	ldr	r2, [r4, #16]
 800e21a:	455a      	cmp	r2, fp
 800e21c:	dd0b      	ble.n	800e236 <__gethex+0x402>
 800e21e:	2101      	movs	r1, #1
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff fd9f 	bl	800dd64 <rshift>
 800e226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e22a:	3701      	adds	r7, #1
 800e22c:	42bb      	cmp	r3, r7
 800e22e:	f6ff aee0 	blt.w	800dff2 <__gethex+0x1be>
 800e232:	2501      	movs	r5, #1
 800e234:	e7c2      	b.n	800e1bc <__gethex+0x388>
 800e236:	f016 061f 	ands.w	r6, r6, #31
 800e23a:	d0fa      	beq.n	800e232 <__gethex+0x3fe>
 800e23c:	4453      	add	r3, sl
 800e23e:	f1c6 0620 	rsb	r6, r6, #32
 800e242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e246:	f000 fa79 	bl	800e73c <__hi0bits>
 800e24a:	42b0      	cmp	r0, r6
 800e24c:	dbe7      	blt.n	800e21e <__gethex+0x3ea>
 800e24e:	e7f0      	b.n	800e232 <__gethex+0x3fe>
 800e250:	08010801 	.word	0x08010801

0800e254 <L_shift>:
 800e254:	f1c2 0208 	rsb	r2, r2, #8
 800e258:	0092      	lsls	r2, r2, #2
 800e25a:	b570      	push	{r4, r5, r6, lr}
 800e25c:	f1c2 0620 	rsb	r6, r2, #32
 800e260:	6843      	ldr	r3, [r0, #4]
 800e262:	6804      	ldr	r4, [r0, #0]
 800e264:	fa03 f506 	lsl.w	r5, r3, r6
 800e268:	432c      	orrs	r4, r5
 800e26a:	40d3      	lsrs	r3, r2
 800e26c:	6004      	str	r4, [r0, #0]
 800e26e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e272:	4288      	cmp	r0, r1
 800e274:	d3f4      	bcc.n	800e260 <L_shift+0xc>
 800e276:	bd70      	pop	{r4, r5, r6, pc}

0800e278 <__match>:
 800e278:	b530      	push	{r4, r5, lr}
 800e27a:	6803      	ldr	r3, [r0, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e282:	b914      	cbnz	r4, 800e28a <__match+0x12>
 800e284:	6003      	str	r3, [r0, #0]
 800e286:	2001      	movs	r0, #1
 800e288:	bd30      	pop	{r4, r5, pc}
 800e28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e28e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e292:	2d19      	cmp	r5, #25
 800e294:	bf98      	it	ls
 800e296:	3220      	addls	r2, #32
 800e298:	42a2      	cmp	r2, r4
 800e29a:	d0f0      	beq.n	800e27e <__match+0x6>
 800e29c:	2000      	movs	r0, #0
 800e29e:	e7f3      	b.n	800e288 <__match+0x10>

0800e2a0 <__hexnan>:
 800e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	680b      	ldr	r3, [r1, #0]
 800e2a6:	6801      	ldr	r1, [r0, #0]
 800e2a8:	115e      	asrs	r6, r3, #5
 800e2aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2ae:	f013 031f 	ands.w	r3, r3, #31
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	bf18      	it	ne
 800e2b6:	3604      	addne	r6, #4
 800e2b8:	2500      	movs	r5, #0
 800e2ba:	1f37      	subs	r7, r6, #4
 800e2bc:	4682      	mov	sl, r0
 800e2be:	4690      	mov	r8, r2
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2c6:	46b9      	mov	r9, r7
 800e2c8:	463c      	mov	r4, r7
 800e2ca:	9502      	str	r5, [sp, #8]
 800e2cc:	46ab      	mov	fp, r5
 800e2ce:	784a      	ldrb	r2, [r1, #1]
 800e2d0:	1c4b      	adds	r3, r1, #1
 800e2d2:	9303      	str	r3, [sp, #12]
 800e2d4:	b342      	cbz	r2, 800e328 <__hexnan+0x88>
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	9204      	str	r2, [sp, #16]
 800e2dc:	f7ff fd94 	bl	800de08 <__hexdig_fun>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d151      	bne.n	800e388 <__hexnan+0xe8>
 800e2e4:	9a04      	ldr	r2, [sp, #16]
 800e2e6:	9905      	ldr	r1, [sp, #20]
 800e2e8:	2a20      	cmp	r2, #32
 800e2ea:	d818      	bhi.n	800e31e <__hexnan+0x7e>
 800e2ec:	9b02      	ldr	r3, [sp, #8]
 800e2ee:	459b      	cmp	fp, r3
 800e2f0:	dd13      	ble.n	800e31a <__hexnan+0x7a>
 800e2f2:	454c      	cmp	r4, r9
 800e2f4:	d206      	bcs.n	800e304 <__hexnan+0x64>
 800e2f6:	2d07      	cmp	r5, #7
 800e2f8:	dc04      	bgt.n	800e304 <__hexnan+0x64>
 800e2fa:	462a      	mov	r2, r5
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	4620      	mov	r0, r4
 800e300:	f7ff ffa8 	bl	800e254 <L_shift>
 800e304:	4544      	cmp	r4, r8
 800e306:	d952      	bls.n	800e3ae <__hexnan+0x10e>
 800e308:	2300      	movs	r3, #0
 800e30a:	f1a4 0904 	sub.w	r9, r4, #4
 800e30e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e312:	f8cd b008 	str.w	fp, [sp, #8]
 800e316:	464c      	mov	r4, r9
 800e318:	461d      	mov	r5, r3
 800e31a:	9903      	ldr	r1, [sp, #12]
 800e31c:	e7d7      	b.n	800e2ce <__hexnan+0x2e>
 800e31e:	2a29      	cmp	r2, #41	@ 0x29
 800e320:	d157      	bne.n	800e3d2 <__hexnan+0x132>
 800e322:	3102      	adds	r1, #2
 800e324:	f8ca 1000 	str.w	r1, [sl]
 800e328:	f1bb 0f00 	cmp.w	fp, #0
 800e32c:	d051      	beq.n	800e3d2 <__hexnan+0x132>
 800e32e:	454c      	cmp	r4, r9
 800e330:	d206      	bcs.n	800e340 <__hexnan+0xa0>
 800e332:	2d07      	cmp	r5, #7
 800e334:	dc04      	bgt.n	800e340 <__hexnan+0xa0>
 800e336:	462a      	mov	r2, r5
 800e338:	4649      	mov	r1, r9
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff ff8a 	bl	800e254 <L_shift>
 800e340:	4544      	cmp	r4, r8
 800e342:	d936      	bls.n	800e3b2 <__hexnan+0x112>
 800e344:	f1a8 0204 	sub.w	r2, r8, #4
 800e348:	4623      	mov	r3, r4
 800e34a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e34e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e352:	429f      	cmp	r7, r3
 800e354:	d2f9      	bcs.n	800e34a <__hexnan+0xaa>
 800e356:	1b3b      	subs	r3, r7, r4
 800e358:	f023 0303 	bic.w	r3, r3, #3
 800e35c:	3304      	adds	r3, #4
 800e35e:	3401      	adds	r4, #1
 800e360:	3e03      	subs	r6, #3
 800e362:	42b4      	cmp	r4, r6
 800e364:	bf88      	it	hi
 800e366:	2304      	movhi	r3, #4
 800e368:	4443      	add	r3, r8
 800e36a:	2200      	movs	r2, #0
 800e36c:	f843 2b04 	str.w	r2, [r3], #4
 800e370:	429f      	cmp	r7, r3
 800e372:	d2fb      	bcs.n	800e36c <__hexnan+0xcc>
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	b91b      	cbnz	r3, 800e380 <__hexnan+0xe0>
 800e378:	4547      	cmp	r7, r8
 800e37a:	d128      	bne.n	800e3ce <__hexnan+0x12e>
 800e37c:	2301      	movs	r3, #1
 800e37e:	603b      	str	r3, [r7, #0]
 800e380:	2005      	movs	r0, #5
 800e382:	b007      	add	sp, #28
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	3501      	adds	r5, #1
 800e38a:	2d08      	cmp	r5, #8
 800e38c:	f10b 0b01 	add.w	fp, fp, #1
 800e390:	dd06      	ble.n	800e3a0 <__hexnan+0x100>
 800e392:	4544      	cmp	r4, r8
 800e394:	d9c1      	bls.n	800e31a <__hexnan+0x7a>
 800e396:	2300      	movs	r3, #0
 800e398:	f844 3c04 	str.w	r3, [r4, #-4]
 800e39c:	2501      	movs	r5, #1
 800e39e:	3c04      	subs	r4, #4
 800e3a0:	6822      	ldr	r2, [r4, #0]
 800e3a2:	f000 000f 	and.w	r0, r0, #15
 800e3a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3aa:	6020      	str	r0, [r4, #0]
 800e3ac:	e7b5      	b.n	800e31a <__hexnan+0x7a>
 800e3ae:	2508      	movs	r5, #8
 800e3b0:	e7b3      	b.n	800e31a <__hexnan+0x7a>
 800e3b2:	9b01      	ldr	r3, [sp, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d0dd      	beq.n	800e374 <__hexnan+0xd4>
 800e3b8:	f1c3 0320 	rsb	r3, r3, #32
 800e3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c0:	40da      	lsrs	r2, r3
 800e3c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3cc:	e7d2      	b.n	800e374 <__hexnan+0xd4>
 800e3ce:	3f04      	subs	r7, #4
 800e3d0:	e7d0      	b.n	800e374 <__hexnan+0xd4>
 800e3d2:	2004      	movs	r0, #4
 800e3d4:	e7d5      	b.n	800e382 <__hexnan+0xe2>
	...

0800e3d8 <sbrk_aligned>:
 800e3d8:	b570      	push	{r4, r5, r6, lr}
 800e3da:	4e0f      	ldr	r6, [pc, #60]	@ (800e418 <sbrk_aligned+0x40>)
 800e3dc:	460c      	mov	r4, r1
 800e3de:	6831      	ldr	r1, [r6, #0]
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	b911      	cbnz	r1, 800e3ea <sbrk_aligned+0x12>
 800e3e4:	f001 f922 	bl	800f62c <_sbrk_r>
 800e3e8:	6030      	str	r0, [r6, #0]
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f001 f91d 	bl	800f62c <_sbrk_r>
 800e3f2:	1c43      	adds	r3, r0, #1
 800e3f4:	d103      	bne.n	800e3fe <sbrk_aligned+0x26>
 800e3f6:	f04f 34ff 	mov.w	r4, #4294967295
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	1cc4      	adds	r4, r0, #3
 800e400:	f024 0403 	bic.w	r4, r4, #3
 800e404:	42a0      	cmp	r0, r4
 800e406:	d0f8      	beq.n	800e3fa <sbrk_aligned+0x22>
 800e408:	1a21      	subs	r1, r4, r0
 800e40a:	4628      	mov	r0, r5
 800e40c:	f001 f90e 	bl	800f62c <_sbrk_r>
 800e410:	3001      	adds	r0, #1
 800e412:	d1f2      	bne.n	800e3fa <sbrk_aligned+0x22>
 800e414:	e7ef      	b.n	800e3f6 <sbrk_aligned+0x1e>
 800e416:	bf00      	nop
 800e418:	200020d8 	.word	0x200020d8

0800e41c <_malloc_r>:
 800e41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e420:	1ccd      	adds	r5, r1, #3
 800e422:	f025 0503 	bic.w	r5, r5, #3
 800e426:	3508      	adds	r5, #8
 800e428:	2d0c      	cmp	r5, #12
 800e42a:	bf38      	it	cc
 800e42c:	250c      	movcc	r5, #12
 800e42e:	2d00      	cmp	r5, #0
 800e430:	4606      	mov	r6, r0
 800e432:	db01      	blt.n	800e438 <_malloc_r+0x1c>
 800e434:	42a9      	cmp	r1, r5
 800e436:	d904      	bls.n	800e442 <_malloc_r+0x26>
 800e438:	230c      	movs	r3, #12
 800e43a:	6033      	str	r3, [r6, #0]
 800e43c:	2000      	movs	r0, #0
 800e43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e518 <_malloc_r+0xfc>
 800e446:	f000 f87b 	bl	800e540 <__malloc_lock>
 800e44a:	f8d8 3000 	ldr.w	r3, [r8]
 800e44e:	461c      	mov	r4, r3
 800e450:	bb44      	cbnz	r4, 800e4a4 <_malloc_r+0x88>
 800e452:	4629      	mov	r1, r5
 800e454:	4630      	mov	r0, r6
 800e456:	f7ff ffbf 	bl	800e3d8 <sbrk_aligned>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	4604      	mov	r4, r0
 800e45e:	d158      	bne.n	800e512 <_malloc_r+0xf6>
 800e460:	f8d8 4000 	ldr.w	r4, [r8]
 800e464:	4627      	mov	r7, r4
 800e466:	2f00      	cmp	r7, #0
 800e468:	d143      	bne.n	800e4f2 <_malloc_r+0xd6>
 800e46a:	2c00      	cmp	r4, #0
 800e46c:	d04b      	beq.n	800e506 <_malloc_r+0xea>
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	4639      	mov	r1, r7
 800e472:	4630      	mov	r0, r6
 800e474:	eb04 0903 	add.w	r9, r4, r3
 800e478:	f001 f8d8 	bl	800f62c <_sbrk_r>
 800e47c:	4581      	cmp	r9, r0
 800e47e:	d142      	bne.n	800e506 <_malloc_r+0xea>
 800e480:	6821      	ldr	r1, [r4, #0]
 800e482:	1a6d      	subs	r5, r5, r1
 800e484:	4629      	mov	r1, r5
 800e486:	4630      	mov	r0, r6
 800e488:	f7ff ffa6 	bl	800e3d8 <sbrk_aligned>
 800e48c:	3001      	adds	r0, #1
 800e48e:	d03a      	beq.n	800e506 <_malloc_r+0xea>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	442b      	add	r3, r5
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	f8d8 3000 	ldr.w	r3, [r8]
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	bb62      	cbnz	r2, 800e4f8 <_malloc_r+0xdc>
 800e49e:	f8c8 7000 	str.w	r7, [r8]
 800e4a2:	e00f      	b.n	800e4c4 <_malloc_r+0xa8>
 800e4a4:	6822      	ldr	r2, [r4, #0]
 800e4a6:	1b52      	subs	r2, r2, r5
 800e4a8:	d420      	bmi.n	800e4ec <_malloc_r+0xd0>
 800e4aa:	2a0b      	cmp	r2, #11
 800e4ac:	d917      	bls.n	800e4de <_malloc_r+0xc2>
 800e4ae:	1961      	adds	r1, r4, r5
 800e4b0:	42a3      	cmp	r3, r4
 800e4b2:	6025      	str	r5, [r4, #0]
 800e4b4:	bf18      	it	ne
 800e4b6:	6059      	strne	r1, [r3, #4]
 800e4b8:	6863      	ldr	r3, [r4, #4]
 800e4ba:	bf08      	it	eq
 800e4bc:	f8c8 1000 	streq.w	r1, [r8]
 800e4c0:	5162      	str	r2, [r4, r5]
 800e4c2:	604b      	str	r3, [r1, #4]
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f000 f841 	bl	800e54c <__malloc_unlock>
 800e4ca:	f104 000b 	add.w	r0, r4, #11
 800e4ce:	1d23      	adds	r3, r4, #4
 800e4d0:	f020 0007 	bic.w	r0, r0, #7
 800e4d4:	1ac2      	subs	r2, r0, r3
 800e4d6:	bf1c      	itt	ne
 800e4d8:	1a1b      	subne	r3, r3, r0
 800e4da:	50a3      	strne	r3, [r4, r2]
 800e4dc:	e7af      	b.n	800e43e <_malloc_r+0x22>
 800e4de:	6862      	ldr	r2, [r4, #4]
 800e4e0:	42a3      	cmp	r3, r4
 800e4e2:	bf0c      	ite	eq
 800e4e4:	f8c8 2000 	streq.w	r2, [r8]
 800e4e8:	605a      	strne	r2, [r3, #4]
 800e4ea:	e7eb      	b.n	800e4c4 <_malloc_r+0xa8>
 800e4ec:	4623      	mov	r3, r4
 800e4ee:	6864      	ldr	r4, [r4, #4]
 800e4f0:	e7ae      	b.n	800e450 <_malloc_r+0x34>
 800e4f2:	463c      	mov	r4, r7
 800e4f4:	687f      	ldr	r7, [r7, #4]
 800e4f6:	e7b6      	b.n	800e466 <_malloc_r+0x4a>
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	42a3      	cmp	r3, r4
 800e4fe:	d1fb      	bne.n	800e4f8 <_malloc_r+0xdc>
 800e500:	2300      	movs	r3, #0
 800e502:	6053      	str	r3, [r2, #4]
 800e504:	e7de      	b.n	800e4c4 <_malloc_r+0xa8>
 800e506:	230c      	movs	r3, #12
 800e508:	6033      	str	r3, [r6, #0]
 800e50a:	4630      	mov	r0, r6
 800e50c:	f000 f81e 	bl	800e54c <__malloc_unlock>
 800e510:	e794      	b.n	800e43c <_malloc_r+0x20>
 800e512:	6005      	str	r5, [r0, #0]
 800e514:	e7d6      	b.n	800e4c4 <_malloc_r+0xa8>
 800e516:	bf00      	nop
 800e518:	200020dc 	.word	0x200020dc

0800e51c <__ascii_mbtowc>:
 800e51c:	b082      	sub	sp, #8
 800e51e:	b901      	cbnz	r1, 800e522 <__ascii_mbtowc+0x6>
 800e520:	a901      	add	r1, sp, #4
 800e522:	b142      	cbz	r2, 800e536 <__ascii_mbtowc+0x1a>
 800e524:	b14b      	cbz	r3, 800e53a <__ascii_mbtowc+0x1e>
 800e526:	7813      	ldrb	r3, [r2, #0]
 800e528:	600b      	str	r3, [r1, #0]
 800e52a:	7812      	ldrb	r2, [r2, #0]
 800e52c:	1e10      	subs	r0, r2, #0
 800e52e:	bf18      	it	ne
 800e530:	2001      	movne	r0, #1
 800e532:	b002      	add	sp, #8
 800e534:	4770      	bx	lr
 800e536:	4610      	mov	r0, r2
 800e538:	e7fb      	b.n	800e532 <__ascii_mbtowc+0x16>
 800e53a:	f06f 0001 	mvn.w	r0, #1
 800e53e:	e7f8      	b.n	800e532 <__ascii_mbtowc+0x16>

0800e540 <__malloc_lock>:
 800e540:	4801      	ldr	r0, [pc, #4]	@ (800e548 <__malloc_lock+0x8>)
 800e542:	f7ff bbac 	b.w	800dc9e <__retarget_lock_acquire_recursive>
 800e546:	bf00      	nop
 800e548:	200020d4 	.word	0x200020d4

0800e54c <__malloc_unlock>:
 800e54c:	4801      	ldr	r0, [pc, #4]	@ (800e554 <__malloc_unlock+0x8>)
 800e54e:	f7ff bba7 	b.w	800dca0 <__retarget_lock_release_recursive>
 800e552:	bf00      	nop
 800e554:	200020d4 	.word	0x200020d4

0800e558 <_Balloc>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	69c6      	ldr	r6, [r0, #28]
 800e55c:	4604      	mov	r4, r0
 800e55e:	460d      	mov	r5, r1
 800e560:	b976      	cbnz	r6, 800e580 <_Balloc+0x28>
 800e562:	2010      	movs	r0, #16
 800e564:	f001 f8a4 	bl	800f6b0 <malloc>
 800e568:	4602      	mov	r2, r0
 800e56a:	61e0      	str	r0, [r4, #28]
 800e56c:	b920      	cbnz	r0, 800e578 <_Balloc+0x20>
 800e56e:	4b18      	ldr	r3, [pc, #96]	@ (800e5d0 <_Balloc+0x78>)
 800e570:	4818      	ldr	r0, [pc, #96]	@ (800e5d4 <_Balloc+0x7c>)
 800e572:	216b      	movs	r1, #107	@ 0x6b
 800e574:	f001 f86a 	bl	800f64c <__assert_func>
 800e578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e57c:	6006      	str	r6, [r0, #0]
 800e57e:	60c6      	str	r6, [r0, #12]
 800e580:	69e6      	ldr	r6, [r4, #28]
 800e582:	68f3      	ldr	r3, [r6, #12]
 800e584:	b183      	cbz	r3, 800e5a8 <_Balloc+0x50>
 800e586:	69e3      	ldr	r3, [r4, #28]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e58e:	b9b8      	cbnz	r0, 800e5c0 <_Balloc+0x68>
 800e590:	2101      	movs	r1, #1
 800e592:	fa01 f605 	lsl.w	r6, r1, r5
 800e596:	1d72      	adds	r2, r6, #5
 800e598:	0092      	lsls	r2, r2, #2
 800e59a:	4620      	mov	r0, r4
 800e59c:	f001 f874 	bl	800f688 <_calloc_r>
 800e5a0:	b160      	cbz	r0, 800e5bc <_Balloc+0x64>
 800e5a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5a6:	e00e      	b.n	800e5c6 <_Balloc+0x6e>
 800e5a8:	2221      	movs	r2, #33	@ 0x21
 800e5aa:	2104      	movs	r1, #4
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f001 f86b 	bl	800f688 <_calloc_r>
 800e5b2:	69e3      	ldr	r3, [r4, #28]
 800e5b4:	60f0      	str	r0, [r6, #12]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e4      	bne.n	800e586 <_Balloc+0x2e>
 800e5bc:	2000      	movs	r0, #0
 800e5be:	bd70      	pop	{r4, r5, r6, pc}
 800e5c0:	6802      	ldr	r2, [r0, #0]
 800e5c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5cc:	e7f7      	b.n	800e5be <_Balloc+0x66>
 800e5ce:	bf00      	nop
 800e5d0:	08010872 	.word	0x08010872
 800e5d4:	08010889 	.word	0x08010889

0800e5d8 <_Bfree>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	69c6      	ldr	r6, [r0, #28]
 800e5dc:	4605      	mov	r5, r0
 800e5de:	460c      	mov	r4, r1
 800e5e0:	b976      	cbnz	r6, 800e600 <_Bfree+0x28>
 800e5e2:	2010      	movs	r0, #16
 800e5e4:	f001 f864 	bl	800f6b0 <malloc>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	61e8      	str	r0, [r5, #28]
 800e5ec:	b920      	cbnz	r0, 800e5f8 <_Bfree+0x20>
 800e5ee:	4b09      	ldr	r3, [pc, #36]	@ (800e614 <_Bfree+0x3c>)
 800e5f0:	4809      	ldr	r0, [pc, #36]	@ (800e618 <_Bfree+0x40>)
 800e5f2:	218f      	movs	r1, #143	@ 0x8f
 800e5f4:	f001 f82a 	bl	800f64c <__assert_func>
 800e5f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5fc:	6006      	str	r6, [r0, #0]
 800e5fe:	60c6      	str	r6, [r0, #12]
 800e600:	b13c      	cbz	r4, 800e612 <_Bfree+0x3a>
 800e602:	69eb      	ldr	r3, [r5, #28]
 800e604:	6862      	ldr	r2, [r4, #4]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e60c:	6021      	str	r1, [r4, #0]
 800e60e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e612:	bd70      	pop	{r4, r5, r6, pc}
 800e614:	08010872 	.word	0x08010872
 800e618:	08010889 	.word	0x08010889

0800e61c <__multadd>:
 800e61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e620:	690d      	ldr	r5, [r1, #16]
 800e622:	4607      	mov	r7, r0
 800e624:	460c      	mov	r4, r1
 800e626:	461e      	mov	r6, r3
 800e628:	f101 0c14 	add.w	ip, r1, #20
 800e62c:	2000      	movs	r0, #0
 800e62e:	f8dc 3000 	ldr.w	r3, [ip]
 800e632:	b299      	uxth	r1, r3
 800e634:	fb02 6101 	mla	r1, r2, r1, r6
 800e638:	0c1e      	lsrs	r6, r3, #16
 800e63a:	0c0b      	lsrs	r3, r1, #16
 800e63c:	fb02 3306 	mla	r3, r2, r6, r3
 800e640:	b289      	uxth	r1, r1
 800e642:	3001      	adds	r0, #1
 800e644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e648:	4285      	cmp	r5, r0
 800e64a:	f84c 1b04 	str.w	r1, [ip], #4
 800e64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e652:	dcec      	bgt.n	800e62e <__multadd+0x12>
 800e654:	b30e      	cbz	r6, 800e69a <__multadd+0x7e>
 800e656:	68a3      	ldr	r3, [r4, #8]
 800e658:	42ab      	cmp	r3, r5
 800e65a:	dc19      	bgt.n	800e690 <__multadd+0x74>
 800e65c:	6861      	ldr	r1, [r4, #4]
 800e65e:	4638      	mov	r0, r7
 800e660:	3101      	adds	r1, #1
 800e662:	f7ff ff79 	bl	800e558 <_Balloc>
 800e666:	4680      	mov	r8, r0
 800e668:	b928      	cbnz	r0, 800e676 <__multadd+0x5a>
 800e66a:	4602      	mov	r2, r0
 800e66c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a0 <__multadd+0x84>)
 800e66e:	480d      	ldr	r0, [pc, #52]	@ (800e6a4 <__multadd+0x88>)
 800e670:	21ba      	movs	r1, #186	@ 0xba
 800e672:	f000 ffeb 	bl	800f64c <__assert_func>
 800e676:	6922      	ldr	r2, [r4, #16]
 800e678:	3202      	adds	r2, #2
 800e67a:	f104 010c 	add.w	r1, r4, #12
 800e67e:	0092      	lsls	r2, r2, #2
 800e680:	300c      	adds	r0, #12
 800e682:	f7ff fb0e 	bl	800dca2 <memcpy>
 800e686:	4621      	mov	r1, r4
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff ffa5 	bl	800e5d8 <_Bfree>
 800e68e:	4644      	mov	r4, r8
 800e690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e694:	3501      	adds	r5, #1
 800e696:	615e      	str	r6, [r3, #20]
 800e698:	6125      	str	r5, [r4, #16]
 800e69a:	4620      	mov	r0, r4
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a0:	08010801 	.word	0x08010801
 800e6a4:	08010889 	.word	0x08010889

0800e6a8 <__s2b>:
 800e6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	4615      	mov	r5, r2
 800e6b0:	461f      	mov	r7, r3
 800e6b2:	2209      	movs	r2, #9
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6bc:	2100      	movs	r1, #0
 800e6be:	2201      	movs	r2, #1
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	db09      	blt.n	800e6d8 <__s2b+0x30>
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff ff47 	bl	800e558 <_Balloc>
 800e6ca:	b940      	cbnz	r0, 800e6de <__s2b+0x36>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	4b19      	ldr	r3, [pc, #100]	@ (800e734 <__s2b+0x8c>)
 800e6d0:	4819      	ldr	r0, [pc, #100]	@ (800e738 <__s2b+0x90>)
 800e6d2:	21d3      	movs	r1, #211	@ 0xd3
 800e6d4:	f000 ffba 	bl	800f64c <__assert_func>
 800e6d8:	0052      	lsls	r2, r2, #1
 800e6da:	3101      	adds	r1, #1
 800e6dc:	e7f0      	b.n	800e6c0 <__s2b+0x18>
 800e6de:	9b08      	ldr	r3, [sp, #32]
 800e6e0:	6143      	str	r3, [r0, #20]
 800e6e2:	2d09      	cmp	r5, #9
 800e6e4:	f04f 0301 	mov.w	r3, #1
 800e6e8:	6103      	str	r3, [r0, #16]
 800e6ea:	dd16      	ble.n	800e71a <__s2b+0x72>
 800e6ec:	f104 0909 	add.w	r9, r4, #9
 800e6f0:	46c8      	mov	r8, r9
 800e6f2:	442c      	add	r4, r5
 800e6f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6f8:	4601      	mov	r1, r0
 800e6fa:	3b30      	subs	r3, #48	@ 0x30
 800e6fc:	220a      	movs	r2, #10
 800e6fe:	4630      	mov	r0, r6
 800e700:	f7ff ff8c 	bl	800e61c <__multadd>
 800e704:	45a0      	cmp	r8, r4
 800e706:	d1f5      	bne.n	800e6f4 <__s2b+0x4c>
 800e708:	f1a5 0408 	sub.w	r4, r5, #8
 800e70c:	444c      	add	r4, r9
 800e70e:	1b2d      	subs	r5, r5, r4
 800e710:	1963      	adds	r3, r4, r5
 800e712:	42bb      	cmp	r3, r7
 800e714:	db04      	blt.n	800e720 <__s2b+0x78>
 800e716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71a:	340a      	adds	r4, #10
 800e71c:	2509      	movs	r5, #9
 800e71e:	e7f6      	b.n	800e70e <__s2b+0x66>
 800e720:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e724:	4601      	mov	r1, r0
 800e726:	3b30      	subs	r3, #48	@ 0x30
 800e728:	220a      	movs	r2, #10
 800e72a:	4630      	mov	r0, r6
 800e72c:	f7ff ff76 	bl	800e61c <__multadd>
 800e730:	e7ee      	b.n	800e710 <__s2b+0x68>
 800e732:	bf00      	nop
 800e734:	08010801 	.word	0x08010801
 800e738:	08010889 	.word	0x08010889

0800e73c <__hi0bits>:
 800e73c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e740:	4603      	mov	r3, r0
 800e742:	bf36      	itet	cc
 800e744:	0403      	lslcc	r3, r0, #16
 800e746:	2000      	movcs	r0, #0
 800e748:	2010      	movcc	r0, #16
 800e74a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e74e:	bf3c      	itt	cc
 800e750:	021b      	lslcc	r3, r3, #8
 800e752:	3008      	addcc	r0, #8
 800e754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e758:	bf3c      	itt	cc
 800e75a:	011b      	lslcc	r3, r3, #4
 800e75c:	3004      	addcc	r0, #4
 800e75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e762:	bf3c      	itt	cc
 800e764:	009b      	lslcc	r3, r3, #2
 800e766:	3002      	addcc	r0, #2
 800e768:	2b00      	cmp	r3, #0
 800e76a:	db05      	blt.n	800e778 <__hi0bits+0x3c>
 800e76c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e770:	f100 0001 	add.w	r0, r0, #1
 800e774:	bf08      	it	eq
 800e776:	2020      	moveq	r0, #32
 800e778:	4770      	bx	lr

0800e77a <__lo0bits>:
 800e77a:	6803      	ldr	r3, [r0, #0]
 800e77c:	4602      	mov	r2, r0
 800e77e:	f013 0007 	ands.w	r0, r3, #7
 800e782:	d00b      	beq.n	800e79c <__lo0bits+0x22>
 800e784:	07d9      	lsls	r1, r3, #31
 800e786:	d421      	bmi.n	800e7cc <__lo0bits+0x52>
 800e788:	0798      	lsls	r0, r3, #30
 800e78a:	bf49      	itett	mi
 800e78c:	085b      	lsrmi	r3, r3, #1
 800e78e:	089b      	lsrpl	r3, r3, #2
 800e790:	2001      	movmi	r0, #1
 800e792:	6013      	strmi	r3, [r2, #0]
 800e794:	bf5c      	itt	pl
 800e796:	6013      	strpl	r3, [r2, #0]
 800e798:	2002      	movpl	r0, #2
 800e79a:	4770      	bx	lr
 800e79c:	b299      	uxth	r1, r3
 800e79e:	b909      	cbnz	r1, 800e7a4 <__lo0bits+0x2a>
 800e7a0:	0c1b      	lsrs	r3, r3, #16
 800e7a2:	2010      	movs	r0, #16
 800e7a4:	b2d9      	uxtb	r1, r3
 800e7a6:	b909      	cbnz	r1, 800e7ac <__lo0bits+0x32>
 800e7a8:	3008      	adds	r0, #8
 800e7aa:	0a1b      	lsrs	r3, r3, #8
 800e7ac:	0719      	lsls	r1, r3, #28
 800e7ae:	bf04      	itt	eq
 800e7b0:	091b      	lsreq	r3, r3, #4
 800e7b2:	3004      	addeq	r0, #4
 800e7b4:	0799      	lsls	r1, r3, #30
 800e7b6:	bf04      	itt	eq
 800e7b8:	089b      	lsreq	r3, r3, #2
 800e7ba:	3002      	addeq	r0, #2
 800e7bc:	07d9      	lsls	r1, r3, #31
 800e7be:	d403      	bmi.n	800e7c8 <__lo0bits+0x4e>
 800e7c0:	085b      	lsrs	r3, r3, #1
 800e7c2:	f100 0001 	add.w	r0, r0, #1
 800e7c6:	d003      	beq.n	800e7d0 <__lo0bits+0x56>
 800e7c8:	6013      	str	r3, [r2, #0]
 800e7ca:	4770      	bx	lr
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	4770      	bx	lr
 800e7d0:	2020      	movs	r0, #32
 800e7d2:	4770      	bx	lr

0800e7d4 <__i2b>:
 800e7d4:	b510      	push	{r4, lr}
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	2101      	movs	r1, #1
 800e7da:	f7ff febd 	bl	800e558 <_Balloc>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	b928      	cbnz	r0, 800e7ee <__i2b+0x1a>
 800e7e2:	4b05      	ldr	r3, [pc, #20]	@ (800e7f8 <__i2b+0x24>)
 800e7e4:	4805      	ldr	r0, [pc, #20]	@ (800e7fc <__i2b+0x28>)
 800e7e6:	f240 1145 	movw	r1, #325	@ 0x145
 800e7ea:	f000 ff2f 	bl	800f64c <__assert_func>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	6144      	str	r4, [r0, #20]
 800e7f2:	6103      	str	r3, [r0, #16]
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	bf00      	nop
 800e7f8:	08010801 	.word	0x08010801
 800e7fc:	08010889 	.word	0x08010889

0800e800 <__multiply>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	4614      	mov	r4, r2
 800e806:	690a      	ldr	r2, [r1, #16]
 800e808:	6923      	ldr	r3, [r4, #16]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	bfa8      	it	ge
 800e80e:	4623      	movge	r3, r4
 800e810:	460f      	mov	r7, r1
 800e812:	bfa4      	itt	ge
 800e814:	460c      	movge	r4, r1
 800e816:	461f      	movge	r7, r3
 800e818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e81c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e820:	68a3      	ldr	r3, [r4, #8]
 800e822:	6861      	ldr	r1, [r4, #4]
 800e824:	eb0a 0609 	add.w	r6, sl, r9
 800e828:	42b3      	cmp	r3, r6
 800e82a:	b085      	sub	sp, #20
 800e82c:	bfb8      	it	lt
 800e82e:	3101      	addlt	r1, #1
 800e830:	f7ff fe92 	bl	800e558 <_Balloc>
 800e834:	b930      	cbnz	r0, 800e844 <__multiply+0x44>
 800e836:	4602      	mov	r2, r0
 800e838:	4b44      	ldr	r3, [pc, #272]	@ (800e94c <__multiply+0x14c>)
 800e83a:	4845      	ldr	r0, [pc, #276]	@ (800e950 <__multiply+0x150>)
 800e83c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e840:	f000 ff04 	bl	800f64c <__assert_func>
 800e844:	f100 0514 	add.w	r5, r0, #20
 800e848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e84c:	462b      	mov	r3, r5
 800e84e:	2200      	movs	r2, #0
 800e850:	4543      	cmp	r3, r8
 800e852:	d321      	bcc.n	800e898 <__multiply+0x98>
 800e854:	f107 0114 	add.w	r1, r7, #20
 800e858:	f104 0214 	add.w	r2, r4, #20
 800e85c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e864:	9302      	str	r3, [sp, #8]
 800e866:	1b13      	subs	r3, r2, r4
 800e868:	3b15      	subs	r3, #21
 800e86a:	f023 0303 	bic.w	r3, r3, #3
 800e86e:	3304      	adds	r3, #4
 800e870:	f104 0715 	add.w	r7, r4, #21
 800e874:	42ba      	cmp	r2, r7
 800e876:	bf38      	it	cc
 800e878:	2304      	movcc	r3, #4
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	9b02      	ldr	r3, [sp, #8]
 800e87e:	9103      	str	r1, [sp, #12]
 800e880:	428b      	cmp	r3, r1
 800e882:	d80c      	bhi.n	800e89e <__multiply+0x9e>
 800e884:	2e00      	cmp	r6, #0
 800e886:	dd03      	ble.n	800e890 <__multiply+0x90>
 800e888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d05b      	beq.n	800e948 <__multiply+0x148>
 800e890:	6106      	str	r6, [r0, #16]
 800e892:	b005      	add	sp, #20
 800e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e898:	f843 2b04 	str.w	r2, [r3], #4
 800e89c:	e7d8      	b.n	800e850 <__multiply+0x50>
 800e89e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e8a2:	f1ba 0f00 	cmp.w	sl, #0
 800e8a6:	d024      	beq.n	800e8f2 <__multiply+0xf2>
 800e8a8:	f104 0e14 	add.w	lr, r4, #20
 800e8ac:	46a9      	mov	r9, r5
 800e8ae:	f04f 0c00 	mov.w	ip, #0
 800e8b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8b6:	f8d9 3000 	ldr.w	r3, [r9]
 800e8ba:	fa1f fb87 	uxth.w	fp, r7
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800e8c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e8c8:	f8d9 7000 	ldr.w	r7, [r9]
 800e8cc:	4463      	add	r3, ip
 800e8ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8d2:	fb0a c70b 	mla	r7, sl, fp, ip
 800e8d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8e0:	4572      	cmp	r2, lr
 800e8e2:	f849 3b04 	str.w	r3, [r9], #4
 800e8e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8ea:	d8e2      	bhi.n	800e8b2 <__multiply+0xb2>
 800e8ec:	9b01      	ldr	r3, [sp, #4]
 800e8ee:	f845 c003 	str.w	ip, [r5, r3]
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8f8:	3104      	adds	r1, #4
 800e8fa:	f1b9 0f00 	cmp.w	r9, #0
 800e8fe:	d021      	beq.n	800e944 <__multiply+0x144>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	f104 0c14 	add.w	ip, r4, #20
 800e906:	46ae      	mov	lr, r5
 800e908:	f04f 0a00 	mov.w	sl, #0
 800e90c:	f8bc b000 	ldrh.w	fp, [ip]
 800e910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e914:	fb09 770b 	mla	r7, r9, fp, r7
 800e918:	4457      	add	r7, sl
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e920:	f84e 3b04 	str.w	r3, [lr], #4
 800e924:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e92c:	f8be 3000 	ldrh.w	r3, [lr]
 800e930:	fb09 330a 	mla	r3, r9, sl, r3
 800e934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e938:	4562      	cmp	r2, ip
 800e93a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e93e:	d8e5      	bhi.n	800e90c <__multiply+0x10c>
 800e940:	9f01      	ldr	r7, [sp, #4]
 800e942:	51eb      	str	r3, [r5, r7]
 800e944:	3504      	adds	r5, #4
 800e946:	e799      	b.n	800e87c <__multiply+0x7c>
 800e948:	3e01      	subs	r6, #1
 800e94a:	e79b      	b.n	800e884 <__multiply+0x84>
 800e94c:	08010801 	.word	0x08010801
 800e950:	08010889 	.word	0x08010889

0800e954 <__pow5mult>:
 800e954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e958:	4615      	mov	r5, r2
 800e95a:	f012 0203 	ands.w	r2, r2, #3
 800e95e:	4607      	mov	r7, r0
 800e960:	460e      	mov	r6, r1
 800e962:	d007      	beq.n	800e974 <__pow5mult+0x20>
 800e964:	4c25      	ldr	r4, [pc, #148]	@ (800e9fc <__pow5mult+0xa8>)
 800e966:	3a01      	subs	r2, #1
 800e968:	2300      	movs	r3, #0
 800e96a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e96e:	f7ff fe55 	bl	800e61c <__multadd>
 800e972:	4606      	mov	r6, r0
 800e974:	10ad      	asrs	r5, r5, #2
 800e976:	d03d      	beq.n	800e9f4 <__pow5mult+0xa0>
 800e978:	69fc      	ldr	r4, [r7, #28]
 800e97a:	b97c      	cbnz	r4, 800e99c <__pow5mult+0x48>
 800e97c:	2010      	movs	r0, #16
 800e97e:	f000 fe97 	bl	800f6b0 <malloc>
 800e982:	4602      	mov	r2, r0
 800e984:	61f8      	str	r0, [r7, #28]
 800e986:	b928      	cbnz	r0, 800e994 <__pow5mult+0x40>
 800e988:	4b1d      	ldr	r3, [pc, #116]	@ (800ea00 <__pow5mult+0xac>)
 800e98a:	481e      	ldr	r0, [pc, #120]	@ (800ea04 <__pow5mult+0xb0>)
 800e98c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e990:	f000 fe5c 	bl	800f64c <__assert_func>
 800e994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e998:	6004      	str	r4, [r0, #0]
 800e99a:	60c4      	str	r4, [r0, #12]
 800e99c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e9a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9a4:	b94c      	cbnz	r4, 800e9ba <__pow5mult+0x66>
 800e9a6:	f240 2171 	movw	r1, #625	@ 0x271
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f7ff ff12 	bl	800e7d4 <__i2b>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	6003      	str	r3, [r0, #0]
 800e9ba:	f04f 0900 	mov.w	r9, #0
 800e9be:	07eb      	lsls	r3, r5, #31
 800e9c0:	d50a      	bpl.n	800e9d8 <__pow5mult+0x84>
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4622      	mov	r2, r4
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	f7ff ff1a 	bl	800e800 <__multiply>
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	4638      	mov	r0, r7
 800e9d2:	f7ff fe01 	bl	800e5d8 <_Bfree>
 800e9d6:	4646      	mov	r6, r8
 800e9d8:	106d      	asrs	r5, r5, #1
 800e9da:	d00b      	beq.n	800e9f4 <__pow5mult+0xa0>
 800e9dc:	6820      	ldr	r0, [r4, #0]
 800e9de:	b938      	cbnz	r0, 800e9f0 <__pow5mult+0x9c>
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff ff0b 	bl	800e800 <__multiply>
 800e9ea:	6020      	str	r0, [r4, #0]
 800e9ec:	f8c0 9000 	str.w	r9, [r0]
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	e7e4      	b.n	800e9be <__pow5mult+0x6a>
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fa:	bf00      	nop
 800e9fc:	080108e4 	.word	0x080108e4
 800ea00:	08010872 	.word	0x08010872
 800ea04:	08010889 	.word	0x08010889

0800ea08 <__lshift>:
 800ea08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	6849      	ldr	r1, [r1, #4]
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea16:	68a3      	ldr	r3, [r4, #8]
 800ea18:	4607      	mov	r7, r0
 800ea1a:	4691      	mov	r9, r2
 800ea1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea20:	f108 0601 	add.w	r6, r8, #1
 800ea24:	42b3      	cmp	r3, r6
 800ea26:	db0b      	blt.n	800ea40 <__lshift+0x38>
 800ea28:	4638      	mov	r0, r7
 800ea2a:	f7ff fd95 	bl	800e558 <_Balloc>
 800ea2e:	4605      	mov	r5, r0
 800ea30:	b948      	cbnz	r0, 800ea46 <__lshift+0x3e>
 800ea32:	4602      	mov	r2, r0
 800ea34:	4b28      	ldr	r3, [pc, #160]	@ (800ead8 <__lshift+0xd0>)
 800ea36:	4829      	ldr	r0, [pc, #164]	@ (800eadc <__lshift+0xd4>)
 800ea38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ea3c:	f000 fe06 	bl	800f64c <__assert_func>
 800ea40:	3101      	adds	r1, #1
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	e7ee      	b.n	800ea24 <__lshift+0x1c>
 800ea46:	2300      	movs	r3, #0
 800ea48:	f100 0114 	add.w	r1, r0, #20
 800ea4c:	f100 0210 	add.w	r2, r0, #16
 800ea50:	4618      	mov	r0, r3
 800ea52:	4553      	cmp	r3, sl
 800ea54:	db33      	blt.n	800eabe <__lshift+0xb6>
 800ea56:	6920      	ldr	r0, [r4, #16]
 800ea58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea5c:	f104 0314 	add.w	r3, r4, #20
 800ea60:	f019 091f 	ands.w	r9, r9, #31
 800ea64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea6c:	d02b      	beq.n	800eac6 <__lshift+0xbe>
 800ea6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ea72:	468a      	mov	sl, r1
 800ea74:	2200      	movs	r2, #0
 800ea76:	6818      	ldr	r0, [r3, #0]
 800ea78:	fa00 f009 	lsl.w	r0, r0, r9
 800ea7c:	4310      	orrs	r0, r2
 800ea7e:	f84a 0b04 	str.w	r0, [sl], #4
 800ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea86:	459c      	cmp	ip, r3
 800ea88:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea8c:	d8f3      	bhi.n	800ea76 <__lshift+0x6e>
 800ea8e:	ebac 0304 	sub.w	r3, ip, r4
 800ea92:	3b15      	subs	r3, #21
 800ea94:	f023 0303 	bic.w	r3, r3, #3
 800ea98:	3304      	adds	r3, #4
 800ea9a:	f104 0015 	add.w	r0, r4, #21
 800ea9e:	4584      	cmp	ip, r0
 800eaa0:	bf38      	it	cc
 800eaa2:	2304      	movcc	r3, #4
 800eaa4:	50ca      	str	r2, [r1, r3]
 800eaa6:	b10a      	cbz	r2, 800eaac <__lshift+0xa4>
 800eaa8:	f108 0602 	add.w	r6, r8, #2
 800eaac:	3e01      	subs	r6, #1
 800eaae:	4638      	mov	r0, r7
 800eab0:	612e      	str	r6, [r5, #16]
 800eab2:	4621      	mov	r1, r4
 800eab4:	f7ff fd90 	bl	800e5d8 <_Bfree>
 800eab8:	4628      	mov	r0, r5
 800eaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eabe:	f842 0f04 	str.w	r0, [r2, #4]!
 800eac2:	3301      	adds	r3, #1
 800eac4:	e7c5      	b.n	800ea52 <__lshift+0x4a>
 800eac6:	3904      	subs	r1, #4
 800eac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eacc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ead0:	459c      	cmp	ip, r3
 800ead2:	d8f9      	bhi.n	800eac8 <__lshift+0xc0>
 800ead4:	e7ea      	b.n	800eaac <__lshift+0xa4>
 800ead6:	bf00      	nop
 800ead8:	08010801 	.word	0x08010801
 800eadc:	08010889 	.word	0x08010889

0800eae0 <__mcmp>:
 800eae0:	690a      	ldr	r2, [r1, #16]
 800eae2:	4603      	mov	r3, r0
 800eae4:	6900      	ldr	r0, [r0, #16]
 800eae6:	1a80      	subs	r0, r0, r2
 800eae8:	b530      	push	{r4, r5, lr}
 800eaea:	d10e      	bne.n	800eb0a <__mcmp+0x2a>
 800eaec:	3314      	adds	r3, #20
 800eaee:	3114      	adds	r1, #20
 800eaf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eaf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eaf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eafc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb00:	4295      	cmp	r5, r2
 800eb02:	d003      	beq.n	800eb0c <__mcmp+0x2c>
 800eb04:	d205      	bcs.n	800eb12 <__mcmp+0x32>
 800eb06:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0a:	bd30      	pop	{r4, r5, pc}
 800eb0c:	42a3      	cmp	r3, r4
 800eb0e:	d3f3      	bcc.n	800eaf8 <__mcmp+0x18>
 800eb10:	e7fb      	b.n	800eb0a <__mcmp+0x2a>
 800eb12:	2001      	movs	r0, #1
 800eb14:	e7f9      	b.n	800eb0a <__mcmp+0x2a>
	...

0800eb18 <__mdiff>:
 800eb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	4689      	mov	r9, r1
 800eb1e:	4606      	mov	r6, r0
 800eb20:	4611      	mov	r1, r2
 800eb22:	4648      	mov	r0, r9
 800eb24:	4614      	mov	r4, r2
 800eb26:	f7ff ffdb 	bl	800eae0 <__mcmp>
 800eb2a:	1e05      	subs	r5, r0, #0
 800eb2c:	d112      	bne.n	800eb54 <__mdiff+0x3c>
 800eb2e:	4629      	mov	r1, r5
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7ff fd11 	bl	800e558 <_Balloc>
 800eb36:	4602      	mov	r2, r0
 800eb38:	b928      	cbnz	r0, 800eb46 <__mdiff+0x2e>
 800eb3a:	4b3f      	ldr	r3, [pc, #252]	@ (800ec38 <__mdiff+0x120>)
 800eb3c:	f240 2137 	movw	r1, #567	@ 0x237
 800eb40:	483e      	ldr	r0, [pc, #248]	@ (800ec3c <__mdiff+0x124>)
 800eb42:	f000 fd83 	bl	800f64c <__assert_func>
 800eb46:	2301      	movs	r3, #1
 800eb48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	b003      	add	sp, #12
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	bfbc      	itt	lt
 800eb56:	464b      	movlt	r3, r9
 800eb58:	46a1      	movlt	r9, r4
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb60:	bfba      	itte	lt
 800eb62:	461c      	movlt	r4, r3
 800eb64:	2501      	movlt	r5, #1
 800eb66:	2500      	movge	r5, #0
 800eb68:	f7ff fcf6 	bl	800e558 <_Balloc>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	b918      	cbnz	r0, 800eb78 <__mdiff+0x60>
 800eb70:	4b31      	ldr	r3, [pc, #196]	@ (800ec38 <__mdiff+0x120>)
 800eb72:	f240 2145 	movw	r1, #581	@ 0x245
 800eb76:	e7e3      	b.n	800eb40 <__mdiff+0x28>
 800eb78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb7c:	6926      	ldr	r6, [r4, #16]
 800eb7e:	60c5      	str	r5, [r0, #12]
 800eb80:	f109 0310 	add.w	r3, r9, #16
 800eb84:	f109 0514 	add.w	r5, r9, #20
 800eb88:	f104 0e14 	add.w	lr, r4, #20
 800eb8c:	f100 0b14 	add.w	fp, r0, #20
 800eb90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	46d9      	mov	r9, fp
 800eb9c:	f04f 0c00 	mov.w	ip, #0
 800eba0:	9b01      	ldr	r3, [sp, #4]
 800eba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ebaa:	9301      	str	r3, [sp, #4]
 800ebac:	fa1f f38a 	uxth.w	r3, sl
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	b283      	uxth	r3, r0
 800ebb4:	1acb      	subs	r3, r1, r3
 800ebb6:	0c00      	lsrs	r0, r0, #16
 800ebb8:	4463      	add	r3, ip
 800ebba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ebbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ebc8:	4576      	cmp	r6, lr
 800ebca:	f849 3b04 	str.w	r3, [r9], #4
 800ebce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebd2:	d8e5      	bhi.n	800eba0 <__mdiff+0x88>
 800ebd4:	1b33      	subs	r3, r6, r4
 800ebd6:	3b15      	subs	r3, #21
 800ebd8:	f023 0303 	bic.w	r3, r3, #3
 800ebdc:	3415      	adds	r4, #21
 800ebde:	3304      	adds	r3, #4
 800ebe0:	42a6      	cmp	r6, r4
 800ebe2:	bf38      	it	cc
 800ebe4:	2304      	movcc	r3, #4
 800ebe6:	441d      	add	r5, r3
 800ebe8:	445b      	add	r3, fp
 800ebea:	461e      	mov	r6, r3
 800ebec:	462c      	mov	r4, r5
 800ebee:	4544      	cmp	r4, r8
 800ebf0:	d30e      	bcc.n	800ec10 <__mdiff+0xf8>
 800ebf2:	f108 0103 	add.w	r1, r8, #3
 800ebf6:	1b49      	subs	r1, r1, r5
 800ebf8:	f021 0103 	bic.w	r1, r1, #3
 800ebfc:	3d03      	subs	r5, #3
 800ebfe:	45a8      	cmp	r8, r5
 800ec00:	bf38      	it	cc
 800ec02:	2100      	movcc	r1, #0
 800ec04:	440b      	add	r3, r1
 800ec06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec0a:	b191      	cbz	r1, 800ec32 <__mdiff+0x11a>
 800ec0c:	6117      	str	r7, [r2, #16]
 800ec0e:	e79d      	b.n	800eb4c <__mdiff+0x34>
 800ec10:	f854 1b04 	ldr.w	r1, [r4], #4
 800ec14:	46e6      	mov	lr, ip
 800ec16:	0c08      	lsrs	r0, r1, #16
 800ec18:	fa1c fc81 	uxtah	ip, ip, r1
 800ec1c:	4471      	add	r1, lr
 800ec1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ec22:	b289      	uxth	r1, r1
 800ec24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec28:	f846 1b04 	str.w	r1, [r6], #4
 800ec2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec30:	e7dd      	b.n	800ebee <__mdiff+0xd6>
 800ec32:	3f01      	subs	r7, #1
 800ec34:	e7e7      	b.n	800ec06 <__mdiff+0xee>
 800ec36:	bf00      	nop
 800ec38:	08010801 	.word	0x08010801
 800ec3c:	08010889 	.word	0x08010889

0800ec40 <__ulp>:
 800ec40:	b082      	sub	sp, #8
 800ec42:	ed8d 0b00 	vstr	d0, [sp]
 800ec46:	9a01      	ldr	r2, [sp, #4]
 800ec48:	4b0f      	ldr	r3, [pc, #60]	@ (800ec88 <__ulp+0x48>)
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dc08      	bgt.n	800ec66 <__ulp+0x26>
 800ec54:	425b      	negs	r3, r3
 800ec56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ec5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec5e:	da04      	bge.n	800ec6a <__ulp+0x2a>
 800ec60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec64:	4113      	asrs	r3, r2
 800ec66:	2200      	movs	r2, #0
 800ec68:	e008      	b.n	800ec7c <__ulp+0x3c>
 800ec6a:	f1a2 0314 	sub.w	r3, r2, #20
 800ec6e:	2b1e      	cmp	r3, #30
 800ec70:	bfda      	itte	le
 800ec72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ec76:	40da      	lsrle	r2, r3
 800ec78:	2201      	movgt	r2, #1
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	ec41 0b10 	vmov	d0, r0, r1
 800ec84:	b002      	add	sp, #8
 800ec86:	4770      	bx	lr
 800ec88:	7ff00000 	.word	0x7ff00000

0800ec8c <__b2d>:
 800ec8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec90:	6906      	ldr	r6, [r0, #16]
 800ec92:	f100 0814 	add.w	r8, r0, #20
 800ec96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec9a:	1f37      	subs	r7, r6, #4
 800ec9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7ff fd4b 	bl	800e73c <__hi0bits>
 800eca6:	f1c0 0320 	rsb	r3, r0, #32
 800ecaa:	280a      	cmp	r0, #10
 800ecac:	600b      	str	r3, [r1, #0]
 800ecae:	491b      	ldr	r1, [pc, #108]	@ (800ed1c <__b2d+0x90>)
 800ecb0:	dc15      	bgt.n	800ecde <__b2d+0x52>
 800ecb2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ecb6:	fa22 f30c 	lsr.w	r3, r2, ip
 800ecba:	45b8      	cmp	r8, r7
 800ecbc:	ea43 0501 	orr.w	r5, r3, r1
 800ecc0:	bf34      	ite	cc
 800ecc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecc6:	2300      	movcs	r3, #0
 800ecc8:	3015      	adds	r0, #21
 800ecca:	fa02 f000 	lsl.w	r0, r2, r0
 800ecce:	fa23 f30c 	lsr.w	r3, r3, ip
 800ecd2:	4303      	orrs	r3, r0
 800ecd4:	461c      	mov	r4, r3
 800ecd6:	ec45 4b10 	vmov	d0, r4, r5
 800ecda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecde:	45b8      	cmp	r8, r7
 800ece0:	bf3a      	itte	cc
 800ece2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ece6:	f1a6 0708 	subcc.w	r7, r6, #8
 800ecea:	2300      	movcs	r3, #0
 800ecec:	380b      	subs	r0, #11
 800ecee:	d012      	beq.n	800ed16 <__b2d+0x8a>
 800ecf0:	f1c0 0120 	rsb	r1, r0, #32
 800ecf4:	fa23 f401 	lsr.w	r4, r3, r1
 800ecf8:	4082      	lsls	r2, r0
 800ecfa:	4322      	orrs	r2, r4
 800ecfc:	4547      	cmp	r7, r8
 800ecfe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ed02:	bf8c      	ite	hi
 800ed04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ed08:	2200      	movls	r2, #0
 800ed0a:	4083      	lsls	r3, r0
 800ed0c:	40ca      	lsrs	r2, r1
 800ed0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ed12:	4313      	orrs	r3, r2
 800ed14:	e7de      	b.n	800ecd4 <__b2d+0x48>
 800ed16:	ea42 0501 	orr.w	r5, r2, r1
 800ed1a:	e7db      	b.n	800ecd4 <__b2d+0x48>
 800ed1c:	3ff00000 	.word	0x3ff00000

0800ed20 <__d2b>:
 800ed20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed24:	460f      	mov	r7, r1
 800ed26:	2101      	movs	r1, #1
 800ed28:	ec59 8b10 	vmov	r8, r9, d0
 800ed2c:	4616      	mov	r6, r2
 800ed2e:	f7ff fc13 	bl	800e558 <_Balloc>
 800ed32:	4604      	mov	r4, r0
 800ed34:	b930      	cbnz	r0, 800ed44 <__d2b+0x24>
 800ed36:	4602      	mov	r2, r0
 800ed38:	4b23      	ldr	r3, [pc, #140]	@ (800edc8 <__d2b+0xa8>)
 800ed3a:	4824      	ldr	r0, [pc, #144]	@ (800edcc <__d2b+0xac>)
 800ed3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed40:	f000 fc84 	bl	800f64c <__assert_func>
 800ed44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed4c:	b10d      	cbz	r5, 800ed52 <__d2b+0x32>
 800ed4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	f1b8 0300 	subs.w	r3, r8, #0
 800ed58:	d023      	beq.n	800eda2 <__d2b+0x82>
 800ed5a:	4668      	mov	r0, sp
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	f7ff fd0c 	bl	800e77a <__lo0bits>
 800ed62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed66:	b1d0      	cbz	r0, 800ed9e <__d2b+0x7e>
 800ed68:	f1c0 0320 	rsb	r3, r0, #32
 800ed6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed70:	430b      	orrs	r3, r1
 800ed72:	40c2      	lsrs	r2, r0
 800ed74:	6163      	str	r3, [r4, #20]
 800ed76:	9201      	str	r2, [sp, #4]
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	61a3      	str	r3, [r4, #24]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	bf0c      	ite	eq
 800ed80:	2201      	moveq	r2, #1
 800ed82:	2202      	movne	r2, #2
 800ed84:	6122      	str	r2, [r4, #16]
 800ed86:	b1a5      	cbz	r5, 800edb2 <__d2b+0x92>
 800ed88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed8c:	4405      	add	r5, r0
 800ed8e:	603d      	str	r5, [r7, #0]
 800ed90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed94:	6030      	str	r0, [r6, #0]
 800ed96:	4620      	mov	r0, r4
 800ed98:	b003      	add	sp, #12
 800ed9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed9e:	6161      	str	r1, [r4, #20]
 800eda0:	e7ea      	b.n	800ed78 <__d2b+0x58>
 800eda2:	a801      	add	r0, sp, #4
 800eda4:	f7ff fce9 	bl	800e77a <__lo0bits>
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	6163      	str	r3, [r4, #20]
 800edac:	3020      	adds	r0, #32
 800edae:	2201      	movs	r2, #1
 800edb0:	e7e8      	b.n	800ed84 <__d2b+0x64>
 800edb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edba:	6038      	str	r0, [r7, #0]
 800edbc:	6918      	ldr	r0, [r3, #16]
 800edbe:	f7ff fcbd 	bl	800e73c <__hi0bits>
 800edc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edc6:	e7e5      	b.n	800ed94 <__d2b+0x74>
 800edc8:	08010801 	.word	0x08010801
 800edcc:	08010889 	.word	0x08010889

0800edd0 <__ratio>:
 800edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	b085      	sub	sp, #20
 800edd6:	e9cd 1000 	strd	r1, r0, [sp]
 800edda:	a902      	add	r1, sp, #8
 800eddc:	f7ff ff56 	bl	800ec8c <__b2d>
 800ede0:	9800      	ldr	r0, [sp, #0]
 800ede2:	a903      	add	r1, sp, #12
 800ede4:	ec55 4b10 	vmov	r4, r5, d0
 800ede8:	f7ff ff50 	bl	800ec8c <__b2d>
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	6919      	ldr	r1, [r3, #16]
 800edf0:	9b00      	ldr	r3, [sp, #0]
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	1ac9      	subs	r1, r1, r3
 800edf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800edfa:	1a9b      	subs	r3, r3, r2
 800edfc:	ec5b ab10 	vmov	sl, fp, d0
 800ee00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bfce      	itee	gt
 800ee08:	462a      	movgt	r2, r5
 800ee0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee0e:	465a      	movle	r2, fp
 800ee10:	462f      	mov	r7, r5
 800ee12:	46d9      	mov	r9, fp
 800ee14:	bfcc      	ite	gt
 800ee16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ee1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ee1e:	464b      	mov	r3, r9
 800ee20:	4652      	mov	r2, sl
 800ee22:	4620      	mov	r0, r4
 800ee24:	4639      	mov	r1, r7
 800ee26:	f7f1 fd19 	bl	800085c <__aeabi_ddiv>
 800ee2a:	ec41 0b10 	vmov	d0, r0, r1
 800ee2e:	b005      	add	sp, #20
 800ee30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee34 <__copybits>:
 800ee34:	3901      	subs	r1, #1
 800ee36:	b570      	push	{r4, r5, r6, lr}
 800ee38:	1149      	asrs	r1, r1, #5
 800ee3a:	6914      	ldr	r4, [r2, #16]
 800ee3c:	3101      	adds	r1, #1
 800ee3e:	f102 0314 	add.w	r3, r2, #20
 800ee42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee4a:	1f05      	subs	r5, r0, #4
 800ee4c:	42a3      	cmp	r3, r4
 800ee4e:	d30c      	bcc.n	800ee6a <__copybits+0x36>
 800ee50:	1aa3      	subs	r3, r4, r2
 800ee52:	3b11      	subs	r3, #17
 800ee54:	f023 0303 	bic.w	r3, r3, #3
 800ee58:	3211      	adds	r2, #17
 800ee5a:	42a2      	cmp	r2, r4
 800ee5c:	bf88      	it	hi
 800ee5e:	2300      	movhi	r3, #0
 800ee60:	4418      	add	r0, r3
 800ee62:	2300      	movs	r3, #0
 800ee64:	4288      	cmp	r0, r1
 800ee66:	d305      	bcc.n	800ee74 <__copybits+0x40>
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee72:	e7eb      	b.n	800ee4c <__copybits+0x18>
 800ee74:	f840 3b04 	str.w	r3, [r0], #4
 800ee78:	e7f4      	b.n	800ee64 <__copybits+0x30>

0800ee7a <__any_on>:
 800ee7a:	f100 0214 	add.w	r2, r0, #20
 800ee7e:	6900      	ldr	r0, [r0, #16]
 800ee80:	114b      	asrs	r3, r1, #5
 800ee82:	4298      	cmp	r0, r3
 800ee84:	b510      	push	{r4, lr}
 800ee86:	db11      	blt.n	800eeac <__any_on+0x32>
 800ee88:	dd0a      	ble.n	800eea0 <__any_on+0x26>
 800ee8a:	f011 011f 	ands.w	r1, r1, #31
 800ee8e:	d007      	beq.n	800eea0 <__any_on+0x26>
 800ee90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee94:	fa24 f001 	lsr.w	r0, r4, r1
 800ee98:	fa00 f101 	lsl.w	r1, r0, r1
 800ee9c:	428c      	cmp	r4, r1
 800ee9e:	d10b      	bne.n	800eeb8 <__any_on+0x3e>
 800eea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d803      	bhi.n	800eeb0 <__any_on+0x36>
 800eea8:	2000      	movs	r0, #0
 800eeaa:	bd10      	pop	{r4, pc}
 800eeac:	4603      	mov	r3, r0
 800eeae:	e7f7      	b.n	800eea0 <__any_on+0x26>
 800eeb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eeb4:	2900      	cmp	r1, #0
 800eeb6:	d0f5      	beq.n	800eea4 <__any_on+0x2a>
 800eeb8:	2001      	movs	r0, #1
 800eeba:	e7f6      	b.n	800eeaa <__any_on+0x30>

0800eebc <__ascii_wctomb>:
 800eebc:	4603      	mov	r3, r0
 800eebe:	4608      	mov	r0, r1
 800eec0:	b141      	cbz	r1, 800eed4 <__ascii_wctomb+0x18>
 800eec2:	2aff      	cmp	r2, #255	@ 0xff
 800eec4:	d904      	bls.n	800eed0 <__ascii_wctomb+0x14>
 800eec6:	228a      	movs	r2, #138	@ 0x8a
 800eec8:	601a      	str	r2, [r3, #0]
 800eeca:	f04f 30ff 	mov.w	r0, #4294967295
 800eece:	4770      	bx	lr
 800eed0:	700a      	strb	r2, [r1, #0]
 800eed2:	2001      	movs	r0, #1
 800eed4:	4770      	bx	lr

0800eed6 <__ssputs_r>:
 800eed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeda:	688e      	ldr	r6, [r1, #8]
 800eedc:	461f      	mov	r7, r3
 800eede:	42be      	cmp	r6, r7
 800eee0:	680b      	ldr	r3, [r1, #0]
 800eee2:	4682      	mov	sl, r0
 800eee4:	460c      	mov	r4, r1
 800eee6:	4690      	mov	r8, r2
 800eee8:	d82d      	bhi.n	800ef46 <__ssputs_r+0x70>
 800eeea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eeee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eef2:	d026      	beq.n	800ef42 <__ssputs_r+0x6c>
 800eef4:	6965      	ldr	r5, [r4, #20]
 800eef6:	6909      	ldr	r1, [r1, #16]
 800eef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eefc:	eba3 0901 	sub.w	r9, r3, r1
 800ef00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef04:	1c7b      	adds	r3, r7, #1
 800ef06:	444b      	add	r3, r9
 800ef08:	106d      	asrs	r5, r5, #1
 800ef0a:	429d      	cmp	r5, r3
 800ef0c:	bf38      	it	cc
 800ef0e:	461d      	movcc	r5, r3
 800ef10:	0553      	lsls	r3, r2, #21
 800ef12:	d527      	bpl.n	800ef64 <__ssputs_r+0x8e>
 800ef14:	4629      	mov	r1, r5
 800ef16:	f7ff fa81 	bl	800e41c <_malloc_r>
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	b360      	cbz	r0, 800ef78 <__ssputs_r+0xa2>
 800ef1e:	6921      	ldr	r1, [r4, #16]
 800ef20:	464a      	mov	r2, r9
 800ef22:	f7fe febe 	bl	800dca2 <memcpy>
 800ef26:	89a3      	ldrh	r3, [r4, #12]
 800ef28:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	6126      	str	r6, [r4, #16]
 800ef34:	6165      	str	r5, [r4, #20]
 800ef36:	444e      	add	r6, r9
 800ef38:	eba5 0509 	sub.w	r5, r5, r9
 800ef3c:	6026      	str	r6, [r4, #0]
 800ef3e:	60a5      	str	r5, [r4, #8]
 800ef40:	463e      	mov	r6, r7
 800ef42:	42be      	cmp	r6, r7
 800ef44:	d900      	bls.n	800ef48 <__ssputs_r+0x72>
 800ef46:	463e      	mov	r6, r7
 800ef48:	6820      	ldr	r0, [r4, #0]
 800ef4a:	4632      	mov	r2, r6
 800ef4c:	4641      	mov	r1, r8
 800ef4e:	f000 fb53 	bl	800f5f8 <memmove>
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	1b9b      	subs	r3, r3, r6
 800ef56:	60a3      	str	r3, [r4, #8]
 800ef58:	6823      	ldr	r3, [r4, #0]
 800ef5a:	4433      	add	r3, r6
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef64:	462a      	mov	r2, r5
 800ef66:	f000 fbab 	bl	800f6c0 <_realloc_r>
 800ef6a:	4606      	mov	r6, r0
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d1e0      	bne.n	800ef32 <__ssputs_r+0x5c>
 800ef70:	6921      	ldr	r1, [r4, #16]
 800ef72:	4650      	mov	r0, sl
 800ef74:	f7fe feac 	bl	800dcd0 <_free_r>
 800ef78:	230c      	movs	r3, #12
 800ef7a:	f8ca 3000 	str.w	r3, [sl]
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef84:	81a3      	strh	r3, [r4, #12]
 800ef86:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8a:	e7e9      	b.n	800ef60 <__ssputs_r+0x8a>

0800ef8c <_svfiprintf_r>:
 800ef8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef90:	4698      	mov	r8, r3
 800ef92:	898b      	ldrh	r3, [r1, #12]
 800ef94:	061b      	lsls	r3, r3, #24
 800ef96:	b09d      	sub	sp, #116	@ 0x74
 800ef98:	4607      	mov	r7, r0
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	4614      	mov	r4, r2
 800ef9e:	d510      	bpl.n	800efc2 <_svfiprintf_r+0x36>
 800efa0:	690b      	ldr	r3, [r1, #16]
 800efa2:	b973      	cbnz	r3, 800efc2 <_svfiprintf_r+0x36>
 800efa4:	2140      	movs	r1, #64	@ 0x40
 800efa6:	f7ff fa39 	bl	800e41c <_malloc_r>
 800efaa:	6028      	str	r0, [r5, #0]
 800efac:	6128      	str	r0, [r5, #16]
 800efae:	b930      	cbnz	r0, 800efbe <_svfiprintf_r+0x32>
 800efb0:	230c      	movs	r3, #12
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295
 800efb8:	b01d      	add	sp, #116	@ 0x74
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	2340      	movs	r3, #64	@ 0x40
 800efc0:	616b      	str	r3, [r5, #20]
 800efc2:	2300      	movs	r3, #0
 800efc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efc6:	2320      	movs	r3, #32
 800efc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800efcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800efd0:	2330      	movs	r3, #48	@ 0x30
 800efd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f170 <_svfiprintf_r+0x1e4>
 800efd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efda:	f04f 0901 	mov.w	r9, #1
 800efde:	4623      	mov	r3, r4
 800efe0:	469a      	mov	sl, r3
 800efe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efe6:	b10a      	cbz	r2, 800efec <_svfiprintf_r+0x60>
 800efe8:	2a25      	cmp	r2, #37	@ 0x25
 800efea:	d1f9      	bne.n	800efe0 <_svfiprintf_r+0x54>
 800efec:	ebba 0b04 	subs.w	fp, sl, r4
 800eff0:	d00b      	beq.n	800f00a <_svfiprintf_r+0x7e>
 800eff2:	465b      	mov	r3, fp
 800eff4:	4622      	mov	r2, r4
 800eff6:	4629      	mov	r1, r5
 800eff8:	4638      	mov	r0, r7
 800effa:	f7ff ff6c 	bl	800eed6 <__ssputs_r>
 800effe:	3001      	adds	r0, #1
 800f000:	f000 80a7 	beq.w	800f152 <_svfiprintf_r+0x1c6>
 800f004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f006:	445a      	add	r2, fp
 800f008:	9209      	str	r2, [sp, #36]	@ 0x24
 800f00a:	f89a 3000 	ldrb.w	r3, [sl]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f000 809f 	beq.w	800f152 <_svfiprintf_r+0x1c6>
 800f014:	2300      	movs	r3, #0
 800f016:	f04f 32ff 	mov.w	r2, #4294967295
 800f01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f01e:	f10a 0a01 	add.w	sl, sl, #1
 800f022:	9304      	str	r3, [sp, #16]
 800f024:	9307      	str	r3, [sp, #28]
 800f026:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f02a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f02c:	4654      	mov	r4, sl
 800f02e:	2205      	movs	r2, #5
 800f030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f034:	484e      	ldr	r0, [pc, #312]	@ (800f170 <_svfiprintf_r+0x1e4>)
 800f036:	f7f1 f8db 	bl	80001f0 <memchr>
 800f03a:	9a04      	ldr	r2, [sp, #16]
 800f03c:	b9d8      	cbnz	r0, 800f076 <_svfiprintf_r+0xea>
 800f03e:	06d0      	lsls	r0, r2, #27
 800f040:	bf44      	itt	mi
 800f042:	2320      	movmi	r3, #32
 800f044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f048:	0711      	lsls	r1, r2, #28
 800f04a:	bf44      	itt	mi
 800f04c:	232b      	movmi	r3, #43	@ 0x2b
 800f04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f052:	f89a 3000 	ldrb.w	r3, [sl]
 800f056:	2b2a      	cmp	r3, #42	@ 0x2a
 800f058:	d015      	beq.n	800f086 <_svfiprintf_r+0xfa>
 800f05a:	9a07      	ldr	r2, [sp, #28]
 800f05c:	4654      	mov	r4, sl
 800f05e:	2000      	movs	r0, #0
 800f060:	f04f 0c0a 	mov.w	ip, #10
 800f064:	4621      	mov	r1, r4
 800f066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f06a:	3b30      	subs	r3, #48	@ 0x30
 800f06c:	2b09      	cmp	r3, #9
 800f06e:	d94b      	bls.n	800f108 <_svfiprintf_r+0x17c>
 800f070:	b1b0      	cbz	r0, 800f0a0 <_svfiprintf_r+0x114>
 800f072:	9207      	str	r2, [sp, #28]
 800f074:	e014      	b.n	800f0a0 <_svfiprintf_r+0x114>
 800f076:	eba0 0308 	sub.w	r3, r0, r8
 800f07a:	fa09 f303 	lsl.w	r3, r9, r3
 800f07e:	4313      	orrs	r3, r2
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	46a2      	mov	sl, r4
 800f084:	e7d2      	b.n	800f02c <_svfiprintf_r+0xa0>
 800f086:	9b03      	ldr	r3, [sp, #12]
 800f088:	1d19      	adds	r1, r3, #4
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	9103      	str	r1, [sp, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	bfbb      	ittet	lt
 800f092:	425b      	neglt	r3, r3
 800f094:	f042 0202 	orrlt.w	r2, r2, #2
 800f098:	9307      	strge	r3, [sp, #28]
 800f09a:	9307      	strlt	r3, [sp, #28]
 800f09c:	bfb8      	it	lt
 800f09e:	9204      	strlt	r2, [sp, #16]
 800f0a0:	7823      	ldrb	r3, [r4, #0]
 800f0a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0a4:	d10a      	bne.n	800f0bc <_svfiprintf_r+0x130>
 800f0a6:	7863      	ldrb	r3, [r4, #1]
 800f0a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0aa:	d132      	bne.n	800f112 <_svfiprintf_r+0x186>
 800f0ac:	9b03      	ldr	r3, [sp, #12]
 800f0ae:	1d1a      	adds	r2, r3, #4
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	9203      	str	r2, [sp, #12]
 800f0b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0b8:	3402      	adds	r4, #2
 800f0ba:	9305      	str	r3, [sp, #20]
 800f0bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f180 <_svfiprintf_r+0x1f4>
 800f0c0:	7821      	ldrb	r1, [r4, #0]
 800f0c2:	2203      	movs	r2, #3
 800f0c4:	4650      	mov	r0, sl
 800f0c6:	f7f1 f893 	bl	80001f0 <memchr>
 800f0ca:	b138      	cbz	r0, 800f0dc <_svfiprintf_r+0x150>
 800f0cc:	9b04      	ldr	r3, [sp, #16]
 800f0ce:	eba0 000a 	sub.w	r0, r0, sl
 800f0d2:	2240      	movs	r2, #64	@ 0x40
 800f0d4:	4082      	lsls	r2, r0
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	3401      	adds	r4, #1
 800f0da:	9304      	str	r3, [sp, #16]
 800f0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e0:	4824      	ldr	r0, [pc, #144]	@ (800f174 <_svfiprintf_r+0x1e8>)
 800f0e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0e6:	2206      	movs	r2, #6
 800f0e8:	f7f1 f882 	bl	80001f0 <memchr>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d036      	beq.n	800f15e <_svfiprintf_r+0x1d2>
 800f0f0:	4b21      	ldr	r3, [pc, #132]	@ (800f178 <_svfiprintf_r+0x1ec>)
 800f0f2:	bb1b      	cbnz	r3, 800f13c <_svfiprintf_r+0x1b0>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	3307      	adds	r3, #7
 800f0f8:	f023 0307 	bic.w	r3, r3, #7
 800f0fc:	3308      	adds	r3, #8
 800f0fe:	9303      	str	r3, [sp, #12]
 800f100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f102:	4433      	add	r3, r6
 800f104:	9309      	str	r3, [sp, #36]	@ 0x24
 800f106:	e76a      	b.n	800efde <_svfiprintf_r+0x52>
 800f108:	fb0c 3202 	mla	r2, ip, r2, r3
 800f10c:	460c      	mov	r4, r1
 800f10e:	2001      	movs	r0, #1
 800f110:	e7a8      	b.n	800f064 <_svfiprintf_r+0xd8>
 800f112:	2300      	movs	r3, #0
 800f114:	3401      	adds	r4, #1
 800f116:	9305      	str	r3, [sp, #20]
 800f118:	4619      	mov	r1, r3
 800f11a:	f04f 0c0a 	mov.w	ip, #10
 800f11e:	4620      	mov	r0, r4
 800f120:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f124:	3a30      	subs	r2, #48	@ 0x30
 800f126:	2a09      	cmp	r2, #9
 800f128:	d903      	bls.n	800f132 <_svfiprintf_r+0x1a6>
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0c6      	beq.n	800f0bc <_svfiprintf_r+0x130>
 800f12e:	9105      	str	r1, [sp, #20]
 800f130:	e7c4      	b.n	800f0bc <_svfiprintf_r+0x130>
 800f132:	fb0c 2101 	mla	r1, ip, r1, r2
 800f136:	4604      	mov	r4, r0
 800f138:	2301      	movs	r3, #1
 800f13a:	e7f0      	b.n	800f11e <_svfiprintf_r+0x192>
 800f13c:	ab03      	add	r3, sp, #12
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	462a      	mov	r2, r5
 800f142:	4b0e      	ldr	r3, [pc, #56]	@ (800f17c <_svfiprintf_r+0x1f0>)
 800f144:	a904      	add	r1, sp, #16
 800f146:	4638      	mov	r0, r7
 800f148:	f3af 8000 	nop.w
 800f14c:	1c42      	adds	r2, r0, #1
 800f14e:	4606      	mov	r6, r0
 800f150:	d1d6      	bne.n	800f100 <_svfiprintf_r+0x174>
 800f152:	89ab      	ldrh	r3, [r5, #12]
 800f154:	065b      	lsls	r3, r3, #25
 800f156:	f53f af2d 	bmi.w	800efb4 <_svfiprintf_r+0x28>
 800f15a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f15c:	e72c      	b.n	800efb8 <_svfiprintf_r+0x2c>
 800f15e:	ab03      	add	r3, sp, #12
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	462a      	mov	r2, r5
 800f164:	4b05      	ldr	r3, [pc, #20]	@ (800f17c <_svfiprintf_r+0x1f0>)
 800f166:	a904      	add	r1, sp, #16
 800f168:	4638      	mov	r0, r7
 800f16a:	f000 f879 	bl	800f260 <_printf_i>
 800f16e:	e7ed      	b.n	800f14c <_svfiprintf_r+0x1c0>
 800f170:	080109e0 	.word	0x080109e0
 800f174:	080109ea 	.word	0x080109ea
 800f178:	00000000 	.word	0x00000000
 800f17c:	0800eed7 	.word	0x0800eed7
 800f180:	080109e6 	.word	0x080109e6

0800f184 <_printf_common>:
 800f184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f188:	4616      	mov	r6, r2
 800f18a:	4698      	mov	r8, r3
 800f18c:	688a      	ldr	r2, [r1, #8]
 800f18e:	690b      	ldr	r3, [r1, #16]
 800f190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f194:	4293      	cmp	r3, r2
 800f196:	bfb8      	it	lt
 800f198:	4613      	movlt	r3, r2
 800f19a:	6033      	str	r3, [r6, #0]
 800f19c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1a0:	4607      	mov	r7, r0
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	b10a      	cbz	r2, 800f1aa <_printf_common+0x26>
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	6033      	str	r3, [r6, #0]
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	0699      	lsls	r1, r3, #26
 800f1ae:	bf42      	ittt	mi
 800f1b0:	6833      	ldrmi	r3, [r6, #0]
 800f1b2:	3302      	addmi	r3, #2
 800f1b4:	6033      	strmi	r3, [r6, #0]
 800f1b6:	6825      	ldr	r5, [r4, #0]
 800f1b8:	f015 0506 	ands.w	r5, r5, #6
 800f1bc:	d106      	bne.n	800f1cc <_printf_common+0x48>
 800f1be:	f104 0a19 	add.w	sl, r4, #25
 800f1c2:	68e3      	ldr	r3, [r4, #12]
 800f1c4:	6832      	ldr	r2, [r6, #0]
 800f1c6:	1a9b      	subs	r3, r3, r2
 800f1c8:	42ab      	cmp	r3, r5
 800f1ca:	dc26      	bgt.n	800f21a <_printf_common+0x96>
 800f1cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f1d0:	6822      	ldr	r2, [r4, #0]
 800f1d2:	3b00      	subs	r3, #0
 800f1d4:	bf18      	it	ne
 800f1d6:	2301      	movne	r3, #1
 800f1d8:	0692      	lsls	r2, r2, #26
 800f1da:	d42b      	bmi.n	800f234 <_printf_common+0xb0>
 800f1dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f1e0:	4641      	mov	r1, r8
 800f1e2:	4638      	mov	r0, r7
 800f1e4:	47c8      	blx	r9
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	d01e      	beq.n	800f228 <_printf_common+0xa4>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	6922      	ldr	r2, [r4, #16]
 800f1ee:	f003 0306 	and.w	r3, r3, #6
 800f1f2:	2b04      	cmp	r3, #4
 800f1f4:	bf02      	ittt	eq
 800f1f6:	68e5      	ldreq	r5, [r4, #12]
 800f1f8:	6833      	ldreq	r3, [r6, #0]
 800f1fa:	1aed      	subeq	r5, r5, r3
 800f1fc:	68a3      	ldr	r3, [r4, #8]
 800f1fe:	bf0c      	ite	eq
 800f200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f204:	2500      	movne	r5, #0
 800f206:	4293      	cmp	r3, r2
 800f208:	bfc4      	itt	gt
 800f20a:	1a9b      	subgt	r3, r3, r2
 800f20c:	18ed      	addgt	r5, r5, r3
 800f20e:	2600      	movs	r6, #0
 800f210:	341a      	adds	r4, #26
 800f212:	42b5      	cmp	r5, r6
 800f214:	d11a      	bne.n	800f24c <_printf_common+0xc8>
 800f216:	2000      	movs	r0, #0
 800f218:	e008      	b.n	800f22c <_printf_common+0xa8>
 800f21a:	2301      	movs	r3, #1
 800f21c:	4652      	mov	r2, sl
 800f21e:	4641      	mov	r1, r8
 800f220:	4638      	mov	r0, r7
 800f222:	47c8      	blx	r9
 800f224:	3001      	adds	r0, #1
 800f226:	d103      	bne.n	800f230 <_printf_common+0xac>
 800f228:	f04f 30ff 	mov.w	r0, #4294967295
 800f22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f230:	3501      	adds	r5, #1
 800f232:	e7c6      	b.n	800f1c2 <_printf_common+0x3e>
 800f234:	18e1      	adds	r1, r4, r3
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	2030      	movs	r0, #48	@ 0x30
 800f23a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f23e:	4422      	add	r2, r4
 800f240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f248:	3302      	adds	r3, #2
 800f24a:	e7c7      	b.n	800f1dc <_printf_common+0x58>
 800f24c:	2301      	movs	r3, #1
 800f24e:	4622      	mov	r2, r4
 800f250:	4641      	mov	r1, r8
 800f252:	4638      	mov	r0, r7
 800f254:	47c8      	blx	r9
 800f256:	3001      	adds	r0, #1
 800f258:	d0e6      	beq.n	800f228 <_printf_common+0xa4>
 800f25a:	3601      	adds	r6, #1
 800f25c:	e7d9      	b.n	800f212 <_printf_common+0x8e>
	...

0800f260 <_printf_i>:
 800f260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f264:	7e0f      	ldrb	r7, [r1, #24]
 800f266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f268:	2f78      	cmp	r7, #120	@ 0x78
 800f26a:	4691      	mov	r9, r2
 800f26c:	4680      	mov	r8, r0
 800f26e:	460c      	mov	r4, r1
 800f270:	469a      	mov	sl, r3
 800f272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f276:	d807      	bhi.n	800f288 <_printf_i+0x28>
 800f278:	2f62      	cmp	r7, #98	@ 0x62
 800f27a:	d80a      	bhi.n	800f292 <_printf_i+0x32>
 800f27c:	2f00      	cmp	r7, #0
 800f27e:	f000 80d2 	beq.w	800f426 <_printf_i+0x1c6>
 800f282:	2f58      	cmp	r7, #88	@ 0x58
 800f284:	f000 80b9 	beq.w	800f3fa <_printf_i+0x19a>
 800f288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f28c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f290:	e03a      	b.n	800f308 <_printf_i+0xa8>
 800f292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f296:	2b15      	cmp	r3, #21
 800f298:	d8f6      	bhi.n	800f288 <_printf_i+0x28>
 800f29a:	a101      	add	r1, pc, #4	@ (adr r1, 800f2a0 <_printf_i+0x40>)
 800f29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2a0:	0800f2f9 	.word	0x0800f2f9
 800f2a4:	0800f30d 	.word	0x0800f30d
 800f2a8:	0800f289 	.word	0x0800f289
 800f2ac:	0800f289 	.word	0x0800f289
 800f2b0:	0800f289 	.word	0x0800f289
 800f2b4:	0800f289 	.word	0x0800f289
 800f2b8:	0800f30d 	.word	0x0800f30d
 800f2bc:	0800f289 	.word	0x0800f289
 800f2c0:	0800f289 	.word	0x0800f289
 800f2c4:	0800f289 	.word	0x0800f289
 800f2c8:	0800f289 	.word	0x0800f289
 800f2cc:	0800f40d 	.word	0x0800f40d
 800f2d0:	0800f337 	.word	0x0800f337
 800f2d4:	0800f3c7 	.word	0x0800f3c7
 800f2d8:	0800f289 	.word	0x0800f289
 800f2dc:	0800f289 	.word	0x0800f289
 800f2e0:	0800f42f 	.word	0x0800f42f
 800f2e4:	0800f289 	.word	0x0800f289
 800f2e8:	0800f337 	.word	0x0800f337
 800f2ec:	0800f289 	.word	0x0800f289
 800f2f0:	0800f289 	.word	0x0800f289
 800f2f4:	0800f3cf 	.word	0x0800f3cf
 800f2f8:	6833      	ldr	r3, [r6, #0]
 800f2fa:	1d1a      	adds	r2, r3, #4
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	6032      	str	r2, [r6, #0]
 800f300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f308:	2301      	movs	r3, #1
 800f30a:	e09d      	b.n	800f448 <_printf_i+0x1e8>
 800f30c:	6833      	ldr	r3, [r6, #0]
 800f30e:	6820      	ldr	r0, [r4, #0]
 800f310:	1d19      	adds	r1, r3, #4
 800f312:	6031      	str	r1, [r6, #0]
 800f314:	0606      	lsls	r6, r0, #24
 800f316:	d501      	bpl.n	800f31c <_printf_i+0xbc>
 800f318:	681d      	ldr	r5, [r3, #0]
 800f31a:	e003      	b.n	800f324 <_printf_i+0xc4>
 800f31c:	0645      	lsls	r5, r0, #25
 800f31e:	d5fb      	bpl.n	800f318 <_printf_i+0xb8>
 800f320:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f324:	2d00      	cmp	r5, #0
 800f326:	da03      	bge.n	800f330 <_printf_i+0xd0>
 800f328:	232d      	movs	r3, #45	@ 0x2d
 800f32a:	426d      	negs	r5, r5
 800f32c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f330:	4859      	ldr	r0, [pc, #356]	@ (800f498 <_printf_i+0x238>)
 800f332:	230a      	movs	r3, #10
 800f334:	e011      	b.n	800f35a <_printf_i+0xfa>
 800f336:	6821      	ldr	r1, [r4, #0]
 800f338:	6833      	ldr	r3, [r6, #0]
 800f33a:	0608      	lsls	r0, r1, #24
 800f33c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f340:	d402      	bmi.n	800f348 <_printf_i+0xe8>
 800f342:	0649      	lsls	r1, r1, #25
 800f344:	bf48      	it	mi
 800f346:	b2ad      	uxthmi	r5, r5
 800f348:	2f6f      	cmp	r7, #111	@ 0x6f
 800f34a:	4853      	ldr	r0, [pc, #332]	@ (800f498 <_printf_i+0x238>)
 800f34c:	6033      	str	r3, [r6, #0]
 800f34e:	bf14      	ite	ne
 800f350:	230a      	movne	r3, #10
 800f352:	2308      	moveq	r3, #8
 800f354:	2100      	movs	r1, #0
 800f356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f35a:	6866      	ldr	r6, [r4, #4]
 800f35c:	60a6      	str	r6, [r4, #8]
 800f35e:	2e00      	cmp	r6, #0
 800f360:	bfa2      	ittt	ge
 800f362:	6821      	ldrge	r1, [r4, #0]
 800f364:	f021 0104 	bicge.w	r1, r1, #4
 800f368:	6021      	strge	r1, [r4, #0]
 800f36a:	b90d      	cbnz	r5, 800f370 <_printf_i+0x110>
 800f36c:	2e00      	cmp	r6, #0
 800f36e:	d04b      	beq.n	800f408 <_printf_i+0x1a8>
 800f370:	4616      	mov	r6, r2
 800f372:	fbb5 f1f3 	udiv	r1, r5, r3
 800f376:	fb03 5711 	mls	r7, r3, r1, r5
 800f37a:	5dc7      	ldrb	r7, [r0, r7]
 800f37c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f380:	462f      	mov	r7, r5
 800f382:	42bb      	cmp	r3, r7
 800f384:	460d      	mov	r5, r1
 800f386:	d9f4      	bls.n	800f372 <_printf_i+0x112>
 800f388:	2b08      	cmp	r3, #8
 800f38a:	d10b      	bne.n	800f3a4 <_printf_i+0x144>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	07df      	lsls	r7, r3, #31
 800f390:	d508      	bpl.n	800f3a4 <_printf_i+0x144>
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	6861      	ldr	r1, [r4, #4]
 800f396:	4299      	cmp	r1, r3
 800f398:	bfde      	ittt	le
 800f39a:	2330      	movle	r3, #48	@ 0x30
 800f39c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f3a4:	1b92      	subs	r2, r2, r6
 800f3a6:	6122      	str	r2, [r4, #16]
 800f3a8:	f8cd a000 	str.w	sl, [sp]
 800f3ac:	464b      	mov	r3, r9
 800f3ae:	aa03      	add	r2, sp, #12
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	f7ff fee6 	bl	800f184 <_printf_common>
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	d14a      	bne.n	800f452 <_printf_i+0x1f2>
 800f3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c0:	b004      	add	sp, #16
 800f3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	f043 0320 	orr.w	r3, r3, #32
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	4833      	ldr	r0, [pc, #204]	@ (800f49c <_printf_i+0x23c>)
 800f3d0:	2778      	movs	r7, #120	@ 0x78
 800f3d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f3d6:	6823      	ldr	r3, [r4, #0]
 800f3d8:	6831      	ldr	r1, [r6, #0]
 800f3da:	061f      	lsls	r7, r3, #24
 800f3dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f3e0:	d402      	bmi.n	800f3e8 <_printf_i+0x188>
 800f3e2:	065f      	lsls	r7, r3, #25
 800f3e4:	bf48      	it	mi
 800f3e6:	b2ad      	uxthmi	r5, r5
 800f3e8:	6031      	str	r1, [r6, #0]
 800f3ea:	07d9      	lsls	r1, r3, #31
 800f3ec:	bf44      	itt	mi
 800f3ee:	f043 0320 	orrmi.w	r3, r3, #32
 800f3f2:	6023      	strmi	r3, [r4, #0]
 800f3f4:	b11d      	cbz	r5, 800f3fe <_printf_i+0x19e>
 800f3f6:	2310      	movs	r3, #16
 800f3f8:	e7ac      	b.n	800f354 <_printf_i+0xf4>
 800f3fa:	4827      	ldr	r0, [pc, #156]	@ (800f498 <_printf_i+0x238>)
 800f3fc:	e7e9      	b.n	800f3d2 <_printf_i+0x172>
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	f023 0320 	bic.w	r3, r3, #32
 800f404:	6023      	str	r3, [r4, #0]
 800f406:	e7f6      	b.n	800f3f6 <_printf_i+0x196>
 800f408:	4616      	mov	r6, r2
 800f40a:	e7bd      	b.n	800f388 <_printf_i+0x128>
 800f40c:	6833      	ldr	r3, [r6, #0]
 800f40e:	6825      	ldr	r5, [r4, #0]
 800f410:	6961      	ldr	r1, [r4, #20]
 800f412:	1d18      	adds	r0, r3, #4
 800f414:	6030      	str	r0, [r6, #0]
 800f416:	062e      	lsls	r6, r5, #24
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	d501      	bpl.n	800f420 <_printf_i+0x1c0>
 800f41c:	6019      	str	r1, [r3, #0]
 800f41e:	e002      	b.n	800f426 <_printf_i+0x1c6>
 800f420:	0668      	lsls	r0, r5, #25
 800f422:	d5fb      	bpl.n	800f41c <_printf_i+0x1bc>
 800f424:	8019      	strh	r1, [r3, #0]
 800f426:	2300      	movs	r3, #0
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	4616      	mov	r6, r2
 800f42c:	e7bc      	b.n	800f3a8 <_printf_i+0x148>
 800f42e:	6833      	ldr	r3, [r6, #0]
 800f430:	1d1a      	adds	r2, r3, #4
 800f432:	6032      	str	r2, [r6, #0]
 800f434:	681e      	ldr	r6, [r3, #0]
 800f436:	6862      	ldr	r2, [r4, #4]
 800f438:	2100      	movs	r1, #0
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7f0 fed8 	bl	80001f0 <memchr>
 800f440:	b108      	cbz	r0, 800f446 <_printf_i+0x1e6>
 800f442:	1b80      	subs	r0, r0, r6
 800f444:	6060      	str	r0, [r4, #4]
 800f446:	6863      	ldr	r3, [r4, #4]
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	2300      	movs	r3, #0
 800f44c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f450:	e7aa      	b.n	800f3a8 <_printf_i+0x148>
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	4632      	mov	r2, r6
 800f456:	4649      	mov	r1, r9
 800f458:	4640      	mov	r0, r8
 800f45a:	47d0      	blx	sl
 800f45c:	3001      	adds	r0, #1
 800f45e:	d0ad      	beq.n	800f3bc <_printf_i+0x15c>
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	079b      	lsls	r3, r3, #30
 800f464:	d413      	bmi.n	800f48e <_printf_i+0x22e>
 800f466:	68e0      	ldr	r0, [r4, #12]
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	4298      	cmp	r0, r3
 800f46c:	bfb8      	it	lt
 800f46e:	4618      	movlt	r0, r3
 800f470:	e7a6      	b.n	800f3c0 <_printf_i+0x160>
 800f472:	2301      	movs	r3, #1
 800f474:	4632      	mov	r2, r6
 800f476:	4649      	mov	r1, r9
 800f478:	4640      	mov	r0, r8
 800f47a:	47d0      	blx	sl
 800f47c:	3001      	adds	r0, #1
 800f47e:	d09d      	beq.n	800f3bc <_printf_i+0x15c>
 800f480:	3501      	adds	r5, #1
 800f482:	68e3      	ldr	r3, [r4, #12]
 800f484:	9903      	ldr	r1, [sp, #12]
 800f486:	1a5b      	subs	r3, r3, r1
 800f488:	42ab      	cmp	r3, r5
 800f48a:	dcf2      	bgt.n	800f472 <_printf_i+0x212>
 800f48c:	e7eb      	b.n	800f466 <_printf_i+0x206>
 800f48e:	2500      	movs	r5, #0
 800f490:	f104 0619 	add.w	r6, r4, #25
 800f494:	e7f5      	b.n	800f482 <_printf_i+0x222>
 800f496:	bf00      	nop
 800f498:	080109f1 	.word	0x080109f1
 800f49c:	08010a02 	.word	0x08010a02

0800f4a0 <__sflush_r>:
 800f4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a8:	0716      	lsls	r6, r2, #28
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	460c      	mov	r4, r1
 800f4ae:	d454      	bmi.n	800f55a <__sflush_r+0xba>
 800f4b0:	684b      	ldr	r3, [r1, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dc02      	bgt.n	800f4bc <__sflush_r+0x1c>
 800f4b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	dd48      	ble.n	800f54e <__sflush_r+0xae>
 800f4bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	d045      	beq.n	800f54e <__sflush_r+0xae>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4c8:	682f      	ldr	r7, [r5, #0]
 800f4ca:	6a21      	ldr	r1, [r4, #32]
 800f4cc:	602b      	str	r3, [r5, #0]
 800f4ce:	d030      	beq.n	800f532 <__sflush_r+0x92>
 800f4d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	0759      	lsls	r1, r3, #29
 800f4d6:	d505      	bpl.n	800f4e4 <__sflush_r+0x44>
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	1ad2      	subs	r2, r2, r3
 800f4dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4de:	b10b      	cbz	r3, 800f4e4 <__sflush_r+0x44>
 800f4e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4e2:	1ad2      	subs	r2, r2, r3
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4e8:	6a21      	ldr	r1, [r4, #32]
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	47b0      	blx	r6
 800f4ee:	1c43      	adds	r3, r0, #1
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	d106      	bne.n	800f502 <__sflush_r+0x62>
 800f4f4:	6829      	ldr	r1, [r5, #0]
 800f4f6:	291d      	cmp	r1, #29
 800f4f8:	d82b      	bhi.n	800f552 <__sflush_r+0xb2>
 800f4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800f5a4 <__sflush_r+0x104>)
 800f4fc:	410a      	asrs	r2, r1
 800f4fe:	07d6      	lsls	r6, r2, #31
 800f500:	d427      	bmi.n	800f552 <__sflush_r+0xb2>
 800f502:	2200      	movs	r2, #0
 800f504:	6062      	str	r2, [r4, #4]
 800f506:	04d9      	lsls	r1, r3, #19
 800f508:	6922      	ldr	r2, [r4, #16]
 800f50a:	6022      	str	r2, [r4, #0]
 800f50c:	d504      	bpl.n	800f518 <__sflush_r+0x78>
 800f50e:	1c42      	adds	r2, r0, #1
 800f510:	d101      	bne.n	800f516 <__sflush_r+0x76>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	b903      	cbnz	r3, 800f518 <__sflush_r+0x78>
 800f516:	6560      	str	r0, [r4, #84]	@ 0x54
 800f518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f51a:	602f      	str	r7, [r5, #0]
 800f51c:	b1b9      	cbz	r1, 800f54e <__sflush_r+0xae>
 800f51e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f522:	4299      	cmp	r1, r3
 800f524:	d002      	beq.n	800f52c <__sflush_r+0x8c>
 800f526:	4628      	mov	r0, r5
 800f528:	f7fe fbd2 	bl	800dcd0 <_free_r>
 800f52c:	2300      	movs	r3, #0
 800f52e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f530:	e00d      	b.n	800f54e <__sflush_r+0xae>
 800f532:	2301      	movs	r3, #1
 800f534:	4628      	mov	r0, r5
 800f536:	47b0      	blx	r6
 800f538:	4602      	mov	r2, r0
 800f53a:	1c50      	adds	r0, r2, #1
 800f53c:	d1c9      	bne.n	800f4d2 <__sflush_r+0x32>
 800f53e:	682b      	ldr	r3, [r5, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d0c6      	beq.n	800f4d2 <__sflush_r+0x32>
 800f544:	2b1d      	cmp	r3, #29
 800f546:	d001      	beq.n	800f54c <__sflush_r+0xac>
 800f548:	2b16      	cmp	r3, #22
 800f54a:	d11e      	bne.n	800f58a <__sflush_r+0xea>
 800f54c:	602f      	str	r7, [r5, #0]
 800f54e:	2000      	movs	r0, #0
 800f550:	e022      	b.n	800f598 <__sflush_r+0xf8>
 800f552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f556:	b21b      	sxth	r3, r3
 800f558:	e01b      	b.n	800f592 <__sflush_r+0xf2>
 800f55a:	690f      	ldr	r7, [r1, #16]
 800f55c:	2f00      	cmp	r7, #0
 800f55e:	d0f6      	beq.n	800f54e <__sflush_r+0xae>
 800f560:	0793      	lsls	r3, r2, #30
 800f562:	680e      	ldr	r6, [r1, #0]
 800f564:	bf08      	it	eq
 800f566:	694b      	ldreq	r3, [r1, #20]
 800f568:	600f      	str	r7, [r1, #0]
 800f56a:	bf18      	it	ne
 800f56c:	2300      	movne	r3, #0
 800f56e:	eba6 0807 	sub.w	r8, r6, r7
 800f572:	608b      	str	r3, [r1, #8]
 800f574:	f1b8 0f00 	cmp.w	r8, #0
 800f578:	dde9      	ble.n	800f54e <__sflush_r+0xae>
 800f57a:	6a21      	ldr	r1, [r4, #32]
 800f57c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f57e:	4643      	mov	r3, r8
 800f580:	463a      	mov	r2, r7
 800f582:	4628      	mov	r0, r5
 800f584:	47b0      	blx	r6
 800f586:	2800      	cmp	r0, #0
 800f588:	dc08      	bgt.n	800f59c <__sflush_r+0xfc>
 800f58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f592:	81a3      	strh	r3, [r4, #12]
 800f594:	f04f 30ff 	mov.w	r0, #4294967295
 800f598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f59c:	4407      	add	r7, r0
 800f59e:	eba8 0800 	sub.w	r8, r8, r0
 800f5a2:	e7e7      	b.n	800f574 <__sflush_r+0xd4>
 800f5a4:	dfbffffe 	.word	0xdfbffffe

0800f5a8 <_fflush_r>:
 800f5a8:	b538      	push	{r3, r4, r5, lr}
 800f5aa:	690b      	ldr	r3, [r1, #16]
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	b913      	cbnz	r3, 800f5b8 <_fflush_r+0x10>
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	bd38      	pop	{r3, r4, r5, pc}
 800f5b8:	b118      	cbz	r0, 800f5c2 <_fflush_r+0x1a>
 800f5ba:	6a03      	ldr	r3, [r0, #32]
 800f5bc:	b90b      	cbnz	r3, 800f5c2 <_fflush_r+0x1a>
 800f5be:	f7fe fa33 	bl	800da28 <__sinit>
 800f5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0f3      	beq.n	800f5b2 <_fflush_r+0xa>
 800f5ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5cc:	07d0      	lsls	r0, r2, #31
 800f5ce:	d404      	bmi.n	800f5da <_fflush_r+0x32>
 800f5d0:	0599      	lsls	r1, r3, #22
 800f5d2:	d402      	bmi.n	800f5da <_fflush_r+0x32>
 800f5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5d6:	f7fe fb62 	bl	800dc9e <__retarget_lock_acquire_recursive>
 800f5da:	4628      	mov	r0, r5
 800f5dc:	4621      	mov	r1, r4
 800f5de:	f7ff ff5f 	bl	800f4a0 <__sflush_r>
 800f5e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5e4:	07da      	lsls	r2, r3, #31
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	d4e4      	bmi.n	800f5b4 <_fflush_r+0xc>
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	059b      	lsls	r3, r3, #22
 800f5ee:	d4e1      	bmi.n	800f5b4 <_fflush_r+0xc>
 800f5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5f2:	f7fe fb55 	bl	800dca0 <__retarget_lock_release_recursive>
 800f5f6:	e7dd      	b.n	800f5b4 <_fflush_r+0xc>

0800f5f8 <memmove>:
 800f5f8:	4288      	cmp	r0, r1
 800f5fa:	b510      	push	{r4, lr}
 800f5fc:	eb01 0402 	add.w	r4, r1, r2
 800f600:	d902      	bls.n	800f608 <memmove+0x10>
 800f602:	4284      	cmp	r4, r0
 800f604:	4623      	mov	r3, r4
 800f606:	d807      	bhi.n	800f618 <memmove+0x20>
 800f608:	1e43      	subs	r3, r0, #1
 800f60a:	42a1      	cmp	r1, r4
 800f60c:	d008      	beq.n	800f620 <memmove+0x28>
 800f60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f612:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f616:	e7f8      	b.n	800f60a <memmove+0x12>
 800f618:	4402      	add	r2, r0
 800f61a:	4601      	mov	r1, r0
 800f61c:	428a      	cmp	r2, r1
 800f61e:	d100      	bne.n	800f622 <memmove+0x2a>
 800f620:	bd10      	pop	{r4, pc}
 800f622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f62a:	e7f7      	b.n	800f61c <memmove+0x24>

0800f62c <_sbrk_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	4d06      	ldr	r5, [pc, #24]	@ (800f648 <_sbrk_r+0x1c>)
 800f630:	2300      	movs	r3, #0
 800f632:	4604      	mov	r4, r0
 800f634:	4608      	mov	r0, r1
 800f636:	602b      	str	r3, [r5, #0]
 800f638:	f7f3 ff48 	bl	80034cc <_sbrk>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d102      	bne.n	800f646 <_sbrk_r+0x1a>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b103      	cbz	r3, 800f646 <_sbrk_r+0x1a>
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	200020d0 	.word	0x200020d0

0800f64c <__assert_func>:
 800f64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f64e:	4614      	mov	r4, r2
 800f650:	461a      	mov	r2, r3
 800f652:	4b09      	ldr	r3, [pc, #36]	@ (800f678 <__assert_func+0x2c>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4605      	mov	r5, r0
 800f658:	68d8      	ldr	r0, [r3, #12]
 800f65a:	b954      	cbnz	r4, 800f672 <__assert_func+0x26>
 800f65c:	4b07      	ldr	r3, [pc, #28]	@ (800f67c <__assert_func+0x30>)
 800f65e:	461c      	mov	r4, r3
 800f660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f664:	9100      	str	r1, [sp, #0]
 800f666:	462b      	mov	r3, r5
 800f668:	4905      	ldr	r1, [pc, #20]	@ (800f680 <__assert_func+0x34>)
 800f66a:	f000 f857 	bl	800f71c <fiprintf>
 800f66e:	f000 f867 	bl	800f740 <abort>
 800f672:	4b04      	ldr	r3, [pc, #16]	@ (800f684 <__assert_func+0x38>)
 800f674:	e7f4      	b.n	800f660 <__assert_func+0x14>
 800f676:	bf00      	nop
 800f678:	20000278 	.word	0x20000278
 800f67c:	08010a4e 	.word	0x08010a4e
 800f680:	08010a20 	.word	0x08010a20
 800f684:	08010a13 	.word	0x08010a13

0800f688 <_calloc_r>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	fba1 5402 	umull	r5, r4, r1, r2
 800f68e:	b93c      	cbnz	r4, 800f6a0 <_calloc_r+0x18>
 800f690:	4629      	mov	r1, r5
 800f692:	f7fe fec3 	bl	800e41c <_malloc_r>
 800f696:	4606      	mov	r6, r0
 800f698:	b928      	cbnz	r0, 800f6a6 <_calloc_r+0x1e>
 800f69a:	2600      	movs	r6, #0
 800f69c:	4630      	mov	r0, r6
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
 800f6a0:	220c      	movs	r2, #12
 800f6a2:	6002      	str	r2, [r0, #0]
 800f6a4:	e7f9      	b.n	800f69a <_calloc_r+0x12>
 800f6a6:	462a      	mov	r2, r5
 800f6a8:	4621      	mov	r1, r4
 800f6aa:	f7fe fa56 	bl	800db5a <memset>
 800f6ae:	e7f5      	b.n	800f69c <_calloc_r+0x14>

0800f6b0 <malloc>:
 800f6b0:	4b02      	ldr	r3, [pc, #8]	@ (800f6bc <malloc+0xc>)
 800f6b2:	4601      	mov	r1, r0
 800f6b4:	6818      	ldr	r0, [r3, #0]
 800f6b6:	f7fe beb1 	b.w	800e41c <_malloc_r>
 800f6ba:	bf00      	nop
 800f6bc:	20000278 	.word	0x20000278

0800f6c0 <_realloc_r>:
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	4680      	mov	r8, r0
 800f6c6:	4615      	mov	r5, r2
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	b921      	cbnz	r1, 800f6d6 <_realloc_r+0x16>
 800f6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	f7fe bea3 	b.w	800e41c <_malloc_r>
 800f6d6:	b92a      	cbnz	r2, 800f6e4 <_realloc_r+0x24>
 800f6d8:	f7fe fafa 	bl	800dcd0 <_free_r>
 800f6dc:	2400      	movs	r4, #0
 800f6de:	4620      	mov	r0, r4
 800f6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e4:	f000 f833 	bl	800f74e <_malloc_usable_size_r>
 800f6e8:	4285      	cmp	r5, r0
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	d802      	bhi.n	800f6f4 <_realloc_r+0x34>
 800f6ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6f2:	d8f4      	bhi.n	800f6de <_realloc_r+0x1e>
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	4640      	mov	r0, r8
 800f6f8:	f7fe fe90 	bl	800e41c <_malloc_r>
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	2800      	cmp	r0, #0
 800f700:	d0ec      	beq.n	800f6dc <_realloc_r+0x1c>
 800f702:	42b5      	cmp	r5, r6
 800f704:	462a      	mov	r2, r5
 800f706:	4621      	mov	r1, r4
 800f708:	bf28      	it	cs
 800f70a:	4632      	movcs	r2, r6
 800f70c:	f7fe fac9 	bl	800dca2 <memcpy>
 800f710:	4621      	mov	r1, r4
 800f712:	4640      	mov	r0, r8
 800f714:	f7fe fadc 	bl	800dcd0 <_free_r>
 800f718:	463c      	mov	r4, r7
 800f71a:	e7e0      	b.n	800f6de <_realloc_r+0x1e>

0800f71c <fiprintf>:
 800f71c:	b40e      	push	{r1, r2, r3}
 800f71e:	b503      	push	{r0, r1, lr}
 800f720:	4601      	mov	r1, r0
 800f722:	ab03      	add	r3, sp, #12
 800f724:	4805      	ldr	r0, [pc, #20]	@ (800f73c <fiprintf+0x20>)
 800f726:	f853 2b04 	ldr.w	r2, [r3], #4
 800f72a:	6800      	ldr	r0, [r0, #0]
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	f000 f83f 	bl	800f7b0 <_vfiprintf_r>
 800f732:	b002      	add	sp, #8
 800f734:	f85d eb04 	ldr.w	lr, [sp], #4
 800f738:	b003      	add	sp, #12
 800f73a:	4770      	bx	lr
 800f73c:	20000278 	.word	0x20000278

0800f740 <abort>:
 800f740:	b508      	push	{r3, lr}
 800f742:	2006      	movs	r0, #6
 800f744:	f000 fa08 	bl	800fb58 <raise>
 800f748:	2001      	movs	r0, #1
 800f74a:	f7f3 fe47 	bl	80033dc <_exit>

0800f74e <_malloc_usable_size_r>:
 800f74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f752:	1f18      	subs	r0, r3, #4
 800f754:	2b00      	cmp	r3, #0
 800f756:	bfbc      	itt	lt
 800f758:	580b      	ldrlt	r3, [r1, r0]
 800f75a:	18c0      	addlt	r0, r0, r3
 800f75c:	4770      	bx	lr

0800f75e <__sfputc_r>:
 800f75e:	6893      	ldr	r3, [r2, #8]
 800f760:	3b01      	subs	r3, #1
 800f762:	2b00      	cmp	r3, #0
 800f764:	b410      	push	{r4}
 800f766:	6093      	str	r3, [r2, #8]
 800f768:	da08      	bge.n	800f77c <__sfputc_r+0x1e>
 800f76a:	6994      	ldr	r4, [r2, #24]
 800f76c:	42a3      	cmp	r3, r4
 800f76e:	db01      	blt.n	800f774 <__sfputc_r+0x16>
 800f770:	290a      	cmp	r1, #10
 800f772:	d103      	bne.n	800f77c <__sfputc_r+0x1e>
 800f774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f778:	f000 b932 	b.w	800f9e0 <__swbuf_r>
 800f77c:	6813      	ldr	r3, [r2, #0]
 800f77e:	1c58      	adds	r0, r3, #1
 800f780:	6010      	str	r0, [r2, #0]
 800f782:	7019      	strb	r1, [r3, #0]
 800f784:	4608      	mov	r0, r1
 800f786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <__sfputs_r>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	4606      	mov	r6, r0
 800f790:	460f      	mov	r7, r1
 800f792:	4614      	mov	r4, r2
 800f794:	18d5      	adds	r5, r2, r3
 800f796:	42ac      	cmp	r4, r5
 800f798:	d101      	bne.n	800f79e <__sfputs_r+0x12>
 800f79a:	2000      	movs	r0, #0
 800f79c:	e007      	b.n	800f7ae <__sfputs_r+0x22>
 800f79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a2:	463a      	mov	r2, r7
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7ff ffda 	bl	800f75e <__sfputc_r>
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	d1f3      	bne.n	800f796 <__sfputs_r+0xa>
 800f7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7b0 <_vfiprintf_r>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	b09d      	sub	sp, #116	@ 0x74
 800f7b8:	4614      	mov	r4, r2
 800f7ba:	4698      	mov	r8, r3
 800f7bc:	4606      	mov	r6, r0
 800f7be:	b118      	cbz	r0, 800f7c8 <_vfiprintf_r+0x18>
 800f7c0:	6a03      	ldr	r3, [r0, #32]
 800f7c2:	b90b      	cbnz	r3, 800f7c8 <_vfiprintf_r+0x18>
 800f7c4:	f7fe f930 	bl	800da28 <__sinit>
 800f7c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7ca:	07d9      	lsls	r1, r3, #31
 800f7cc:	d405      	bmi.n	800f7da <_vfiprintf_r+0x2a>
 800f7ce:	89ab      	ldrh	r3, [r5, #12]
 800f7d0:	059a      	lsls	r2, r3, #22
 800f7d2:	d402      	bmi.n	800f7da <_vfiprintf_r+0x2a>
 800f7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7d6:	f7fe fa62 	bl	800dc9e <__retarget_lock_acquire_recursive>
 800f7da:	89ab      	ldrh	r3, [r5, #12]
 800f7dc:	071b      	lsls	r3, r3, #28
 800f7de:	d501      	bpl.n	800f7e4 <_vfiprintf_r+0x34>
 800f7e0:	692b      	ldr	r3, [r5, #16]
 800f7e2:	b99b      	cbnz	r3, 800f80c <_vfiprintf_r+0x5c>
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f000 f938 	bl	800fa5c <__swsetup_r>
 800f7ec:	b170      	cbz	r0, 800f80c <_vfiprintf_r+0x5c>
 800f7ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7f0:	07dc      	lsls	r4, r3, #31
 800f7f2:	d504      	bpl.n	800f7fe <_vfiprintf_r+0x4e>
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f8:	b01d      	add	sp, #116	@ 0x74
 800f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fe:	89ab      	ldrh	r3, [r5, #12]
 800f800:	0598      	lsls	r0, r3, #22
 800f802:	d4f7      	bmi.n	800f7f4 <_vfiprintf_r+0x44>
 800f804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f806:	f7fe fa4b 	bl	800dca0 <__retarget_lock_release_recursive>
 800f80a:	e7f3      	b.n	800f7f4 <_vfiprintf_r+0x44>
 800f80c:	2300      	movs	r3, #0
 800f80e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f810:	2320      	movs	r3, #32
 800f812:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f816:	f8cd 800c 	str.w	r8, [sp, #12]
 800f81a:	2330      	movs	r3, #48	@ 0x30
 800f81c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f9cc <_vfiprintf_r+0x21c>
 800f820:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f824:	f04f 0901 	mov.w	r9, #1
 800f828:	4623      	mov	r3, r4
 800f82a:	469a      	mov	sl, r3
 800f82c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f830:	b10a      	cbz	r2, 800f836 <_vfiprintf_r+0x86>
 800f832:	2a25      	cmp	r2, #37	@ 0x25
 800f834:	d1f9      	bne.n	800f82a <_vfiprintf_r+0x7a>
 800f836:	ebba 0b04 	subs.w	fp, sl, r4
 800f83a:	d00b      	beq.n	800f854 <_vfiprintf_r+0xa4>
 800f83c:	465b      	mov	r3, fp
 800f83e:	4622      	mov	r2, r4
 800f840:	4629      	mov	r1, r5
 800f842:	4630      	mov	r0, r6
 800f844:	f7ff ffa2 	bl	800f78c <__sfputs_r>
 800f848:	3001      	adds	r0, #1
 800f84a:	f000 80a7 	beq.w	800f99c <_vfiprintf_r+0x1ec>
 800f84e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f850:	445a      	add	r2, fp
 800f852:	9209      	str	r2, [sp, #36]	@ 0x24
 800f854:	f89a 3000 	ldrb.w	r3, [sl]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f000 809f 	beq.w	800f99c <_vfiprintf_r+0x1ec>
 800f85e:	2300      	movs	r3, #0
 800f860:	f04f 32ff 	mov.w	r2, #4294967295
 800f864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f868:	f10a 0a01 	add.w	sl, sl, #1
 800f86c:	9304      	str	r3, [sp, #16]
 800f86e:	9307      	str	r3, [sp, #28]
 800f870:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f874:	931a      	str	r3, [sp, #104]	@ 0x68
 800f876:	4654      	mov	r4, sl
 800f878:	2205      	movs	r2, #5
 800f87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87e:	4853      	ldr	r0, [pc, #332]	@ (800f9cc <_vfiprintf_r+0x21c>)
 800f880:	f7f0 fcb6 	bl	80001f0 <memchr>
 800f884:	9a04      	ldr	r2, [sp, #16]
 800f886:	b9d8      	cbnz	r0, 800f8c0 <_vfiprintf_r+0x110>
 800f888:	06d1      	lsls	r1, r2, #27
 800f88a:	bf44      	itt	mi
 800f88c:	2320      	movmi	r3, #32
 800f88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f892:	0713      	lsls	r3, r2, #28
 800f894:	bf44      	itt	mi
 800f896:	232b      	movmi	r3, #43	@ 0x2b
 800f898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f89c:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8a2:	d015      	beq.n	800f8d0 <_vfiprintf_r+0x120>
 800f8a4:	9a07      	ldr	r2, [sp, #28]
 800f8a6:	4654      	mov	r4, sl
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	f04f 0c0a 	mov.w	ip, #10
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8b4:	3b30      	subs	r3, #48	@ 0x30
 800f8b6:	2b09      	cmp	r3, #9
 800f8b8:	d94b      	bls.n	800f952 <_vfiprintf_r+0x1a2>
 800f8ba:	b1b0      	cbz	r0, 800f8ea <_vfiprintf_r+0x13a>
 800f8bc:	9207      	str	r2, [sp, #28]
 800f8be:	e014      	b.n	800f8ea <_vfiprintf_r+0x13a>
 800f8c0:	eba0 0308 	sub.w	r3, r0, r8
 800f8c4:	fa09 f303 	lsl.w	r3, r9, r3
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	9304      	str	r3, [sp, #16]
 800f8cc:	46a2      	mov	sl, r4
 800f8ce:	e7d2      	b.n	800f876 <_vfiprintf_r+0xc6>
 800f8d0:	9b03      	ldr	r3, [sp, #12]
 800f8d2:	1d19      	adds	r1, r3, #4
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	9103      	str	r1, [sp, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	bfbb      	ittet	lt
 800f8dc:	425b      	neglt	r3, r3
 800f8de:	f042 0202 	orrlt.w	r2, r2, #2
 800f8e2:	9307      	strge	r3, [sp, #28]
 800f8e4:	9307      	strlt	r3, [sp, #28]
 800f8e6:	bfb8      	it	lt
 800f8e8:	9204      	strlt	r2, [sp, #16]
 800f8ea:	7823      	ldrb	r3, [r4, #0]
 800f8ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8ee:	d10a      	bne.n	800f906 <_vfiprintf_r+0x156>
 800f8f0:	7863      	ldrb	r3, [r4, #1]
 800f8f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8f4:	d132      	bne.n	800f95c <_vfiprintf_r+0x1ac>
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	1d1a      	adds	r2, r3, #4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	9203      	str	r2, [sp, #12]
 800f8fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f902:	3402      	adds	r4, #2
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f9dc <_vfiprintf_r+0x22c>
 800f90a:	7821      	ldrb	r1, [r4, #0]
 800f90c:	2203      	movs	r2, #3
 800f90e:	4650      	mov	r0, sl
 800f910:	f7f0 fc6e 	bl	80001f0 <memchr>
 800f914:	b138      	cbz	r0, 800f926 <_vfiprintf_r+0x176>
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	eba0 000a 	sub.w	r0, r0, sl
 800f91c:	2240      	movs	r2, #64	@ 0x40
 800f91e:	4082      	lsls	r2, r0
 800f920:	4313      	orrs	r3, r2
 800f922:	3401      	adds	r4, #1
 800f924:	9304      	str	r3, [sp, #16]
 800f926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f92a:	4829      	ldr	r0, [pc, #164]	@ (800f9d0 <_vfiprintf_r+0x220>)
 800f92c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f930:	2206      	movs	r2, #6
 800f932:	f7f0 fc5d 	bl	80001f0 <memchr>
 800f936:	2800      	cmp	r0, #0
 800f938:	d03f      	beq.n	800f9ba <_vfiprintf_r+0x20a>
 800f93a:	4b26      	ldr	r3, [pc, #152]	@ (800f9d4 <_vfiprintf_r+0x224>)
 800f93c:	bb1b      	cbnz	r3, 800f986 <_vfiprintf_r+0x1d6>
 800f93e:	9b03      	ldr	r3, [sp, #12]
 800f940:	3307      	adds	r3, #7
 800f942:	f023 0307 	bic.w	r3, r3, #7
 800f946:	3308      	adds	r3, #8
 800f948:	9303      	str	r3, [sp, #12]
 800f94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f94c:	443b      	add	r3, r7
 800f94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f950:	e76a      	b.n	800f828 <_vfiprintf_r+0x78>
 800f952:	fb0c 3202 	mla	r2, ip, r2, r3
 800f956:	460c      	mov	r4, r1
 800f958:	2001      	movs	r0, #1
 800f95a:	e7a8      	b.n	800f8ae <_vfiprintf_r+0xfe>
 800f95c:	2300      	movs	r3, #0
 800f95e:	3401      	adds	r4, #1
 800f960:	9305      	str	r3, [sp, #20]
 800f962:	4619      	mov	r1, r3
 800f964:	f04f 0c0a 	mov.w	ip, #10
 800f968:	4620      	mov	r0, r4
 800f96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f96e:	3a30      	subs	r2, #48	@ 0x30
 800f970:	2a09      	cmp	r2, #9
 800f972:	d903      	bls.n	800f97c <_vfiprintf_r+0x1cc>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d0c6      	beq.n	800f906 <_vfiprintf_r+0x156>
 800f978:	9105      	str	r1, [sp, #20]
 800f97a:	e7c4      	b.n	800f906 <_vfiprintf_r+0x156>
 800f97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f980:	4604      	mov	r4, r0
 800f982:	2301      	movs	r3, #1
 800f984:	e7f0      	b.n	800f968 <_vfiprintf_r+0x1b8>
 800f986:	ab03      	add	r3, sp, #12
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	462a      	mov	r2, r5
 800f98c:	4b12      	ldr	r3, [pc, #72]	@ (800f9d8 <_vfiprintf_r+0x228>)
 800f98e:	a904      	add	r1, sp, #16
 800f990:	4630      	mov	r0, r6
 800f992:	f3af 8000 	nop.w
 800f996:	4607      	mov	r7, r0
 800f998:	1c78      	adds	r0, r7, #1
 800f99a:	d1d6      	bne.n	800f94a <_vfiprintf_r+0x19a>
 800f99c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f99e:	07d9      	lsls	r1, r3, #31
 800f9a0:	d405      	bmi.n	800f9ae <_vfiprintf_r+0x1fe>
 800f9a2:	89ab      	ldrh	r3, [r5, #12]
 800f9a4:	059a      	lsls	r2, r3, #22
 800f9a6:	d402      	bmi.n	800f9ae <_vfiprintf_r+0x1fe>
 800f9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9aa:	f7fe f979 	bl	800dca0 <__retarget_lock_release_recursive>
 800f9ae:	89ab      	ldrh	r3, [r5, #12]
 800f9b0:	065b      	lsls	r3, r3, #25
 800f9b2:	f53f af1f 	bmi.w	800f7f4 <_vfiprintf_r+0x44>
 800f9b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9b8:	e71e      	b.n	800f7f8 <_vfiprintf_r+0x48>
 800f9ba:	ab03      	add	r3, sp, #12
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	462a      	mov	r2, r5
 800f9c0:	4b05      	ldr	r3, [pc, #20]	@ (800f9d8 <_vfiprintf_r+0x228>)
 800f9c2:	a904      	add	r1, sp, #16
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	f7ff fc4b 	bl	800f260 <_printf_i>
 800f9ca:	e7e4      	b.n	800f996 <_vfiprintf_r+0x1e6>
 800f9cc:	080109e0 	.word	0x080109e0
 800f9d0:	080109ea 	.word	0x080109ea
 800f9d4:	00000000 	.word	0x00000000
 800f9d8:	0800f78d 	.word	0x0800f78d
 800f9dc:	080109e6 	.word	0x080109e6

0800f9e0 <__swbuf_r>:
 800f9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e2:	460e      	mov	r6, r1
 800f9e4:	4614      	mov	r4, r2
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	b118      	cbz	r0, 800f9f2 <__swbuf_r+0x12>
 800f9ea:	6a03      	ldr	r3, [r0, #32]
 800f9ec:	b90b      	cbnz	r3, 800f9f2 <__swbuf_r+0x12>
 800f9ee:	f7fe f81b 	bl	800da28 <__sinit>
 800f9f2:	69a3      	ldr	r3, [r4, #24]
 800f9f4:	60a3      	str	r3, [r4, #8]
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	071a      	lsls	r2, r3, #28
 800f9fa:	d501      	bpl.n	800fa00 <__swbuf_r+0x20>
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	b943      	cbnz	r3, 800fa12 <__swbuf_r+0x32>
 800fa00:	4621      	mov	r1, r4
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 f82a 	bl	800fa5c <__swsetup_r>
 800fa08:	b118      	cbz	r0, 800fa12 <__swbuf_r+0x32>
 800fa0a:	f04f 37ff 	mov.w	r7, #4294967295
 800fa0e:	4638      	mov	r0, r7
 800fa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	6922      	ldr	r2, [r4, #16]
 800fa16:	1a98      	subs	r0, r3, r2
 800fa18:	6963      	ldr	r3, [r4, #20]
 800fa1a:	b2f6      	uxtb	r6, r6
 800fa1c:	4283      	cmp	r3, r0
 800fa1e:	4637      	mov	r7, r6
 800fa20:	dc05      	bgt.n	800fa2e <__swbuf_r+0x4e>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f7ff fdbf 	bl	800f5a8 <_fflush_r>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d1ed      	bne.n	800fa0a <__swbuf_r+0x2a>
 800fa2e:	68a3      	ldr	r3, [r4, #8]
 800fa30:	3b01      	subs	r3, #1
 800fa32:	60a3      	str	r3, [r4, #8]
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	6022      	str	r2, [r4, #0]
 800fa3a:	701e      	strb	r6, [r3, #0]
 800fa3c:	6962      	ldr	r2, [r4, #20]
 800fa3e:	1c43      	adds	r3, r0, #1
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d004      	beq.n	800fa4e <__swbuf_r+0x6e>
 800fa44:	89a3      	ldrh	r3, [r4, #12]
 800fa46:	07db      	lsls	r3, r3, #31
 800fa48:	d5e1      	bpl.n	800fa0e <__swbuf_r+0x2e>
 800fa4a:	2e0a      	cmp	r6, #10
 800fa4c:	d1df      	bne.n	800fa0e <__swbuf_r+0x2e>
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4628      	mov	r0, r5
 800fa52:	f7ff fda9 	bl	800f5a8 <_fflush_r>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d0d9      	beq.n	800fa0e <__swbuf_r+0x2e>
 800fa5a:	e7d6      	b.n	800fa0a <__swbuf_r+0x2a>

0800fa5c <__swsetup_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4b29      	ldr	r3, [pc, #164]	@ (800fb04 <__swsetup_r+0xa8>)
 800fa60:	4605      	mov	r5, r0
 800fa62:	6818      	ldr	r0, [r3, #0]
 800fa64:	460c      	mov	r4, r1
 800fa66:	b118      	cbz	r0, 800fa70 <__swsetup_r+0x14>
 800fa68:	6a03      	ldr	r3, [r0, #32]
 800fa6a:	b90b      	cbnz	r3, 800fa70 <__swsetup_r+0x14>
 800fa6c:	f7fd ffdc 	bl	800da28 <__sinit>
 800fa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa74:	0719      	lsls	r1, r3, #28
 800fa76:	d422      	bmi.n	800fabe <__swsetup_r+0x62>
 800fa78:	06da      	lsls	r2, r3, #27
 800fa7a:	d407      	bmi.n	800fa8c <__swsetup_r+0x30>
 800fa7c:	2209      	movs	r2, #9
 800fa7e:	602a      	str	r2, [r5, #0]
 800fa80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	f04f 30ff 	mov.w	r0, #4294967295
 800fa8a:	e033      	b.n	800faf4 <__swsetup_r+0x98>
 800fa8c:	0758      	lsls	r0, r3, #29
 800fa8e:	d512      	bpl.n	800fab6 <__swsetup_r+0x5a>
 800fa90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa92:	b141      	cbz	r1, 800faa6 <__swsetup_r+0x4a>
 800fa94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa98:	4299      	cmp	r1, r3
 800fa9a:	d002      	beq.n	800faa2 <__swsetup_r+0x46>
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f7fe f917 	bl	800dcd0 <_free_r>
 800faa2:	2300      	movs	r3, #0
 800faa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800faa6:	89a3      	ldrh	r3, [r4, #12]
 800faa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800faac:	81a3      	strh	r3, [r4, #12]
 800faae:	2300      	movs	r3, #0
 800fab0:	6063      	str	r3, [r4, #4]
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	6023      	str	r3, [r4, #0]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	f043 0308 	orr.w	r3, r3, #8
 800fabc:	81a3      	strh	r3, [r4, #12]
 800fabe:	6923      	ldr	r3, [r4, #16]
 800fac0:	b94b      	cbnz	r3, 800fad6 <__swsetup_r+0x7a>
 800fac2:	89a3      	ldrh	r3, [r4, #12]
 800fac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800facc:	d003      	beq.n	800fad6 <__swsetup_r+0x7a>
 800face:	4621      	mov	r1, r4
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 f883 	bl	800fbdc <__smakebuf_r>
 800fad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fada:	f013 0201 	ands.w	r2, r3, #1
 800fade:	d00a      	beq.n	800faf6 <__swsetup_r+0x9a>
 800fae0:	2200      	movs	r2, #0
 800fae2:	60a2      	str	r2, [r4, #8]
 800fae4:	6962      	ldr	r2, [r4, #20]
 800fae6:	4252      	negs	r2, r2
 800fae8:	61a2      	str	r2, [r4, #24]
 800faea:	6922      	ldr	r2, [r4, #16]
 800faec:	b942      	cbnz	r2, 800fb00 <__swsetup_r+0xa4>
 800faee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faf2:	d1c5      	bne.n	800fa80 <__swsetup_r+0x24>
 800faf4:	bd38      	pop	{r3, r4, r5, pc}
 800faf6:	0799      	lsls	r1, r3, #30
 800faf8:	bf58      	it	pl
 800fafa:	6962      	ldrpl	r2, [r4, #20]
 800fafc:	60a2      	str	r2, [r4, #8]
 800fafe:	e7f4      	b.n	800faea <__swsetup_r+0x8e>
 800fb00:	2000      	movs	r0, #0
 800fb02:	e7f7      	b.n	800faf4 <__swsetup_r+0x98>
 800fb04:	20000278 	.word	0x20000278

0800fb08 <_raise_r>:
 800fb08:	291f      	cmp	r1, #31
 800fb0a:	b538      	push	{r3, r4, r5, lr}
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	460c      	mov	r4, r1
 800fb10:	d904      	bls.n	800fb1c <_raise_r+0x14>
 800fb12:	2316      	movs	r3, #22
 800fb14:	6003      	str	r3, [r0, #0]
 800fb16:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1a:	bd38      	pop	{r3, r4, r5, pc}
 800fb1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb1e:	b112      	cbz	r2, 800fb26 <_raise_r+0x1e>
 800fb20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb24:	b94b      	cbnz	r3, 800fb3a <_raise_r+0x32>
 800fb26:	4628      	mov	r0, r5
 800fb28:	f000 f830 	bl	800fb8c <_getpid_r>
 800fb2c:	4622      	mov	r2, r4
 800fb2e:	4601      	mov	r1, r0
 800fb30:	4628      	mov	r0, r5
 800fb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb36:	f000 b817 	b.w	800fb68 <_kill_r>
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d00a      	beq.n	800fb54 <_raise_r+0x4c>
 800fb3e:	1c59      	adds	r1, r3, #1
 800fb40:	d103      	bne.n	800fb4a <_raise_r+0x42>
 800fb42:	2316      	movs	r3, #22
 800fb44:	6003      	str	r3, [r0, #0]
 800fb46:	2001      	movs	r0, #1
 800fb48:	e7e7      	b.n	800fb1a <_raise_r+0x12>
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb50:	4620      	mov	r0, r4
 800fb52:	4798      	blx	r3
 800fb54:	2000      	movs	r0, #0
 800fb56:	e7e0      	b.n	800fb1a <_raise_r+0x12>

0800fb58 <raise>:
 800fb58:	4b02      	ldr	r3, [pc, #8]	@ (800fb64 <raise+0xc>)
 800fb5a:	4601      	mov	r1, r0
 800fb5c:	6818      	ldr	r0, [r3, #0]
 800fb5e:	f7ff bfd3 	b.w	800fb08 <_raise_r>
 800fb62:	bf00      	nop
 800fb64:	20000278 	.word	0x20000278

0800fb68 <_kill_r>:
 800fb68:	b538      	push	{r3, r4, r5, lr}
 800fb6a:	4d07      	ldr	r5, [pc, #28]	@ (800fb88 <_kill_r+0x20>)
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4604      	mov	r4, r0
 800fb70:	4608      	mov	r0, r1
 800fb72:	4611      	mov	r1, r2
 800fb74:	602b      	str	r3, [r5, #0]
 800fb76:	f7f3 fc21 	bl	80033bc <_kill>
 800fb7a:	1c43      	adds	r3, r0, #1
 800fb7c:	d102      	bne.n	800fb84 <_kill_r+0x1c>
 800fb7e:	682b      	ldr	r3, [r5, #0]
 800fb80:	b103      	cbz	r3, 800fb84 <_kill_r+0x1c>
 800fb82:	6023      	str	r3, [r4, #0]
 800fb84:	bd38      	pop	{r3, r4, r5, pc}
 800fb86:	bf00      	nop
 800fb88:	200020d0 	.word	0x200020d0

0800fb8c <_getpid_r>:
 800fb8c:	f7f3 bc0e 	b.w	80033ac <_getpid>

0800fb90 <__swhatbuf_r>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	460c      	mov	r4, r1
 800fb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	b096      	sub	sp, #88	@ 0x58
 800fb9c:	4615      	mov	r5, r2
 800fb9e:	461e      	mov	r6, r3
 800fba0:	da0d      	bge.n	800fbbe <__swhatbuf_r+0x2e>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fba8:	f04f 0100 	mov.w	r1, #0
 800fbac:	bf14      	ite	ne
 800fbae:	2340      	movne	r3, #64	@ 0x40
 800fbb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	6031      	str	r1, [r6, #0]
 800fbb8:	602b      	str	r3, [r5, #0]
 800fbba:	b016      	add	sp, #88	@ 0x58
 800fbbc:	bd70      	pop	{r4, r5, r6, pc}
 800fbbe:	466a      	mov	r2, sp
 800fbc0:	f000 f848 	bl	800fc54 <_fstat_r>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	dbec      	blt.n	800fba2 <__swhatbuf_r+0x12>
 800fbc8:	9901      	ldr	r1, [sp, #4]
 800fbca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fbce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fbd2:	4259      	negs	r1, r3
 800fbd4:	4159      	adcs	r1, r3
 800fbd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbda:	e7eb      	b.n	800fbb4 <__swhatbuf_r+0x24>

0800fbdc <__smakebuf_r>:
 800fbdc:	898b      	ldrh	r3, [r1, #12]
 800fbde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbe0:	079d      	lsls	r5, r3, #30
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	d507      	bpl.n	800fbf8 <__smakebuf_r+0x1c>
 800fbe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	6123      	str	r3, [r4, #16]
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	6163      	str	r3, [r4, #20]
 800fbf4:	b003      	add	sp, #12
 800fbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbf8:	ab01      	add	r3, sp, #4
 800fbfa:	466a      	mov	r2, sp
 800fbfc:	f7ff ffc8 	bl	800fb90 <__swhatbuf_r>
 800fc00:	9f00      	ldr	r7, [sp, #0]
 800fc02:	4605      	mov	r5, r0
 800fc04:	4639      	mov	r1, r7
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7fe fc08 	bl	800e41c <_malloc_r>
 800fc0c:	b948      	cbnz	r0, 800fc22 <__smakebuf_r+0x46>
 800fc0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc12:	059a      	lsls	r2, r3, #22
 800fc14:	d4ee      	bmi.n	800fbf4 <__smakebuf_r+0x18>
 800fc16:	f023 0303 	bic.w	r3, r3, #3
 800fc1a:	f043 0302 	orr.w	r3, r3, #2
 800fc1e:	81a3      	strh	r3, [r4, #12]
 800fc20:	e7e2      	b.n	800fbe8 <__smakebuf_r+0xc>
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	6020      	str	r0, [r4, #0]
 800fc26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc2a:	81a3      	strh	r3, [r4, #12]
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc32:	b15b      	cbz	r3, 800fc4c <__smakebuf_r+0x70>
 800fc34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f000 f81d 	bl	800fc78 <_isatty_r>
 800fc3e:	b128      	cbz	r0, 800fc4c <__smakebuf_r+0x70>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f023 0303 	bic.w	r3, r3, #3
 800fc46:	f043 0301 	orr.w	r3, r3, #1
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	431d      	orrs	r5, r3
 800fc50:	81a5      	strh	r5, [r4, #12]
 800fc52:	e7cf      	b.n	800fbf4 <__smakebuf_r+0x18>

0800fc54 <_fstat_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4d07      	ldr	r5, [pc, #28]	@ (800fc74 <_fstat_r+0x20>)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	4611      	mov	r1, r2
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	f7f3 fc0b 	bl	800347c <_fstat>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	d102      	bne.n	800fc70 <_fstat_r+0x1c>
 800fc6a:	682b      	ldr	r3, [r5, #0]
 800fc6c:	b103      	cbz	r3, 800fc70 <_fstat_r+0x1c>
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	bd38      	pop	{r3, r4, r5, pc}
 800fc72:	bf00      	nop
 800fc74:	200020d0 	.word	0x200020d0

0800fc78 <_isatty_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4d06      	ldr	r5, [pc, #24]	@ (800fc94 <_isatty_r+0x1c>)
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4604      	mov	r4, r0
 800fc80:	4608      	mov	r0, r1
 800fc82:	602b      	str	r3, [r5, #0]
 800fc84:	f7f3 fc0a 	bl	800349c <_isatty>
 800fc88:	1c43      	adds	r3, r0, #1
 800fc8a:	d102      	bne.n	800fc92 <_isatty_r+0x1a>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	b103      	cbz	r3, 800fc92 <_isatty_r+0x1a>
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	200020d0 	.word	0x200020d0

0800fc98 <sqrt>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	ed2d 8b02 	vpush	{d8}
 800fc9e:	ec55 4b10 	vmov	r4, r5, d0
 800fca2:	f000 fa27 	bl	80100f4 <__ieee754_sqrt>
 800fca6:	4622      	mov	r2, r4
 800fca8:	462b      	mov	r3, r5
 800fcaa:	4620      	mov	r0, r4
 800fcac:	4629      	mov	r1, r5
 800fcae:	eeb0 8a40 	vmov.f32	s16, s0
 800fcb2:	eef0 8a60 	vmov.f32	s17, s1
 800fcb6:	f7f0 ff41 	bl	8000b3c <__aeabi_dcmpun>
 800fcba:	b990      	cbnz	r0, 800fce2 <sqrt+0x4a>
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	f7f0 ff12 	bl	8000aec <__aeabi_dcmplt>
 800fcc8:	b158      	cbz	r0, 800fce2 <sqrt+0x4a>
 800fcca:	f7fd ffbd 	bl	800dc48 <__errno>
 800fcce:	2321      	movs	r3, #33	@ 0x21
 800fcd0:	6003      	str	r3, [r0, #0]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	4619      	mov	r1, r3
 800fcda:	f7f0 fdbf 	bl	800085c <__aeabi_ddiv>
 800fcde:	ec41 0b18 	vmov	d8, r0, r1
 800fce2:	eeb0 0a48 	vmov.f32	s0, s16
 800fce6:	eef0 0a68 	vmov.f32	s1, s17
 800fcea:	ecbd 8b02 	vpop	{d8}
 800fcee:	bd38      	pop	{r3, r4, r5, pc}

0800fcf0 <atan>:
 800fcf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	ec55 4b10 	vmov	r4, r5, d0
 800fcf8:	4bbf      	ldr	r3, [pc, #764]	@ (800fff8 <atan+0x308>)
 800fcfa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fcfe:	429e      	cmp	r6, r3
 800fd00:	46ab      	mov	fp, r5
 800fd02:	d918      	bls.n	800fd36 <atan+0x46>
 800fd04:	4bbd      	ldr	r3, [pc, #756]	@ (800fffc <atan+0x30c>)
 800fd06:	429e      	cmp	r6, r3
 800fd08:	d801      	bhi.n	800fd0e <atan+0x1e>
 800fd0a:	d109      	bne.n	800fd20 <atan+0x30>
 800fd0c:	b144      	cbz	r4, 800fd20 <atan+0x30>
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	4620      	mov	r0, r4
 800fd14:	4629      	mov	r1, r5
 800fd16:	f7f0 fac1 	bl	800029c <__adddf3>
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	460d      	mov	r5, r1
 800fd1e:	e006      	b.n	800fd2e <atan+0x3e>
 800fd20:	f1bb 0f00 	cmp.w	fp, #0
 800fd24:	f340 812b 	ble.w	800ff7e <atan+0x28e>
 800fd28:	a597      	add	r5, pc, #604	@ (adr r5, 800ff88 <atan+0x298>)
 800fd2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd2e:	ec45 4b10 	vmov	d0, r4, r5
 800fd32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd36:	4bb2      	ldr	r3, [pc, #712]	@ (8010000 <atan+0x310>)
 800fd38:	429e      	cmp	r6, r3
 800fd3a:	d813      	bhi.n	800fd64 <atan+0x74>
 800fd3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fd40:	429e      	cmp	r6, r3
 800fd42:	d80c      	bhi.n	800fd5e <atan+0x6e>
 800fd44:	a392      	add	r3, pc, #584	@ (adr r3, 800ff90 <atan+0x2a0>)
 800fd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	f7f0 faa5 	bl	800029c <__adddf3>
 800fd52:	4bac      	ldr	r3, [pc, #688]	@ (8010004 <atan+0x314>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	f7f0 fee7 	bl	8000b28 <__aeabi_dcmpgt>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d1e7      	bne.n	800fd2e <atan+0x3e>
 800fd5e:	f04f 3aff 	mov.w	sl, #4294967295
 800fd62:	e029      	b.n	800fdb8 <atan+0xc8>
 800fd64:	f000 f95c 	bl	8010020 <fabs>
 800fd68:	4ba7      	ldr	r3, [pc, #668]	@ (8010008 <atan+0x318>)
 800fd6a:	429e      	cmp	r6, r3
 800fd6c:	ec55 4b10 	vmov	r4, r5, d0
 800fd70:	f200 80bc 	bhi.w	800feec <atan+0x1fc>
 800fd74:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fd78:	429e      	cmp	r6, r3
 800fd7a:	f200 809e 	bhi.w	800feba <atan+0x1ca>
 800fd7e:	4622      	mov	r2, r4
 800fd80:	462b      	mov	r3, r5
 800fd82:	4620      	mov	r0, r4
 800fd84:	4629      	mov	r1, r5
 800fd86:	f7f0 fa89 	bl	800029c <__adddf3>
 800fd8a:	4b9e      	ldr	r3, [pc, #632]	@ (8010004 <atan+0x314>)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f7f0 fa83 	bl	8000298 <__aeabi_dsub>
 800fd92:	2200      	movs	r2, #0
 800fd94:	4606      	mov	r6, r0
 800fd96:	460f      	mov	r7, r1
 800fd98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	4629      	mov	r1, r5
 800fda0:	f7f0 fa7c 	bl	800029c <__adddf3>
 800fda4:	4602      	mov	r2, r0
 800fda6:	460b      	mov	r3, r1
 800fda8:	4630      	mov	r0, r6
 800fdaa:	4639      	mov	r1, r7
 800fdac:	f7f0 fd56 	bl	800085c <__aeabi_ddiv>
 800fdb0:	f04f 0a00 	mov.w	sl, #0
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	4622      	mov	r2, r4
 800fdba:	462b      	mov	r3, r5
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	f7f0 fc22 	bl	8000608 <__aeabi_dmul>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4680      	mov	r8, r0
 800fdca:	4689      	mov	r9, r1
 800fdcc:	f7f0 fc1c 	bl	8000608 <__aeabi_dmul>
 800fdd0:	a371      	add	r3, pc, #452	@ (adr r3, 800ff98 <atan+0x2a8>)
 800fdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd6:	4606      	mov	r6, r0
 800fdd8:	460f      	mov	r7, r1
 800fdda:	f7f0 fc15 	bl	8000608 <__aeabi_dmul>
 800fdde:	a370      	add	r3, pc, #448	@ (adr r3, 800ffa0 <atan+0x2b0>)
 800fde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde4:	f7f0 fa5a 	bl	800029c <__adddf3>
 800fde8:	4632      	mov	r2, r6
 800fdea:	463b      	mov	r3, r7
 800fdec:	f7f0 fc0c 	bl	8000608 <__aeabi_dmul>
 800fdf0:	a36d      	add	r3, pc, #436	@ (adr r3, 800ffa8 <atan+0x2b8>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	f7f0 fa51 	bl	800029c <__adddf3>
 800fdfa:	4632      	mov	r2, r6
 800fdfc:	463b      	mov	r3, r7
 800fdfe:	f7f0 fc03 	bl	8000608 <__aeabi_dmul>
 800fe02:	a36b      	add	r3, pc, #428	@ (adr r3, 800ffb0 <atan+0x2c0>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fa48 	bl	800029c <__adddf3>
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	463b      	mov	r3, r7
 800fe10:	f7f0 fbfa 	bl	8000608 <__aeabi_dmul>
 800fe14:	a368      	add	r3, pc, #416	@ (adr r3, 800ffb8 <atan+0x2c8>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fa3f 	bl	800029c <__adddf3>
 800fe1e:	4632      	mov	r2, r6
 800fe20:	463b      	mov	r3, r7
 800fe22:	f7f0 fbf1 	bl	8000608 <__aeabi_dmul>
 800fe26:	a366      	add	r3, pc, #408	@ (adr r3, 800ffc0 <atan+0x2d0>)
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	f7f0 fa36 	bl	800029c <__adddf3>
 800fe30:	4642      	mov	r2, r8
 800fe32:	464b      	mov	r3, r9
 800fe34:	f7f0 fbe8 	bl	8000608 <__aeabi_dmul>
 800fe38:	a363      	add	r3, pc, #396	@ (adr r3, 800ffc8 <atan+0x2d8>)
 800fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3e:	4680      	mov	r8, r0
 800fe40:	4689      	mov	r9, r1
 800fe42:	4630      	mov	r0, r6
 800fe44:	4639      	mov	r1, r7
 800fe46:	f7f0 fbdf 	bl	8000608 <__aeabi_dmul>
 800fe4a:	a361      	add	r3, pc, #388	@ (adr r3, 800ffd0 <atan+0x2e0>)
 800fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe50:	f7f0 fa22 	bl	8000298 <__aeabi_dsub>
 800fe54:	4632      	mov	r2, r6
 800fe56:	463b      	mov	r3, r7
 800fe58:	f7f0 fbd6 	bl	8000608 <__aeabi_dmul>
 800fe5c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ffd8 <atan+0x2e8>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	f7f0 fa19 	bl	8000298 <__aeabi_dsub>
 800fe66:	4632      	mov	r2, r6
 800fe68:	463b      	mov	r3, r7
 800fe6a:	f7f0 fbcd 	bl	8000608 <__aeabi_dmul>
 800fe6e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ffe0 <atan+0x2f0>)
 800fe70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe74:	f7f0 fa10 	bl	8000298 <__aeabi_dsub>
 800fe78:	4632      	mov	r2, r6
 800fe7a:	463b      	mov	r3, r7
 800fe7c:	f7f0 fbc4 	bl	8000608 <__aeabi_dmul>
 800fe80:	a359      	add	r3, pc, #356	@ (adr r3, 800ffe8 <atan+0x2f8>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	f7f0 fa07 	bl	8000298 <__aeabi_dsub>
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	463b      	mov	r3, r7
 800fe8e:	f7f0 fbbb 	bl	8000608 <__aeabi_dmul>
 800fe92:	4602      	mov	r2, r0
 800fe94:	460b      	mov	r3, r1
 800fe96:	4640      	mov	r0, r8
 800fe98:	4649      	mov	r1, r9
 800fe9a:	f7f0 f9ff 	bl	800029c <__adddf3>
 800fe9e:	4622      	mov	r2, r4
 800fea0:	462b      	mov	r3, r5
 800fea2:	f7f0 fbb1 	bl	8000608 <__aeabi_dmul>
 800fea6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	d148      	bne.n	800ff42 <atan+0x252>
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	f7f0 f9f0 	bl	8000298 <__aeabi_dsub>
 800feb8:	e72f      	b.n	800fd1a <atan+0x2a>
 800feba:	4b52      	ldr	r3, [pc, #328]	@ (8010004 <atan+0x314>)
 800febc:	2200      	movs	r2, #0
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 f9e9 	bl	8000298 <__aeabi_dsub>
 800fec6:	4b4f      	ldr	r3, [pc, #316]	@ (8010004 <atan+0x314>)
 800fec8:	4606      	mov	r6, r0
 800feca:	460f      	mov	r7, r1
 800fecc:	2200      	movs	r2, #0
 800fece:	4620      	mov	r0, r4
 800fed0:	4629      	mov	r1, r5
 800fed2:	f7f0 f9e3 	bl	800029c <__adddf3>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4630      	mov	r0, r6
 800fedc:	4639      	mov	r1, r7
 800fede:	f7f0 fcbd 	bl	800085c <__aeabi_ddiv>
 800fee2:	f04f 0a01 	mov.w	sl, #1
 800fee6:	4604      	mov	r4, r0
 800fee8:	460d      	mov	r5, r1
 800feea:	e765      	b.n	800fdb8 <atan+0xc8>
 800feec:	4b47      	ldr	r3, [pc, #284]	@ (801000c <atan+0x31c>)
 800feee:	429e      	cmp	r6, r3
 800fef0:	d21c      	bcs.n	800ff2c <atan+0x23c>
 800fef2:	4b47      	ldr	r3, [pc, #284]	@ (8010010 <atan+0x320>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	4620      	mov	r0, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7f0 f9cd 	bl	8000298 <__aeabi_dsub>
 800fefe:	4b44      	ldr	r3, [pc, #272]	@ (8010010 <atan+0x320>)
 800ff00:	4606      	mov	r6, r0
 800ff02:	460f      	mov	r7, r1
 800ff04:	2200      	movs	r2, #0
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 fb7d 	bl	8000608 <__aeabi_dmul>
 800ff0e:	4b3d      	ldr	r3, [pc, #244]	@ (8010004 <atan+0x314>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	f7f0 f9c3 	bl	800029c <__adddf3>
 800ff16:	4602      	mov	r2, r0
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	f7f0 fc9d 	bl	800085c <__aeabi_ddiv>
 800ff22:	f04f 0a02 	mov.w	sl, #2
 800ff26:	4604      	mov	r4, r0
 800ff28:	460d      	mov	r5, r1
 800ff2a:	e745      	b.n	800fdb8 <atan+0xc8>
 800ff2c:	4622      	mov	r2, r4
 800ff2e:	462b      	mov	r3, r5
 800ff30:	4938      	ldr	r1, [pc, #224]	@ (8010014 <atan+0x324>)
 800ff32:	2000      	movs	r0, #0
 800ff34:	f7f0 fc92 	bl	800085c <__aeabi_ddiv>
 800ff38:	f04f 0a03 	mov.w	sl, #3
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	460d      	mov	r5, r1
 800ff40:	e73a      	b.n	800fdb8 <atan+0xc8>
 800ff42:	4b35      	ldr	r3, [pc, #212]	@ (8010018 <atan+0x328>)
 800ff44:	4e35      	ldr	r6, [pc, #212]	@ (801001c <atan+0x32c>)
 800ff46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 f9a3 	bl	8000298 <__aeabi_dsub>
 800ff52:	4622      	mov	r2, r4
 800ff54:	462b      	mov	r3, r5
 800ff56:	f7f0 f99f 	bl	8000298 <__aeabi_dsub>
 800ff5a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ff66:	f7f0 f997 	bl	8000298 <__aeabi_dsub>
 800ff6a:	f1bb 0f00 	cmp.w	fp, #0
 800ff6e:	4604      	mov	r4, r0
 800ff70:	460d      	mov	r5, r1
 800ff72:	f6bf aedc 	bge.w	800fd2e <atan+0x3e>
 800ff76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff7a:	461d      	mov	r5, r3
 800ff7c:	e6d7      	b.n	800fd2e <atan+0x3e>
 800ff7e:	a51c      	add	r5, pc, #112	@ (adr r5, 800fff0 <atan+0x300>)
 800ff80:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ff84:	e6d3      	b.n	800fd2e <atan+0x3e>
 800ff86:	bf00      	nop
 800ff88:	54442d18 	.word	0x54442d18
 800ff8c:	3ff921fb 	.word	0x3ff921fb
 800ff90:	8800759c 	.word	0x8800759c
 800ff94:	7e37e43c 	.word	0x7e37e43c
 800ff98:	e322da11 	.word	0xe322da11
 800ff9c:	3f90ad3a 	.word	0x3f90ad3a
 800ffa0:	24760deb 	.word	0x24760deb
 800ffa4:	3fa97b4b 	.word	0x3fa97b4b
 800ffa8:	a0d03d51 	.word	0xa0d03d51
 800ffac:	3fb10d66 	.word	0x3fb10d66
 800ffb0:	c54c206e 	.word	0xc54c206e
 800ffb4:	3fb745cd 	.word	0x3fb745cd
 800ffb8:	920083ff 	.word	0x920083ff
 800ffbc:	3fc24924 	.word	0x3fc24924
 800ffc0:	5555550d 	.word	0x5555550d
 800ffc4:	3fd55555 	.word	0x3fd55555
 800ffc8:	2c6a6c2f 	.word	0x2c6a6c2f
 800ffcc:	bfa2b444 	.word	0xbfa2b444
 800ffd0:	52defd9a 	.word	0x52defd9a
 800ffd4:	3fadde2d 	.word	0x3fadde2d
 800ffd8:	af749a6d 	.word	0xaf749a6d
 800ffdc:	3fb3b0f2 	.word	0x3fb3b0f2
 800ffe0:	fe231671 	.word	0xfe231671
 800ffe4:	3fbc71c6 	.word	0x3fbc71c6
 800ffe8:	9998ebc4 	.word	0x9998ebc4
 800ffec:	3fc99999 	.word	0x3fc99999
 800fff0:	54442d18 	.word	0x54442d18
 800fff4:	bff921fb 	.word	0xbff921fb
 800fff8:	440fffff 	.word	0x440fffff
 800fffc:	7ff00000 	.word	0x7ff00000
 8010000:	3fdbffff 	.word	0x3fdbffff
 8010004:	3ff00000 	.word	0x3ff00000
 8010008:	3ff2ffff 	.word	0x3ff2ffff
 801000c:	40038000 	.word	0x40038000
 8010010:	3ff80000 	.word	0x3ff80000
 8010014:	bff00000 	.word	0xbff00000
 8010018:	08010a50 	.word	0x08010a50
 801001c:	08010a70 	.word	0x08010a70

08010020 <fabs>:
 8010020:	ec51 0b10 	vmov	r0, r1, d0
 8010024:	4602      	mov	r2, r0
 8010026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801002a:	ec43 2b10 	vmov	d0, r2, r3
 801002e:	4770      	bx	lr

08010030 <lrint>:
 8010030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010032:	ec51 0b10 	vmov	r0, r1, d0
 8010036:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801003a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801003e:	2b13      	cmp	r3, #19
 8010040:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8010044:	dc28      	bgt.n	8010098 <lrint+0x68>
 8010046:	3301      	adds	r3, #1
 8010048:	da02      	bge.n	8010050 <lrint+0x20>
 801004a:	2000      	movs	r0, #0
 801004c:	b003      	add	sp, #12
 801004e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010050:	4b27      	ldr	r3, [pc, #156]	@ (80100f0 <lrint+0xc0>)
 8010052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010056:	e9d3 6700 	ldrd	r6, r7, [r3]
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4630      	mov	r0, r6
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 f91b 	bl	800029c <__adddf3>
 8010066:	e9cd 0100 	strd	r0, r1, [sp]
 801006a:	4632      	mov	r2, r6
 801006c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010070:	463b      	mov	r3, r7
 8010072:	f7f0 f911 	bl	8000298 <__aeabi_dsub>
 8010076:	f031 4200 	bics.w	r2, r1, #2147483648	@ 0x80000000
 801007a:	d0e6      	beq.n	801004a <lrint+0x1a>
 801007c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010080:	f3c1 0013 	ubfx	r0, r1, #0, #20
 8010084:	f5c3 6382 	rsb	r3, r3, #1040	@ 0x410
 8010088:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801008c:	3303      	adds	r3, #3
 801008e:	4118      	asrs	r0, r3
 8010090:	2c00      	cmp	r4, #0
 8010092:	d0db      	beq.n	801004c <lrint+0x1c>
 8010094:	4240      	negs	r0, r0
 8010096:	e7d9      	b.n	801004c <lrint+0x1c>
 8010098:	2b1e      	cmp	r3, #30
 801009a:	dc25      	bgt.n	80100e8 <lrint+0xb8>
 801009c:	4b14      	ldr	r3, [pc, #80]	@ (80100f0 <lrint+0xc0>)
 801009e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80100a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	4630      	mov	r0, r6
 80100ac:	4639      	mov	r1, r7
 80100ae:	f7f0 f8f5 	bl	800029c <__adddf3>
 80100b2:	e9cd 0100 	strd	r0, r1, [sp]
 80100b6:	4632      	mov	r2, r6
 80100b8:	463b      	mov	r3, r7
 80100ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100be:	f7f0 f8eb 	bl	8000298 <__aeabi_dsub>
 80100c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100c6:	f2a2 4513 	subw	r5, r2, #1043	@ 0x413
 80100ca:	f5c2 6286 	rsb	r2, r2, #1072	@ 0x430
 80100ce:	3203      	adds	r2, #3
 80100d0:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80100d4:	2a1f      	cmp	r2, #31
 80100d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100da:	fa03 f305 	lsl.w	r3, r3, r5
 80100de:	bf94      	ite	ls
 80100e0:	40d0      	lsrls	r0, r2
 80100e2:	2000      	movhi	r0, #0
 80100e4:	4318      	orrs	r0, r3
 80100e6:	e7d3      	b.n	8010090 <lrint+0x60>
 80100e8:	f7f0 fd3e 	bl	8000b68 <__aeabi_d2iz>
 80100ec:	e7ae      	b.n	801004c <lrint+0x1c>
 80100ee:	bf00      	nop
 80100f0:	08010a90 	.word	0x08010a90

080100f4 <__ieee754_sqrt>:
 80100f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f8:	4a68      	ldr	r2, [pc, #416]	@ (801029c <__ieee754_sqrt+0x1a8>)
 80100fa:	ec55 4b10 	vmov	r4, r5, d0
 80100fe:	43aa      	bics	r2, r5
 8010100:	462b      	mov	r3, r5
 8010102:	4621      	mov	r1, r4
 8010104:	d110      	bne.n	8010128 <__ieee754_sqrt+0x34>
 8010106:	4622      	mov	r2, r4
 8010108:	4620      	mov	r0, r4
 801010a:	4629      	mov	r1, r5
 801010c:	f7f0 fa7c 	bl	8000608 <__aeabi_dmul>
 8010110:	4602      	mov	r2, r0
 8010112:	460b      	mov	r3, r1
 8010114:	4620      	mov	r0, r4
 8010116:	4629      	mov	r1, r5
 8010118:	f7f0 f8c0 	bl	800029c <__adddf3>
 801011c:	4604      	mov	r4, r0
 801011e:	460d      	mov	r5, r1
 8010120:	ec45 4b10 	vmov	d0, r4, r5
 8010124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010128:	2d00      	cmp	r5, #0
 801012a:	dc0e      	bgt.n	801014a <__ieee754_sqrt+0x56>
 801012c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010130:	4322      	orrs	r2, r4
 8010132:	d0f5      	beq.n	8010120 <__ieee754_sqrt+0x2c>
 8010134:	b19d      	cbz	r5, 801015e <__ieee754_sqrt+0x6a>
 8010136:	4622      	mov	r2, r4
 8010138:	4620      	mov	r0, r4
 801013a:	4629      	mov	r1, r5
 801013c:	f7f0 f8ac 	bl	8000298 <__aeabi_dsub>
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	f7f0 fb8a 	bl	800085c <__aeabi_ddiv>
 8010148:	e7e8      	b.n	801011c <__ieee754_sqrt+0x28>
 801014a:	152a      	asrs	r2, r5, #20
 801014c:	d115      	bne.n	801017a <__ieee754_sqrt+0x86>
 801014e:	2000      	movs	r0, #0
 8010150:	e009      	b.n	8010166 <__ieee754_sqrt+0x72>
 8010152:	0acb      	lsrs	r3, r1, #11
 8010154:	3a15      	subs	r2, #21
 8010156:	0549      	lsls	r1, r1, #21
 8010158:	2b00      	cmp	r3, #0
 801015a:	d0fa      	beq.n	8010152 <__ieee754_sqrt+0x5e>
 801015c:	e7f7      	b.n	801014e <__ieee754_sqrt+0x5a>
 801015e:	462a      	mov	r2, r5
 8010160:	e7fa      	b.n	8010158 <__ieee754_sqrt+0x64>
 8010162:	005b      	lsls	r3, r3, #1
 8010164:	3001      	adds	r0, #1
 8010166:	02dc      	lsls	r4, r3, #11
 8010168:	d5fb      	bpl.n	8010162 <__ieee754_sqrt+0x6e>
 801016a:	1e44      	subs	r4, r0, #1
 801016c:	1b12      	subs	r2, r2, r4
 801016e:	f1c0 0420 	rsb	r4, r0, #32
 8010172:	fa21 f404 	lsr.w	r4, r1, r4
 8010176:	4323      	orrs	r3, r4
 8010178:	4081      	lsls	r1, r0
 801017a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801017e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010186:	07d2      	lsls	r2, r2, #31
 8010188:	bf5c      	itt	pl
 801018a:	005b      	lslpl	r3, r3, #1
 801018c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010190:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010194:	bf58      	it	pl
 8010196:	0049      	lslpl	r1, r1, #1
 8010198:	2600      	movs	r6, #0
 801019a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801019e:	106d      	asrs	r5, r5, #1
 80101a0:	0049      	lsls	r1, r1, #1
 80101a2:	2016      	movs	r0, #22
 80101a4:	4632      	mov	r2, r6
 80101a6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80101aa:	1917      	adds	r7, r2, r4
 80101ac:	429f      	cmp	r7, r3
 80101ae:	bfde      	ittt	le
 80101b0:	193a      	addle	r2, r7, r4
 80101b2:	1bdb      	suble	r3, r3, r7
 80101b4:	1936      	addle	r6, r6, r4
 80101b6:	0fcf      	lsrs	r7, r1, #31
 80101b8:	3801      	subs	r0, #1
 80101ba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80101be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80101c2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80101c6:	d1f0      	bne.n	80101aa <__ieee754_sqrt+0xb6>
 80101c8:	4604      	mov	r4, r0
 80101ca:	2720      	movs	r7, #32
 80101cc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80101d0:	429a      	cmp	r2, r3
 80101d2:	eb00 0e0c 	add.w	lr, r0, ip
 80101d6:	db02      	blt.n	80101de <__ieee754_sqrt+0xea>
 80101d8:	d113      	bne.n	8010202 <__ieee754_sqrt+0x10e>
 80101da:	458e      	cmp	lr, r1
 80101dc:	d811      	bhi.n	8010202 <__ieee754_sqrt+0x10e>
 80101de:	f1be 0f00 	cmp.w	lr, #0
 80101e2:	eb0e 000c 	add.w	r0, lr, ip
 80101e6:	da42      	bge.n	801026e <__ieee754_sqrt+0x17a>
 80101e8:	2800      	cmp	r0, #0
 80101ea:	db40      	blt.n	801026e <__ieee754_sqrt+0x17a>
 80101ec:	f102 0801 	add.w	r8, r2, #1
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	458e      	cmp	lr, r1
 80101f4:	bf88      	it	hi
 80101f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80101fa:	eba1 010e 	sub.w	r1, r1, lr
 80101fe:	4464      	add	r4, ip
 8010200:	4642      	mov	r2, r8
 8010202:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010206:	3f01      	subs	r7, #1
 8010208:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801020c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010210:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010214:	d1dc      	bne.n	80101d0 <__ieee754_sqrt+0xdc>
 8010216:	4319      	orrs	r1, r3
 8010218:	d01b      	beq.n	8010252 <__ieee754_sqrt+0x15e>
 801021a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80102a0 <__ieee754_sqrt+0x1ac>
 801021e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80102a4 <__ieee754_sqrt+0x1b0>
 8010222:	e9da 0100 	ldrd	r0, r1, [sl]
 8010226:	e9db 2300 	ldrd	r2, r3, [fp]
 801022a:	f7f0 f835 	bl	8000298 <__aeabi_dsub>
 801022e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010232:	4602      	mov	r2, r0
 8010234:	460b      	mov	r3, r1
 8010236:	4640      	mov	r0, r8
 8010238:	4649      	mov	r1, r9
 801023a:	f7f0 fc61 	bl	8000b00 <__aeabi_dcmple>
 801023e:	b140      	cbz	r0, 8010252 <__ieee754_sqrt+0x15e>
 8010240:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010244:	e9da 0100 	ldrd	r0, r1, [sl]
 8010248:	e9db 2300 	ldrd	r2, r3, [fp]
 801024c:	d111      	bne.n	8010272 <__ieee754_sqrt+0x17e>
 801024e:	3601      	adds	r6, #1
 8010250:	463c      	mov	r4, r7
 8010252:	1072      	asrs	r2, r6, #1
 8010254:	0863      	lsrs	r3, r4, #1
 8010256:	07f1      	lsls	r1, r6, #31
 8010258:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801025c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010260:	bf48      	it	mi
 8010262:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010266:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801026a:	4618      	mov	r0, r3
 801026c:	e756      	b.n	801011c <__ieee754_sqrt+0x28>
 801026e:	4690      	mov	r8, r2
 8010270:	e7be      	b.n	80101f0 <__ieee754_sqrt+0xfc>
 8010272:	f7f0 f813 	bl	800029c <__adddf3>
 8010276:	e9da 8900 	ldrd	r8, r9, [sl]
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	4640      	mov	r0, r8
 8010280:	4649      	mov	r1, r9
 8010282:	f7f0 fc33 	bl	8000aec <__aeabi_dcmplt>
 8010286:	b120      	cbz	r0, 8010292 <__ieee754_sqrt+0x19e>
 8010288:	1ca0      	adds	r0, r4, #2
 801028a:	bf08      	it	eq
 801028c:	3601      	addeq	r6, #1
 801028e:	3402      	adds	r4, #2
 8010290:	e7df      	b.n	8010252 <__ieee754_sqrt+0x15e>
 8010292:	1c63      	adds	r3, r4, #1
 8010294:	f023 0401 	bic.w	r4, r3, #1
 8010298:	e7db      	b.n	8010252 <__ieee754_sqrt+0x15e>
 801029a:	bf00      	nop
 801029c:	7ff00000 	.word	0x7ff00000
 80102a0:	200002d0 	.word	0x200002d0
 80102a4:	200002c8 	.word	0x200002c8

080102a8 <_init>:
 80102a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102aa:	bf00      	nop
 80102ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ae:	bc08      	pop	{r3}
 80102b0:	469e      	mov	lr, r3
 80102b2:	4770      	bx	lr

080102b4 <_fini>:
 80102b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b6:	bf00      	nop
 80102b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102ba:	bc08      	pop	{r3}
 80102bc:	469e      	mov	lr, r3
 80102be:	4770      	bx	lr
